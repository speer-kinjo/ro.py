{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 Welcome to ro.py! ro.py is an asynchronous, object-oriented wrapper for the Roblox web API. Features \u00b6 The key features are: Asynchronous : ro.py works well with asynchronous frameworks like FastAPI and discord.py . Easy : ro.py's client-based model is intuitive and easy to learn for both the beginner and expert developer. It abstracts away API requests and leaves you with simple objects that represent data types on the Roblox platform. Flexible : ro.py's builtin Requests object allows the user to do things that we haven't already implemented ourselves without dealing with advanced Roblox-specific concepts. Installation \u00b6 Warning ro.py is in the process of being completely rewritten for the v2.0 release. All ro.py releases on PyPI (both the ro-py and roblox packages) are using the v1.2.0.5 release, which is not compatible with the documentation found here. To install ro.py from git, install git-scm and run the following: pip install git+git://github.com/ro-py/ro.py.git To install ro.py from PyPI, which is currently incompatible with this documentation, you can install with pip: pip install roblox","title":"Overview"},{"location":"#overview","text":"Welcome to ro.py! ro.py is an asynchronous, object-oriented wrapper for the Roblox web API.","title":"Overview"},{"location":"#features","text":"The key features are: Asynchronous : ro.py works well with asynchronous frameworks like FastAPI and discord.py . Easy : ro.py's client-based model is intuitive and easy to learn for both the beginner and expert developer. It abstracts away API requests and leaves you with simple objects that represent data types on the Roblox platform. Flexible : ro.py's builtin Requests object allows the user to do things that we haven't already implemented ourselves without dealing with advanced Roblox-specific concepts.","title":"Features"},{"location":"#installation","text":"Warning ro.py is in the process of being completely rewritten for the v2.0 release. All ro.py releases on PyPI (both the ro-py and roblox packages) are using the v1.2.0.5 release, which is not compatible with the documentation found here. To install ro.py from git, install git-scm and run the following: pip install git+git://github.com/ro-py/ro.py.git To install ro.py from PyPI, which is currently incompatible with this documentation, you can install with pip: pip install roblox","title":"Installation"},{"location":"SUMMARY/","text":"Overview Tutorial Get Started Authentication ROBLOSECURITY Extensions Migrating to v2.0 Code Reference","title":"SUMMARY"},{"location":"extensions/","text":"Extensions \u00b6 ro.py-discord \u00b6 ro.py-discord is a library that connects ro.py to verification APIs like Bloxlink and RoVer, allowing you to easily create tools that use ro.py in a Discord context, like a Discord bot. ro.py-server \u00b6 ro.py-server is a FastAPI-based web server that implements core ro.py functionality and allows you to securely interact with Roblox without a proxy, CSRF handling, or CORS limitations. It also includes a module intended to be used inside of a Roblox game.","title":"Extensions"},{"location":"extensions/#extensions","text":"","title":"Extensions"},{"location":"extensions/#ropy-discord","text":"ro.py-discord is a library that connects ro.py to verification APIs like Bloxlink and RoVer, allowing you to easily create tools that use ro.py in a Discord context, like a Discord bot.","title":"ro.py-discord"},{"location":"extensions/#ropy-server","text":"ro.py-server is a FastAPI-based web server that implements core ro.py functionality and allows you to securely interact with Roblox without a proxy, CSRF handling, or CORS limitations. It also includes a module intended to be used inside of a Roblox game.","title":"ro.py-server"},{"location":"migrating/","text":"Migrating to v2.0 \u00b6 Changes \u00b6 The cache has been removed. When you call client.get_XYZ , you can guarantee that you'll always get a new object. Keep this in mind. The events system has been removed. The polling behavior was hard to maintain and a polling solution ro.py's gamepersistence system has been removed. It may be added in the future. ro.py's trade system has been removed. We have no plans to reimplement it. Client.filter_text() has been removed. It may be added back in the future. Client.get_game_by_place_id() and Client.get_game_by_universe_id() have been removed. Instead, use Client.get_place() and Client.get_universe() . The captcha system has been removed, along with methods that used it, including Client.user_login() and Client.get_captcha_metadata() Client.secure_sign_out() has been removed. BaseGroup.get_member() now returns an abstract MemberRelationship representing the relationship between a group and a user. For this reason, it is no longer a coroutine. BaseGroup.get_member_by_username is still a coroutine. The thumbnail system has been rewritten. For this reason, BaseUser.thumbnails no longer exists and you should use Client.thumbnails or BaseXYZ.get_thumbnail methods. Some methods have been renamed. Client.get_self() -> Client.get_authenticated_user() The way objects were structured in ro.py has changed. In the past, objects would be responsible for their own requests with an update method - now they take in data and parse it. If your code ever calls .update","title":"Migrating to v2.0"},{"location":"migrating/#migrating-to-v20","text":"","title":"Migrating to v2.0"},{"location":"migrating/#changes","text":"The cache has been removed. When you call client.get_XYZ , you can guarantee that you'll always get a new object. Keep this in mind. The events system has been removed. The polling behavior was hard to maintain and a polling solution ro.py's gamepersistence system has been removed. It may be added in the future. ro.py's trade system has been removed. We have no plans to reimplement it. Client.filter_text() has been removed. It may be added back in the future. Client.get_game_by_place_id() and Client.get_game_by_universe_id() have been removed. Instead, use Client.get_place() and Client.get_universe() . The captcha system has been removed, along with methods that used it, including Client.user_login() and Client.get_captcha_metadata() Client.secure_sign_out() has been removed. BaseGroup.get_member() now returns an abstract MemberRelationship representing the relationship between a group and a user. For this reason, it is no longer a coroutine. BaseGroup.get_member_by_username is still a coroutine. The thumbnail system has been rewritten. For this reason, BaseUser.thumbnails no longer exists and you should use Client.thumbnails or BaseXYZ.get_thumbnail methods. Some methods have been renamed. Client.get_self() -> Client.get_authenticated_user() The way objects were structured in ro.py has changed. In the past, objects would be responsible for their own requests with an update method - now they take in data and parse it. If your code ever calls .update","title":"Changes"},{"location":"roblosecurity/","text":"ROBLOSECURITY \u00b6 When you log in on the Roblox website, you create a new session with a special identifier linked to it, and that token is stored on your computer as a cookie. Every single time your computer asks Roblox to do anything - for example, \"give me the name of this user\" - your computer also gives this token to Roblox, and it can look and see if that token is valid. Let's say you're asking Roblox to give you a list of your friends. It'll look at that token and know who you are, and can use that to give you your friends list. When you log out, that token is invalidated. Even if the client holds on to the token, it won't be valid after logging out. This token is called the .ROBLOSECURITY token and you will need one to do anything that you need to be logged in to do on Roblox, including: - getting information about yourself (name, description, ID, etc) - changing avatar - getting friends list - playing games Danger You may have heard of this token before and have been told that you should never, under any circumstances, share this token with anyone - and this is true! This token does give an attacker access to your Roblox account, but they will still need to solve all the same 2-factor, PIN, captcha, and password prompts that they normally do. We recommend using some sort of alternate account with only the permissions it needs to reduce the destruction a possible attacker can do. We're going to skip asking the server to log us in. We're just going to log in on the Roblox website and then copy the cookie from our web browser and use it in our code. Warning Pressing the \"Log out\" button on the Roblox website invalidates your token, so you should not press this button after grabbing your token. Use a private window and close it afterwards to avoid pressing this button. To grab your .ROBLOSECURITY cookie, log into your account and follow the instructions below. Chrome/Chromium-based You can access the cookie by going to https://www.roblox.com/ , pressing the padlock icon next to the URL in your browser, clicking the arrow next to roblox.com , opening up the \"Cookies\" folder, clicking \".ROBLOSECURITY\", clicking on the \"Content\" text once, pressing Ctrl + A , and then pressing Ctrl + C (make sure not to double-click this field as you won't select the entire value!) Alternatively, you can access the cookie by going to https://www.roblox.com/ , pressing Ctrl + Shift + I to access the Developer Tools, navigating to the \"Application\" tab, opening up the arrow next to \"Cookies\" on the sidebar on the left, clicking the https://www.roblox.com item underneath the Cookies button, and then copying the .ROBLOSECURITY token by double-clicking on the value and then hitting Ctrl + C . Firefox You can access the cookie by going to https://www.roblox.com/ and pressing Shift + F9 , pressing the \"Storage\" tab button on the top, opening up the \"Cookies\" section in the sidebar on the left, clicking the https://www.roblox.com item underneath it, and then copying the .ROBLOSECURITY token by double-clicking on the value and then hitting Ctrl + C .","title":"ROBLOSECURITY"},{"location":"roblosecurity/#roblosecurity","text":"When you log in on the Roblox website, you create a new session with a special identifier linked to it, and that token is stored on your computer as a cookie. Every single time your computer asks Roblox to do anything - for example, \"give me the name of this user\" - your computer also gives this token to Roblox, and it can look and see if that token is valid. Let's say you're asking Roblox to give you a list of your friends. It'll look at that token and know who you are, and can use that to give you your friends list. When you log out, that token is invalidated. Even if the client holds on to the token, it won't be valid after logging out. This token is called the .ROBLOSECURITY token and you will need one to do anything that you need to be logged in to do on Roblox, including: - getting information about yourself (name, description, ID, etc) - changing avatar - getting friends list - playing games Danger You may have heard of this token before and have been told that you should never, under any circumstances, share this token with anyone - and this is true! This token does give an attacker access to your Roblox account, but they will still need to solve all the same 2-factor, PIN, captcha, and password prompts that they normally do. We recommend using some sort of alternate account with only the permissions it needs to reduce the destruction a possible attacker can do. We're going to skip asking the server to log us in. We're just going to log in on the Roblox website and then copy the cookie from our web browser and use it in our code. Warning Pressing the \"Log out\" button on the Roblox website invalidates your token, so you should not press this button after grabbing your token. Use a private window and close it afterwards to avoid pressing this button. To grab your .ROBLOSECURITY cookie, log into your account and follow the instructions below. Chrome/Chromium-based You can access the cookie by going to https://www.roblox.com/ , pressing the padlock icon next to the URL in your browser, clicking the arrow next to roblox.com , opening up the \"Cookies\" folder, clicking \".ROBLOSECURITY\", clicking on the \"Content\" text once, pressing Ctrl + A , and then pressing Ctrl + C (make sure not to double-click this field as you won't select the entire value!) Alternatively, you can access the cookie by going to https://www.roblox.com/ , pressing Ctrl + Shift + I to access the Developer Tools, navigating to the \"Application\" tab, opening up the arrow next to \"Cookies\" on the sidebar on the left, clicking the https://www.roblox.com item underneath the Cookies button, and then copying the .ROBLOSECURITY token by double-clicking on the value and then hitting Ctrl + C . Firefox You can access the cookie by going to https://www.roblox.com/ and pressing Shift + F9 , pressing the \"Storage\" tab button on the top, opening up the \"Cookies\" section in the sidebar on the left, clicking the https://www.roblox.com item underneath it, and then copying the .ROBLOSECURITY token by double-clicking on the value and then hitting Ctrl + C .","title":"ROBLOSECURITY"},{"location":"reference/SUMMARY/","text":"roblox __init__ account assets badges bases __init__ baseasset basebadge baseconversation basegamepass basegroup baseinstance baseitem basejob baseplace baseplugin baserobloxbadge baserole basesociallink baseuniverse baseuser chat client conversations creatortype delivery friends gamepasses groups instances jobs members partials __init__ partialbadge partialgroup partialrole partialuniverse partialuser places plugins presence promotionchannels resale robloxbadges roles shout sociallinks threedthumbnails thumbnails universes users utilities __init__ exceptions iterators requests shared url wall","title":"SUMMARY"},{"location":"reference/roblox/__init__/","text":"roblox.__init__ special \u00b6 ro.py A modern, asynchronous wrapper for the Roblox web API. Copyright 2020-present jmkdev License: MIT, see LICENSE __author__ special \u00b6 __copyright__ special \u00b6 __license__ special \u00b6 __title__ special \u00b6 __version__ special \u00b6 version_info : VersionInfo \u00b6 VersionInfo ( tuple ) \u00b6 Represents the package's version info. major : int \u00b6 micro : int \u00b6 minor : int \u00b6 releaselevel : Literal [ 'alpha' , 'beta' , 'candidate' , 'final' ] \u00b6 serial : int \u00b6 __getnewargs__ ( self ) special \u00b6 Return self as a plain tuple. Used by copy and pickle. Source code in roblox/__init__.py def __getnewargs__ ( self ): 'Return self as a plain tuple. Used by copy and pickle.' return _tuple ( self ) __new__ ( _cls , major : int , minor : int , micro : int , releaselevel : Literal [ 'alpha' , 'beta' , 'candidate' , 'final' ], serial : int ) special staticmethod \u00b6 Create new instance of VersionInfo(major, minor, micro, releaselevel, serial) __repr__ ( self ) special \u00b6 Return a nicely formatted representation string Source code in roblox/__init__.py def __repr__ ( self ): 'Return a nicely formatted representation string' return self . __class__ . __name__ + repr_fmt % self","title":"__init__"},{"location":"reference/roblox/__init__/#roblox.__init__","text":"ro.py A modern, asynchronous wrapper for the Roblox web API. Copyright 2020-present jmkdev License: MIT, see LICENSE","title":"__init__"},{"location":"reference/roblox/__init__/#roblox.__init__.__author__","text":"","title":"__author__"},{"location":"reference/roblox/__init__/#roblox.__init__.__copyright__","text":"","title":"__copyright__"},{"location":"reference/roblox/__init__/#roblox.__init__.__license__","text":"","title":"__license__"},{"location":"reference/roblox/__init__/#roblox.__init__.__title__","text":"","title":"__title__"},{"location":"reference/roblox/__init__/#roblox.__init__.__version__","text":"","title":"__version__"},{"location":"reference/roblox/__init__/#roblox.__init__.version_info","text":"","title":"version_info"},{"location":"reference/roblox/__init__/#roblox.__init__.VersionInfo","text":"Represents the package's version info.","title":"VersionInfo"},{"location":"reference/roblox/__init__/#roblox.__init__.VersionInfo.major","text":"","title":"major"},{"location":"reference/roblox/__init__/#roblox.__init__.VersionInfo.micro","text":"","title":"micro"},{"location":"reference/roblox/__init__/#roblox.__init__.VersionInfo.minor","text":"","title":"minor"},{"location":"reference/roblox/__init__/#roblox.__init__.VersionInfo.releaselevel","text":"","title":"releaselevel"},{"location":"reference/roblox/__init__/#roblox.__init__.VersionInfo.serial","text":"","title":"serial"},{"location":"reference/roblox/__init__/#roblox.__init__.VersionInfo.__getnewargs__","text":"Return self as a plain tuple. Used by copy and pickle. Source code in roblox/__init__.py def __getnewargs__ ( self ): 'Return self as a plain tuple. Used by copy and pickle.' return _tuple ( self )","title":"__getnewargs__()"},{"location":"reference/roblox/__init__/#roblox.__init__.VersionInfo.__new__","text":"Create new instance of VersionInfo(major, minor, micro, releaselevel, serial)","title":"__new__()"},{"location":"reference/roblox/__init__/#roblox.__init__.VersionInfo.__repr__","text":"Return a nicely formatted representation string Source code in roblox/__init__.py def __repr__ ( self ): 'Return a nicely formatted representation string' return self . __class__ . __name__ + repr_fmt % self","title":"__repr__()"},{"location":"reference/roblox/account/","text":"roblox.account \u00b6 Contains classes and functions related to the authenticated Roblox account. Not to be confused with users.py or the Account system. AccountProvider \u00b6 Provides methods that control the authenticated user's account. __init__ ( self , shared : ClientSharedObject ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject to be used when getting information on an account. required Source code in roblox/account.py def __init__ ( self , shared : ClientSharedObject ): \"\"\" Arguments: shared: The ClientSharedObject to be used when getting information on an account. \"\"\" self . _shared : ClientSharedObject = shared get_birthday ( self ) -> date async \u00b6 Gets the authenticated user's birthday. Returns: The authenticated user's birthday. Source code in roblox/account.py async def get_birthday ( self ) -> date : \"\"\" Gets the authenticated user's birthday. Returns: The authenticated user's birthday. \"\"\" birthday_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"accountinformation\" , \"v1/birthdate\" ) ) birthday_data = birthday_response . json () return date ( month = birthday_data [ \"birthMonth\" ], day = birthday_data [ \"birthDay\" ], year = birthday_data [ \"birthYear\" ] ) set_birthday ( self , birthday : date , password : str = None ) async \u00b6 Changes the authenticated user's birthday. This endpoint may require your password, and requires an unlocked PIN. Parameters: Name Type Description Default birthday date A date object that represents the birthay to update the ClientSharedObject's account to. required password str The password to the ClientSharedObject's account, this is required when changing the birthday. None Source code in roblox/account.py async def set_birthday ( self , birthday : date , password : str = None ): \"\"\" Changes the authenticated user's birthday. This endpoint *may* require your password, and requires an unlocked PIN. Arguments: birthday: A date object that represents the birthay to update the ClientSharedObject's account to. password: The password to the ClientSharedObject's account, this is required when changing the birthday. \"\"\" await self . _shared . requests . post ( url = self . _shared . url_generator . get_url ( \"accountinformation\" , \"v1/birthdate\" ), json = { \"birthMonth\" : birthday . month , \"birthDay\" : birthday . day , \"birthYear\" : birthday . year , \"password\" : password } )","title":"account"},{"location":"reference/roblox/account/#roblox.account","text":"Contains classes and functions related to the authenticated Roblox account. Not to be confused with users.py or the Account system.","title":"account"},{"location":"reference/roblox/account/#roblox.account.AccountProvider","text":"Provides methods that control the authenticated user's account.","title":"AccountProvider"},{"location":"reference/roblox/account/#roblox.account.AccountProvider.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject to be used when getting information on an account. required Source code in roblox/account.py def __init__ ( self , shared : ClientSharedObject ): \"\"\" Arguments: shared: The ClientSharedObject to be used when getting information on an account. \"\"\" self . _shared : ClientSharedObject = shared","title":"__init__()"},{"location":"reference/roblox/account/#roblox.account.AccountProvider.get_birthday","text":"Gets the authenticated user's birthday. Returns: The authenticated user's birthday. Source code in roblox/account.py async def get_birthday ( self ) -> date : \"\"\" Gets the authenticated user's birthday. Returns: The authenticated user's birthday. \"\"\" birthday_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"accountinformation\" , \"v1/birthdate\" ) ) birthday_data = birthday_response . json () return date ( month = birthday_data [ \"birthMonth\" ], day = birthday_data [ \"birthDay\" ], year = birthday_data [ \"birthYear\" ] )","title":"get_birthday()"},{"location":"reference/roblox/account/#roblox.account.AccountProvider.set_birthday","text":"Changes the authenticated user's birthday. This endpoint may require your password, and requires an unlocked PIN. Parameters: Name Type Description Default birthday date A date object that represents the birthay to update the ClientSharedObject's account to. required password str The password to the ClientSharedObject's account, this is required when changing the birthday. None Source code in roblox/account.py async def set_birthday ( self , birthday : date , password : str = None ): \"\"\" Changes the authenticated user's birthday. This endpoint *may* require your password, and requires an unlocked PIN. Arguments: birthday: A date object that represents the birthay to update the ClientSharedObject's account to. password: The password to the ClientSharedObject's account, this is required when changing the birthday. \"\"\" await self . _shared . requests . post ( url = self . _shared . url_generator . get_url ( \"accountinformation\" , \"v1/birthdate\" ), json = { \"birthMonth\" : birthday . month , \"birthDay\" : birthday . day , \"birthYear\" : birthday . year , \"password\" : password } )","title":"set_birthday()"},{"location":"reference/roblox/assets/","text":"roblox.assets \u00b6 This module contains classes intended to parse and deal with data from Roblox asset information endpoints. asset_type_names \u00b6 AssetType \u00b6 Represents a Roblox asset type. Attributes: Name Type Description id int Id of the Asset name Optional[str] Name of the Asset __init__ ( self , type_id : int ) special \u00b6 Parameters: Name Type Description Default type_id int The AssetTypeID to instantiate this AssetType object with. This is used to determine the name of the AssetType. required Source code in roblox/assets.py def __init__ ( self , type_id : int ): \"\"\" Arguments: type_id: The AssetTypeID to instantiate this AssetType object with. This is used to determine the name of the AssetType. \"\"\" self . id : int = type_id self . name : Optional [ str ] = asset_type_names . get ( type_id ) __repr__ ( self ) special \u00b6 Source code in roblox/assets.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" EconomyAsset ( BaseAsset ) \u00b6 Represents a Roblox asset. It is intended to parse data from https://economy.roblox.com/v2/assets/ASSETID/details . Attributes: Name Type Description id int Id of the Asset product_id int Product id of the asset name str Name of the Asset description str Description of the Asset type AssetType Type of the Asset creator_type CreatorType Type of creator can be user or group see enum creator Union[PartialUser, AssetPartialGroup] creator can be a user or group object icon_image BaseAsset BaseAsset created datetime When the asset was created updated datetime When the asset was updated for the las time price Optional[int] price of the asset sales int amount of sales of the asset is_new bool if the asset it new is_for_sale bool if the asset is for sale is_public_domain bool if the asset is public domain is_limited bool if the asset is a limited item is_limited_unique bool if the asset is a unique limited item remaining Optional[int] How many items there are remaining if it is limited minimum_membership_level int Minimum membership level required to buy item content_rating_type_id int Unknown sale_availability_locations Unknown __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject to be used when getting information on assets. required data dict The data form the request. required Source code in roblox/assets.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject to be used when getting information on assets. data: The data form the request. \"\"\" super () . __init__ ( shared = shared , asset_id = data [ \"AssetId\" ]) self . product_type : Optional [ str ] = data [ \"ProductType\" ] self . id : int = data [ \"AssetId\" ] self . product_id : int = data [ \"ProductId\" ] # TODO: make this a BaseProduct self . name : str = data [ \"Name\" ] self . description : str = data [ \"Description\" ] self . type : AssetType = AssetType ( type_id = data [ \"AssetTypeId\" ]) self . creator_type : CreatorType = CreatorType ( data [ \"Creator\" ][ \"CreatorType\" ]) self . creator : Union [ PartialUser , AssetPartialGroup ] if self . creator_type == CreatorType . user : self . creator : PartialUser = PartialUser ( shared = shared , data = data [ \"Creator\" ]) elif self . creator_type == CreatorType . group : self . creator : AssetPartialGroup = AssetPartialGroup ( shared = shared , data = data [ \"Creator\" ]) self . icon_image : BaseAsset = BaseAsset ( shared = shared , asset_id = data [ \"IconImageAssetId\" ]) self . created : datetime = parse ( data [ \"Created\" ]) self . updated : datetime = parse ( data [ \"Updated\" ]) self . price : Optional [ int ] = data [ \"PriceInRobux\" ] self . sales : int = data [ \"Sales\" ] self . is_new : bool = data [ \"IsNew\" ] self . is_for_sale : bool = data [ \"IsForSale\" ] self . is_public_domain : bool = data [ \"IsPublicDomain\" ] self . is_limited : bool = data [ \"IsLimited\" ] self . is_limited_unique : bool = data [ \"IsLimitedUnique\" ] self . remaining : Optional [ int ] = data [ \"Remaining\" ] self . minimum_membership_level : int = data [ \"MinimumMembershipLevel\" ] self . content_rating_type_id : int = data [ \"ContentRatingTypeId\" ] self . sale_availability_locations = data [ \"SaleAvailabilityLocations\" ] __repr__ ( self ) special \u00b6 Source code in roblox/assets.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } >\"","title":"assets"},{"location":"reference/roblox/assets/#roblox.assets","text":"This module contains classes intended to parse and deal with data from Roblox asset information endpoints.","title":"assets"},{"location":"reference/roblox/assets/#roblox.assets.asset_type_names","text":"","title":"asset_type_names"},{"location":"reference/roblox/assets/#roblox.assets.AssetType","text":"Represents a Roblox asset type. Attributes: Name Type Description id int Id of the Asset name Optional[str] Name of the Asset","title":"AssetType"},{"location":"reference/roblox/assets/#roblox.assets.AssetType.__init__","text":"Parameters: Name Type Description Default type_id int The AssetTypeID to instantiate this AssetType object with. This is used to determine the name of the AssetType. required Source code in roblox/assets.py def __init__ ( self , type_id : int ): \"\"\" Arguments: type_id: The AssetTypeID to instantiate this AssetType object with. This is used to determine the name of the AssetType. \"\"\" self . id : int = type_id self . name : Optional [ str ] = asset_type_names . get ( type_id )","title":"__init__()"},{"location":"reference/roblox/assets/#roblox.assets.AssetType.__repr__","text":"Source code in roblox/assets.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/assets/#roblox.assets.EconomyAsset","text":"Represents a Roblox asset. It is intended to parse data from https://economy.roblox.com/v2/assets/ASSETID/details . Attributes: Name Type Description id int Id of the Asset product_id int Product id of the asset name str Name of the Asset description str Description of the Asset type AssetType Type of the Asset creator_type CreatorType Type of creator can be user or group see enum creator Union[PartialUser, AssetPartialGroup] creator can be a user or group object icon_image BaseAsset BaseAsset created datetime When the asset was created updated datetime When the asset was updated for the las time price Optional[int] price of the asset sales int amount of sales of the asset is_new bool if the asset it new is_for_sale bool if the asset is for sale is_public_domain bool if the asset is public domain is_limited bool if the asset is a limited item is_limited_unique bool if the asset is a unique limited item remaining Optional[int] How many items there are remaining if it is limited minimum_membership_level int Minimum membership level required to buy item content_rating_type_id int Unknown sale_availability_locations Unknown","title":"EconomyAsset"},{"location":"reference/roblox/assets/#roblox.assets.EconomyAsset.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject to be used when getting information on assets. required data dict The data form the request. required Source code in roblox/assets.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject to be used when getting information on assets. data: The data form the request. \"\"\" super () . __init__ ( shared = shared , asset_id = data [ \"AssetId\" ]) self . product_type : Optional [ str ] = data [ \"ProductType\" ] self . id : int = data [ \"AssetId\" ] self . product_id : int = data [ \"ProductId\" ] # TODO: make this a BaseProduct self . name : str = data [ \"Name\" ] self . description : str = data [ \"Description\" ] self . type : AssetType = AssetType ( type_id = data [ \"AssetTypeId\" ]) self . creator_type : CreatorType = CreatorType ( data [ \"Creator\" ][ \"CreatorType\" ]) self . creator : Union [ PartialUser , AssetPartialGroup ] if self . creator_type == CreatorType . user : self . creator : PartialUser = PartialUser ( shared = shared , data = data [ \"Creator\" ]) elif self . creator_type == CreatorType . group : self . creator : AssetPartialGroup = AssetPartialGroup ( shared = shared , data = data [ \"Creator\" ]) self . icon_image : BaseAsset = BaseAsset ( shared = shared , asset_id = data [ \"IconImageAssetId\" ]) self . created : datetime = parse ( data [ \"Created\" ]) self . updated : datetime = parse ( data [ \"Updated\" ]) self . price : Optional [ int ] = data [ \"PriceInRobux\" ] self . sales : int = data [ \"Sales\" ] self . is_new : bool = data [ \"IsNew\" ] self . is_for_sale : bool = data [ \"IsForSale\" ] self . is_public_domain : bool = data [ \"IsPublicDomain\" ] self . is_limited : bool = data [ \"IsLimited\" ] self . is_limited_unique : bool = data [ \"IsLimitedUnique\" ] self . remaining : Optional [ int ] = data [ \"Remaining\" ] self . minimum_membership_level : int = data [ \"MinimumMembershipLevel\" ] self . content_rating_type_id : int = data [ \"ContentRatingTypeId\" ] self . sale_availability_locations = data [ \"SaleAvailabilityLocations\" ]","title":"__init__()"},{"location":"reference/roblox/assets/#roblox.assets.EconomyAsset.__repr__","text":"Source code in roblox/assets.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } >\"","title":"__repr__()"},{"location":"reference/roblox/badges/","text":"roblox.badges \u00b6 This module contains classes intended to parse and deal with data from Roblox badge information endpoints. Badge ( BaseBadge ) \u00b6 Represents a badge from the API. Attributes: Name Type Description id int The badge Id. name str The name of the badge. description str The badge description. display_name str The localized name of the badge. display_description str The localized badge description. enabled bool Whether or not the badge is enabled. icon BaseAsset The badge icon. display_icon BaseAsset The localized badge icon. created datetime When the badge was created. updated datetime When the badge was updated. statistics BadgeStatistics Badge award statistics. awarding_universe PartialUniverse The universe the badge is being awarded from. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject to be used when getting information on badges. required data dict The data from the endpoint. required Source code in roblox/badges.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject to be used when getting information on badges. data: The data from the endpoint. \"\"\" self . id : int = data [ \"id\" ] super () . __init__ ( shared = shared , badge_id = self . id ) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . display_name : str = data [ \"displayName\" ] self . display_description : str = data [ \"displayDescription\" ] self . enabled : bool = data [ \"enabled\" ] self . icon : BaseAsset = BaseAsset ( shared = shared , asset_id = data [ \"iconImageId\" ]) self . display_icon : BaseAsset = BaseAsset ( shared = shared , asset_id = data [ \"displayIconImageId\" ]) self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . statistics : BadgeStatistics = BadgeStatistics ( shared = shared , data = data [ \"statistics\" ]) self . awarding_universe : PartialUniverse = PartialUniverse ( shared = shared , data = data [ \"awardingUniverse\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/badges.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" BadgeStatistics \u00b6 Attributes: Name Type Description past_day_awarded_count int How many instances of this badge were awarded in the last day. awarded_count int How many instances of this badge have been awarded. win_rate_percentage int Percentage of players who have joined the parent universe have been awarded this badge. __init__ ( self , data : dict ) special \u00b6 Parameters: Name Type Description Default data dict The raw input data. required Source code in roblox/badges.py def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . past_day_awarded_count : int = data [ \"pastDayAwardedCount\" ] self . awarded_count : int = data [ \"awardedCount\" ] self . win_rate_percentage : int = data [ \"winRatePercentage\" ] __repr__ ( self ) special \u00b6 Source code in roblox/badges.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } awarded_count= { self . awarded_count } >\"","title":"badges"},{"location":"reference/roblox/badges/#roblox.badges","text":"This module contains classes intended to parse and deal with data from Roblox badge information endpoints.","title":"badges"},{"location":"reference/roblox/badges/#roblox.badges.Badge","text":"Represents a badge from the API. Attributes: Name Type Description id int The badge Id. name str The name of the badge. description str The badge description. display_name str The localized name of the badge. display_description str The localized badge description. enabled bool Whether or not the badge is enabled. icon BaseAsset The badge icon. display_icon BaseAsset The localized badge icon. created datetime When the badge was created. updated datetime When the badge was updated. statistics BadgeStatistics Badge award statistics. awarding_universe PartialUniverse The universe the badge is being awarded from.","title":"Badge"},{"location":"reference/roblox/badges/#roblox.badges.Badge.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject to be used when getting information on badges. required data dict The data from the endpoint. required Source code in roblox/badges.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject to be used when getting information on badges. data: The data from the endpoint. \"\"\" self . id : int = data [ \"id\" ] super () . __init__ ( shared = shared , badge_id = self . id ) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . display_name : str = data [ \"displayName\" ] self . display_description : str = data [ \"displayDescription\" ] self . enabled : bool = data [ \"enabled\" ] self . icon : BaseAsset = BaseAsset ( shared = shared , asset_id = data [ \"iconImageId\" ]) self . display_icon : BaseAsset = BaseAsset ( shared = shared , asset_id = data [ \"displayIconImageId\" ]) self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . statistics : BadgeStatistics = BadgeStatistics ( shared = shared , data = data [ \"statistics\" ]) self . awarding_universe : PartialUniverse = PartialUniverse ( shared = shared , data = data [ \"awardingUniverse\" ])","title":"__init__()"},{"location":"reference/roblox/badges/#roblox.badges.Badge.__repr__","text":"Source code in roblox/badges.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/badges/#roblox.badges.BadgeStatistics","text":"Attributes: Name Type Description past_day_awarded_count int How many instances of this badge were awarded in the last day. awarded_count int How many instances of this badge have been awarded. win_rate_percentage int Percentage of players who have joined the parent universe have been awarded this badge.","title":"BadgeStatistics"},{"location":"reference/roblox/badges/#roblox.badges.BadgeStatistics.__init__","text":"Parameters: Name Type Description Default data dict The raw input data. required Source code in roblox/badges.py def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . past_day_awarded_count : int = data [ \"pastDayAwardedCount\" ] self . awarded_count : int = data [ \"awardedCount\" ] self . win_rate_percentage : int = data [ \"winRatePercentage\" ]","title":"__init__()"},{"location":"reference/roblox/badges/#roblox.badges.BadgeStatistics.__repr__","text":"Source code in roblox/badges.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } awarded_count= { self . awarded_count } >\"","title":"__repr__()"},{"location":"reference/roblox/chat/","text":"roblox.chat \u00b6 Contains classes relating to the Roblox chat. ChatProvider \u00b6 Provides information and data related to the Roblox chat system. __init__ ( self , shared : ClientSharedObject ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject for getting information about chat. required Source code in roblox/chat.py def __init__ ( self , shared : ClientSharedObject ): \"\"\" Arguments: shared: The ClientSharedObject for getting information about chat. \"\"\" self . _shared : ClientSharedObject = shared __repr__ ( self ) special \u00b6 Source code in roblox/chat.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\" get_settings ( self ) -> ChatSettings async \u00b6 Gets the authenticated user's chat settings. Returns: The user's chat settings. Source code in roblox/chat.py async def get_settings ( self ) -> ChatSettings : \"\"\" Gets the authenticated user's chat settings. Returns: The user's chat settings. \"\"\" settings_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"chat\" , \"v2/chat-settings\" ) ) settings_data = settings_response . json () return ChatSettings ( data = settings_data ) get_unread_conversation_count ( self ) -> int async \u00b6 Gets the authenticated user's unread conversation count. Returns: The user's unread conversation count. Source code in roblox/chat.py async def get_unread_conversation_count ( self ) -> int : \"\"\" Gets the authenticated user's unread conversation count. Returns: The user's unread conversation count. \"\"\" unread_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"chat\" , \"v2/get-unread-conversation-count\" ) ) unread_data = unread_response . json () return unread_data [ \"count\" ] get_user_conversations ( self ) \u00b6 Gets the user's conversations. Returns: The user's conversations as a PageNumberIterator. Source code in roblox/chat.py def get_user_conversations ( self ): \"\"\" Gets the user's conversations. Returns: The user's conversations as a PageNumberIterator. \"\"\" return PageNumberIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"chat\" , \"v2/get-user-conversations\" ), handler = lambda shared , data : Conversation ( shared = shared , data = data ) ) ChatSettings \u00b6 Represents the authenticated user's Roblox chat settings. Attributes: Name Type Description chat_enabled bool Is chat enabled for the user. is_active_chat_user bool Was the Last ChatMessage Sent within the last x dats or the account was created in the last x das? Note: user is active by default unless he/she does not chat for more than x dats after account creation. is_connect_tab_enabled bool Is Connect Tab Enabled for this user. __init__ ( self , data : dict ) special \u00b6 Parameters: Name Type Description Default data dict The raw input data. required Source code in roblox/chat.py def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . chat_enabled : bool = data [ \"chatEnabled\" ] self . is_active_chat_user : bool = data [ \"isActiveChatUser\" ] self . is_connect_tab_enabled : bool = data [ \"isConnectTabEnabled\" ] __repr__ ( self ) special \u00b6 Source code in roblox/chat.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } chat_enabled= { self . chat_enabled } >\"","title":"chat"},{"location":"reference/roblox/chat/#roblox.chat","text":"Contains classes relating to the Roblox chat.","title":"chat"},{"location":"reference/roblox/chat/#roblox.chat.ChatProvider","text":"Provides information and data related to the Roblox chat system.","title":"ChatProvider"},{"location":"reference/roblox/chat/#roblox.chat.ChatProvider.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject for getting information about chat. required Source code in roblox/chat.py def __init__ ( self , shared : ClientSharedObject ): \"\"\" Arguments: shared: The ClientSharedObject for getting information about chat. \"\"\" self . _shared : ClientSharedObject = shared","title":"__init__()"},{"location":"reference/roblox/chat/#roblox.chat.ChatProvider.__repr__","text":"Source code in roblox/chat.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\"","title":"__repr__()"},{"location":"reference/roblox/chat/#roblox.chat.ChatProvider.get_settings","text":"Gets the authenticated user's chat settings. Returns: The user's chat settings. Source code in roblox/chat.py async def get_settings ( self ) -> ChatSettings : \"\"\" Gets the authenticated user's chat settings. Returns: The user's chat settings. \"\"\" settings_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"chat\" , \"v2/chat-settings\" ) ) settings_data = settings_response . json () return ChatSettings ( data = settings_data )","title":"get_settings()"},{"location":"reference/roblox/chat/#roblox.chat.ChatProvider.get_unread_conversation_count","text":"Gets the authenticated user's unread conversation count. Returns: The user's unread conversation count. Source code in roblox/chat.py async def get_unread_conversation_count ( self ) -> int : \"\"\" Gets the authenticated user's unread conversation count. Returns: The user's unread conversation count. \"\"\" unread_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"chat\" , \"v2/get-unread-conversation-count\" ) ) unread_data = unread_response . json () return unread_data [ \"count\" ]","title":"get_unread_conversation_count()"},{"location":"reference/roblox/chat/#roblox.chat.ChatProvider.get_user_conversations","text":"Gets the user's conversations. Returns: The user's conversations as a PageNumberIterator. Source code in roblox/chat.py def get_user_conversations ( self ): \"\"\" Gets the user's conversations. Returns: The user's conversations as a PageNumberIterator. \"\"\" return PageNumberIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"chat\" , \"v2/get-user-conversations\" ), handler = lambda shared , data : Conversation ( shared = shared , data = data ) )","title":"get_user_conversations()"},{"location":"reference/roblox/chat/#roblox.chat.ChatSettings","text":"Represents the authenticated user's Roblox chat settings. Attributes: Name Type Description chat_enabled bool Is chat enabled for the user. is_active_chat_user bool Was the Last ChatMessage Sent within the last x dats or the account was created in the last x das? Note: user is active by default unless he/she does not chat for more than x dats after account creation. is_connect_tab_enabled bool Is Connect Tab Enabled for this user.","title":"ChatSettings"},{"location":"reference/roblox/chat/#roblox.chat.ChatSettings.__init__","text":"Parameters: Name Type Description Default data dict The raw input data. required Source code in roblox/chat.py def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . chat_enabled : bool = data [ \"chatEnabled\" ] self . is_active_chat_user : bool = data [ \"isActiveChatUser\" ] self . is_connect_tab_enabled : bool = data [ \"isConnectTabEnabled\" ]","title":"__init__()"},{"location":"reference/roblox/chat/#roblox.chat.ChatSettings.__repr__","text":"Source code in roblox/chat.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } chat_enabled= { self . chat_enabled } >\"","title":"__repr__()"},{"location":"reference/roblox/client/","text":"roblox.client \u00b6 Contains the Client, which is the core object at the center of all ro.py applications. Client \u00b6 Represents a Roblox client. Attributes: Name Type Description requests Requests The requests object, which is used to send requests to Roblox endpoints. url_generator URLGenerator The URL generator object, which is used to generate URLs to send requests to endpoints. presence PresenceProvider The presence provider object. thumbnails ThumbnailProvider The thumbnail provider object. delivery DeliveryProvider The delivery provider object. chat ChatProvider The chat provider object. account AccountProvider The account provider object. __init__ ( self , token : str = None , base_url : str = 'roblox.com' ) special \u00b6 Parameters: Name Type Description Default token str A .ROBLOSECURITY token to authenticate the client with. None base_url str The base URL to use when sending requests. 'roblox.com' Source code in roblox/client.py def __init__ ( self , token : str = None , base_url : str = \"roblox.com\" ): \"\"\" Arguments: token: A .ROBLOSECURITY token to authenticate the client with. base_url: The base URL to use when sending requests. \"\"\" self . _url_generator : URLGenerator = URLGenerator ( base_url = base_url ) self . _requests : Requests = Requests ( url_generator = self . _url_generator ) self . _shared : ClientSharedObject = ClientSharedObject ( client = self , requests = self . _requests , url_generator = self . _url_generator ) self . presence : PresenceProvider = PresenceProvider ( shared = self . _shared ) self . thumbnails : ThumbnailProvider = ThumbnailProvider ( shared = self . _shared ) self . delivery : DeliveryProvider = DeliveryProvider ( shared = self . _shared ) self . chat : ChatProvider = ChatProvider ( shared = self . _shared ) self . account : AccountProvider = AccountProvider ( shared = self . _shared ) # TODO: Improve this hack self . _shared . presence_provider = self . presence self . _shared . thumbnail_provider = self . thumbnails self . _shared . delivery_provider = self . delivery self . _shared . chat_provider = self . chat self . _shared . account_provider = self . account self . requests : Requests = self . _requests self . url_generator : URLGenerator = self . _url_generator if token : self . set_token ( token ) __repr__ ( self ) special \u00b6 Source code in roblox/client.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\" get_asset ( self , asset_id : int ) -> EconomyAsset async \u00b6 Gets an asset with the passed ID. Parameters: Name Type Description Default asset_id int A Roblox asset ID. required Returns: Type Description EconomyAsset An Asset. Source code in roblox/client.py async def get_asset ( self , asset_id : int ) -> EconomyAsset : \"\"\" Gets an asset with the passed ID. Arguments: asset_id: A Roblox asset ID. Returns: An Asset. \"\"\" asset_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"economy\" , f \"v2/assets/ { asset_id } /details\" ) ) asset_data = asset_response . json () return EconomyAsset ( shared = self . _shared , data = asset_data ) get_authenticated_user ( self , expand : bool = True ) -> Union [ roblox . users . User , roblox . partials . partialuser . PartialUser ] async \u00b6 Grabs the authenticated user. Parameters: Name Type Description Default expand bool Whether to return a User (2 requests) rather than a PartialUser (1 request) True Returns: Type Description Union[roblox.users.User, roblox.partials.partialuser.PartialUser] The authenticated user. Source code in roblox/client.py async def get_authenticated_user ( self , expand : bool = True ) -> Union [ User , PartialUser ]: \"\"\" Grabs the authenticated user. Arguments: expand: Whether to return a User (2 requests) rather than a PartialUser (1 request) Returns: The authenticated user. \"\"\" authenticated_user_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"users\" , f \"v1/users/authenticated\" ) ) authenticated_user_data = authenticated_user_response . json () if expand : return await self . get_user ( authenticated_user_data [ \"id\" ]) else : return PartialUser ( shared = self . _shared , data = authenticated_user_data ) get_badge ( self , badge_id : int ) -> Badge async \u00b6 Gets a badge with the passed ID. Parameters: Name Type Description Default badge_id int A Roblox badge ID. required Returns: Type Description Badge A Badge. Source code in roblox/client.py async def get_badge ( self , badge_id : int ) -> Badge : \"\"\" Gets a badge with the passed ID. Arguments: badge_id: A Roblox badge ID. Returns: A Badge. \"\"\" badge_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"badges\" , f \"v1/badges/ { badge_id } \" ) ) badge_data = badge_response . json () return Badge ( shared = self . _shared , data = badge_data ) get_base_asset ( self , asset_id : int ) -> BaseAsset \u00b6 Gets a base asset. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Parameters: Name Type Description Default asset_id int A Roblox asset ID. required Returns: Type Description BaseAsset A BaseAsset. Source code in roblox/client.py def get_base_asset ( self , asset_id : int ) -> BaseAsset : \"\"\" Gets a base asset. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Arguments: asset_id: A Roblox asset ID. Returns: A BaseAsset. \"\"\" return BaseAsset ( shared = self . _shared , asset_id = asset_id ) get_base_badge ( self , badge_id : int ) -> BaseBadge \u00b6 Gets a base badge. FIXME This method does not send any requests - it just generates a BaseUser object. Parameters: Name Type Description Default badge_id int A Roblox badge ID. required Returns: Type Description BaseBadge A BaseBadge. Source code in roblox/client.py def get_base_badge ( self , badge_id : int ) -> BaseBadge : \"\"\" Gets a base badge. FIXME This method does not send any requests - it just generates a BaseUser object. Arguments: badge_id: A Roblox badge ID. Returns: A BaseBadge. \"\"\" return BaseBadge ( shared = self . _shared , badge_id = badge_id ) get_base_gamepass ( self , gamepass_id : int ) -> BaseGamePass \u00b6 Gets a base gamepass. Parameters: Name Type Description Default gamepass_id int A Roblox gamepass ID. required Source code in roblox/client.py def get_base_gamepass ( self , gamepass_id : int ) -> BaseGamePass : \"\"\" Gets a base gamepass. Arguments: gamepass_id: A Roblox gamepass ID. Returns: A BaseGamePass. \"\"\" return BaseGamePass ( shared = self . _shared , gamepass_id = gamepass_id ) get_base_group ( self , group_id : int ) -> BaseGroup \u00b6 Gets a base group. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Parameters: Name Type Description Default group_id int A Roblox group ID. required Returns: Type Description BaseGroup A BaseGroup. Source code in roblox/client.py def get_base_group ( self , group_id : int ) -> BaseGroup : \"\"\" Gets a base group. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Arguments: group_id: A Roblox group ID. Returns: A BaseGroup. \"\"\" return BaseGroup ( shared = self . _shared , group_id = group_id ) get_base_place ( self , place_id : int ) -> BasePlace \u00b6 Gets a base place. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Parameters: Name Type Description Default place_id int A Roblox place ID. required Returns: Type Description BasePlace A BasePlace. Source code in roblox/client.py def get_base_place ( self , place_id : int ) -> BasePlace : \"\"\" Gets a base place. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Arguments: place_id: A Roblox place ID. Returns: A BasePlace. \"\"\" return BasePlace ( shared = self . _shared , place_id = place_id ) get_base_plugin ( self , plugin_id : int ) -> BasePlugin \u00b6 Gets a base plugin. FIXME This method does not send any requests - it just generates a BaseUser object. Parameters: Name Type Description Default plugin_id int A Roblox plugin ID. required Returns: Type Description BasePlugin A BasePlugin. Source code in roblox/client.py def get_base_plugin ( self , plugin_id : int ) -> BasePlugin : \"\"\" Gets a base plugin. FIXME This method does not send any requests - it just generates a BaseUser object. Arguments: plugin_id: A Roblox plugin ID. Returns: A BasePlugin. \"\"\" return BasePlugin ( shared = self . _shared , plugin_id = plugin_id ) get_base_universe ( self , universe_id : int ) -> BaseUniverse \u00b6 Gets a base universe. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Parameters: Name Type Description Default universe_id int A Roblox universe ID. required Returns: Type Description BaseUniverse A BaseUniverse. Source code in roblox/client.py def get_base_universe ( self , universe_id : int ) -> BaseUniverse : \"\"\" Gets a base universe. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Arguments: universe_id: A Roblox universe ID. Returns: A BaseUniverse. \"\"\" return BaseUniverse ( shared = self . _shared , universe_id = universe_id ) get_base_user ( self , user_id : int ) -> BaseUser \u00b6 Gets a base user. FIXME This method does not send any requests - it just generates a BaseUser object. Parameters: Name Type Description Default user_id int A Roblox user ID. required Returns: Type Description BaseUser A BaseUser. Source code in roblox/client.py def get_base_user ( self , user_id : int ) -> BaseUser : \"\"\" Gets a base user. FIXME This method does not send any requests - it just generates a BaseUser object. Arguments: user_id: A Roblox user ID. Returns: A BaseUser. \"\"\" return BaseUser ( shared = self . _shared , user_id = user_id ) get_group ( self , group_id : int ) -> Group async \u00b6 Gets a group by its ID. Parameters: Name Type Description Default group_id int A Roblox group ID. required Returns: Type Description Group A Group. Source code in roblox/client.py async def get_group ( self , group_id : int ) -> Group : \"\"\" Gets a group by its ID. Arguments: group_id: A Roblox group ID. Returns: A Group. \"\"\" group_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { group_id } \" ) ) group_data = group_response . json () return Group ( shared = self . _shared , data = group_data ) get_place ( self , place_id : int ) -> Optional [ roblox . places . Place ] async \u00b6 Gets a place with the passed ID. Parameters: Name Type Description Default place_id int A Roblox place ID. required Returns: Type Description Optional[roblox.places.Place] A Place. Source code in roblox/client.py async def get_place ( self , place_id : int ) -> Optional [ Place ]: \"\"\" Gets a place with the passed ID. Arguments: place_id: A Roblox place ID. Returns: A Place. \"\"\" places = await self . get_places ( place_ids = [ place_id ]) try : return places [ 0 ] except IndexError : return None get_places ( self , place_ids : List [ int ]) -> List [ roblox . places . Place ] async \u00b6 Grabs a list of places corresponding to each ID in the list. Parameters: Name Type Description Default place_ids List[int] A list of Roblox place IDs. required Returns: Type Description List[roblox.places.Place] A list of Places. Source code in roblox/client.py async def get_places ( self , place_ids : List [ int ]) -> List [ Place ]: \"\"\" Grabs a list of places corresponding to each ID in the list. Arguments: place_ids: A list of Roblox place IDs. Returns: A list of Places. \"\"\" places_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"games\" , f \"v1/games/multiget-place-details\" ), params = { \"placeIds\" : place_ids }, ) places_data = places_response . json () return [ Place ( shared = self . _shared , data = place_data ) for place_data in places_data ] get_plugin ( self , plugin_id : int ) -> Optional [ roblox . plugins . Plugin ] async \u00b6 Grabs a plugin with the passed ID. Parameters: Name Type Description Default plugin_id int A Roblox plugin ID. required Returns: Type Description Optional[roblox.plugins.Plugin] A Plugin. Source code in roblox/client.py async def get_plugin ( self , plugin_id : int ) -> Optional [ Plugin ]: \"\"\" Grabs a plugin with the passed ID. Arguments: plugin_id: A Roblox plugin ID. Returns: A Plugin. \"\"\" plugins = await self . get_plugins ([ plugin_id ]) try : return plugins [ 0 ] except IndexError : return None get_plugins ( self , plugin_ids : List [ int ]) -> List [ roblox . plugins . Plugin ] async \u00b6 Grabs a list of plugins corresponding to each ID in the list. Parameters: Name Type Description Default plugin_ids List[int] A list of Roblox plugin IDs. required Returns: Type Description List[roblox.plugins.Plugin] A list of Plugins. Source code in roblox/client.py async def get_plugins ( self , plugin_ids : List [ int ]) -> List [ Plugin ]: \"\"\" Grabs a list of plugins corresponding to each ID in the list. Arguments: plugin_ids: A list of Roblox plugin IDs. Returns: A list of Plugins. \"\"\" plugins_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"develop\" , \"v1/plugins\" ), params = { \"pluginIds\" : plugin_ids } ) plugins_data = plugins_response . json ()[ \"data\" ] return [ Plugin ( shared = self . _shared , data = plugin_data ) for plugin_data in plugins_data ] get_universe ( self , universe_id : int ) -> Optional [ roblox . universes . Universe ] async \u00b6 Gets a universe with the passed ID. Parameters: Name Type Description Default universe_id int A Roblox universe ID. required Returns: Type Description Optional[roblox.universes.Universe] A Universe. Source code in roblox/client.py async def get_universe ( self , universe_id : int ) -> Optional [ Universe ]: \"\"\" Gets a universe with the passed ID. Arguments: universe_id: A Roblox universe ID. Returns: A Universe. \"\"\" universes = await self . get_universes ( universe_ids = [ universe_id ]) try : return universes [ 0 ] except IndexError : return None get_universes ( self , universe_ids : List [ int ]) -> List [ roblox . universes . Universe ] async \u00b6 Grabs a list of universes corresponding to each ID in the list. Parameters: Name Type Description Default universe_ids List[int] A list of Roblox universe IDs. required Returns: Type Description List[roblox.universes.Universe] A list of Universes. Source code in roblox/client.py async def get_universes ( self , universe_ids : List [ int ]) -> List [ Universe ]: \"\"\" Grabs a list of universes corresponding to each ID in the list. Arguments: universe_ids: A list of Roblox universe IDs. Returns: A list of Universes. \"\"\" universes_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"games\" , f \"v1/games\" ), params = { \"universeIds\" : universe_ids }, ) universes_data = universes_response . json ()[ \"data\" ] return [ Universe ( shared = self . _shared , data = universe_data ) for universe_data in universes_data ] get_user ( self , user_id : int ) -> User async \u00b6 Gets a user with the specified user ID. Parameters: Name Type Description Default user_id int A Roblox user ID. required Returns: Type Description User A user object. Source code in roblox/client.py async def get_user ( self , user_id : int ) -> User : \"\"\" Gets a user with the specified user ID. Arguments: user_id: A Roblox user ID. Returns: A user object. \"\"\" user_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"users\" , f \"v1/users/ { user_id } \" ) ) user_data = user_response . json () return User ( shared = self . _shared , data = user_data ) get_user_by_username ( self , username : str , exclude_banned_users : bool = False , expand : bool = False ) -> Union [ roblox . partials . partialuser . RequestedUsernamePartialUser , roblox . users . User ] async \u00b6 Grabs a user corresponding to the passed username. Parameters: Name Type Description Default username str A Roblox username. required exclude_banned_users bool Whether to exclude banned users from the data. False expand bool Whether to return a User (2 requests) rather than a RequestedUsernamePartialUser (1 request) False Returns: Type Description Union[roblox.partials.partialuser.RequestedUsernamePartialUser, roblox.users.User] A User, RequestedUsernamePartialUser, or None, depending on the expand argument. Source code in roblox/client.py async def get_user_by_username ( self , username : str , exclude_banned_users : bool = False , expand : bool = False ) -> Optional [ Union [ RequestedUsernamePartialUser , User ]]: \"\"\" Grabs a user corresponding to the passed username. Arguments: username: A Roblox username. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a User (2 requests) rather than a RequestedUsernamePartialUser (1 request) Returns: A User, RequestedUsernamePartialUser, or None, depending on the expand argument. \"\"\" users = await self . get_users_by_usernames ( usernames = [ username ], exclude_banned_users = exclude_banned_users , expand = expand , ) try : return users [ 0 ] except IndexError : return None get_users ( self , user_ids : List [ int ], exclude_banned_users : bool = False , expand : bool = False ) -> Union [ List [ roblox . partials . partialuser . PartialUser ], List [ roblox . users . User ]] async \u00b6 Grabs a list of users corresponding to each user ID in the list. Parameters: Name Type Description Default user_ids List[int] A list of Roblox user IDs. required exclude_banned_users bool Whether to exclude banned users from the data. False expand bool Whether to return a list of Users (2 requests) rather than PartialUsers (1 request) False Returns: Type Description Union[List[roblox.partials.partialuser.PartialUser], List[roblox.users.User]] A List of Users or partial users. Source code in roblox/client.py async def get_users ( self , user_ids : List [ int ], exclude_banned_users : bool = False , expand : bool = False , ) -> Union [ List [ PartialUser ], List [ User ]]: \"\"\" Grabs a list of users corresponding to each user ID in the list. Arguments: user_ids: A list of Roblox user IDs. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a list of Users (2 requests) rather than PartialUsers (1 request) Returns: A List of Users or partial users. \"\"\" users_response = await self . _requests . post ( url = self . _shared . url_generator . get_url ( \"users\" , f \"v1/users\" ), json = { \"userIds\" : user_ids , \"excludeBannedUsers\" : exclude_banned_users }, ) users_data = users_response . json ()[ \"data\" ] if expand : return [ await self . get_user ( user_data [ \"id\" ]) for user_data in users_data ] else : return [ PartialUser ( shared = self . _shared , data = user_data ) for user_data in users_data ] get_users_by_usernames ( self , usernames : List [ str ], exclude_banned_users : bool = False , expand : bool = False ) -> Union [ List [ roblox . partials . partialuser . RequestedUsernamePartialUser ], List [ roblox . users . User ]] async \u00b6 Grabs a list of users corresponding to each username in the list. Parameters: Name Type Description Default usernames List[str] A list of Roblox usernames. required exclude_banned_users bool Whether to exclude banned users from the data. False expand bool Whether to return a list of Users (2 requests) rather than RequestedUsernamePartialUsers (1 request) False Returns: Type Description Union[List[roblox.partials.partialuser.RequestedUsernamePartialUser], List[roblox.users.User]] A list of User or RequestedUsernamePartialUser, depending on the expand argument. Source code in roblox/client.py async def get_users_by_usernames ( self , usernames : List [ str ], exclude_banned_users : bool = False , expand : bool = False , ) -> Union [ List [ RequestedUsernamePartialUser ], List [ User ]]: \"\"\" Grabs a list of users corresponding to each username in the list. Arguments: usernames: A list of Roblox usernames. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a list of Users (2 requests) rather than RequestedUsernamePartialUsers (1 request) Returns: A list of User or RequestedUsernamePartialUser, depending on the expand argument. \"\"\" users_response = await self . _requests . post ( url = self . _shared . url_generator . get_url ( \"users\" , f \"v1/usernames/users\" ), json = { \"usernames\" : usernames , \"excludeBannedUsers\" : exclude_banned_users }, ) users_data = users_response . json ()[ \"data\" ] if expand : return [ await self . get_user ( user_data [ \"id\" ]) for user_data in users_data ] else : return [ RequestedUsernamePartialUser ( shared = self . _shared , data = user_data ) for user_data in users_data ] set_token ( self , token : str ) -> None \u00b6 Authenticates the client with the passed .ROBLOSECURITY token. This method does not send any requests and will not throw if the token is invalid. Parameters: Name Type Description Default token str A .ROBLOSECURITY token to authenticate the client with. required Source code in roblox/client.py def set_token ( self , token : str ) -> None : \"\"\" Authenticates the client with the passed .ROBLOSECURITY token. This method does not send any requests and will not throw if the token is invalid. Arguments: token: A .ROBLOSECURITY token to authenticate the client with. \"\"\" self . _requests . session . cookies [ \".ROBLOSECURITY\" ] = token user_search ( self , keyword : str , limit : int = 10 ) -> PageIterator \u00b6 Search for users with a keyword. Parameters: Name Type Description Default keyword str A keyword to search for. required limit int How many users should be returned for each page 10 Returns: Type Description PageIterator A PageIterator containing RequestedUsernamePartialUser. Source code in roblox/client.py def user_search ( self , keyword : str , limit : int = 10 ) -> PageIterator : \"\"\" Search for users with a keyword. Arguments: keyword: A keyword to search for. limit: How many users should be returned for each page Returns: A PageIterator containing RequestedUsernamePartialUser. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"users\" , f \"v1/users/search\" ), limit = limit , extra_parameters = { \"keyword\" : keyword }, handler = _user_search_handler , )","title":"client"},{"location":"reference/roblox/client/#roblox.client","text":"Contains the Client, which is the core object at the center of all ro.py applications.","title":"client"},{"location":"reference/roblox/client/#roblox.client.Client","text":"Represents a Roblox client. Attributes: Name Type Description requests Requests The requests object, which is used to send requests to Roblox endpoints. url_generator URLGenerator The URL generator object, which is used to generate URLs to send requests to endpoints. presence PresenceProvider The presence provider object. thumbnails ThumbnailProvider The thumbnail provider object. delivery DeliveryProvider The delivery provider object. chat ChatProvider The chat provider object. account AccountProvider The account provider object.","title":"Client"},{"location":"reference/roblox/client/#roblox.client.Client.__init__","text":"Parameters: Name Type Description Default token str A .ROBLOSECURITY token to authenticate the client with. None base_url str The base URL to use when sending requests. 'roblox.com' Source code in roblox/client.py def __init__ ( self , token : str = None , base_url : str = \"roblox.com\" ): \"\"\" Arguments: token: A .ROBLOSECURITY token to authenticate the client with. base_url: The base URL to use when sending requests. \"\"\" self . _url_generator : URLGenerator = URLGenerator ( base_url = base_url ) self . _requests : Requests = Requests ( url_generator = self . _url_generator ) self . _shared : ClientSharedObject = ClientSharedObject ( client = self , requests = self . _requests , url_generator = self . _url_generator ) self . presence : PresenceProvider = PresenceProvider ( shared = self . _shared ) self . thumbnails : ThumbnailProvider = ThumbnailProvider ( shared = self . _shared ) self . delivery : DeliveryProvider = DeliveryProvider ( shared = self . _shared ) self . chat : ChatProvider = ChatProvider ( shared = self . _shared ) self . account : AccountProvider = AccountProvider ( shared = self . _shared ) # TODO: Improve this hack self . _shared . presence_provider = self . presence self . _shared . thumbnail_provider = self . thumbnails self . _shared . delivery_provider = self . delivery self . _shared . chat_provider = self . chat self . _shared . account_provider = self . account self . requests : Requests = self . _requests self . url_generator : URLGenerator = self . _url_generator if token : self . set_token ( token )","title":"__init__()"},{"location":"reference/roblox/client/#roblox.client.Client.__repr__","text":"Source code in roblox/client.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\"","title":"__repr__()"},{"location":"reference/roblox/client/#roblox.client.Client.get_asset","text":"Gets an asset with the passed ID. Parameters: Name Type Description Default asset_id int A Roblox asset ID. required Returns: Type Description EconomyAsset An Asset. Source code in roblox/client.py async def get_asset ( self , asset_id : int ) -> EconomyAsset : \"\"\" Gets an asset with the passed ID. Arguments: asset_id: A Roblox asset ID. Returns: An Asset. \"\"\" asset_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"economy\" , f \"v2/assets/ { asset_id } /details\" ) ) asset_data = asset_response . json () return EconomyAsset ( shared = self . _shared , data = asset_data )","title":"get_asset()"},{"location":"reference/roblox/client/#roblox.client.Client.get_authenticated_user","text":"Grabs the authenticated user. Parameters: Name Type Description Default expand bool Whether to return a User (2 requests) rather than a PartialUser (1 request) True Returns: Type Description Union[roblox.users.User, roblox.partials.partialuser.PartialUser] The authenticated user. Source code in roblox/client.py async def get_authenticated_user ( self , expand : bool = True ) -> Union [ User , PartialUser ]: \"\"\" Grabs the authenticated user. Arguments: expand: Whether to return a User (2 requests) rather than a PartialUser (1 request) Returns: The authenticated user. \"\"\" authenticated_user_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"users\" , f \"v1/users/authenticated\" ) ) authenticated_user_data = authenticated_user_response . json () if expand : return await self . get_user ( authenticated_user_data [ \"id\" ]) else : return PartialUser ( shared = self . _shared , data = authenticated_user_data )","title":"get_authenticated_user()"},{"location":"reference/roblox/client/#roblox.client.Client.get_badge","text":"Gets a badge with the passed ID. Parameters: Name Type Description Default badge_id int A Roblox badge ID. required Returns: Type Description Badge A Badge. Source code in roblox/client.py async def get_badge ( self , badge_id : int ) -> Badge : \"\"\" Gets a badge with the passed ID. Arguments: badge_id: A Roblox badge ID. Returns: A Badge. \"\"\" badge_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"badges\" , f \"v1/badges/ { badge_id } \" ) ) badge_data = badge_response . json () return Badge ( shared = self . _shared , data = badge_data )","title":"get_badge()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_asset","text":"Gets a base asset. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Parameters: Name Type Description Default asset_id int A Roblox asset ID. required Returns: Type Description BaseAsset A BaseAsset. Source code in roblox/client.py def get_base_asset ( self , asset_id : int ) -> BaseAsset : \"\"\" Gets a base asset. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Arguments: asset_id: A Roblox asset ID. Returns: A BaseAsset. \"\"\" return BaseAsset ( shared = self . _shared , asset_id = asset_id )","title":"get_base_asset()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_badge","text":"Gets a base badge. FIXME This method does not send any requests - it just generates a BaseUser object. Parameters: Name Type Description Default badge_id int A Roblox badge ID. required Returns: Type Description BaseBadge A BaseBadge. Source code in roblox/client.py def get_base_badge ( self , badge_id : int ) -> BaseBadge : \"\"\" Gets a base badge. FIXME This method does not send any requests - it just generates a BaseUser object. Arguments: badge_id: A Roblox badge ID. Returns: A BaseBadge. \"\"\" return BaseBadge ( shared = self . _shared , badge_id = badge_id )","title":"get_base_badge()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_gamepass","text":"Gets a base gamepass. Parameters: Name Type Description Default gamepass_id int A Roblox gamepass ID. required Source code in roblox/client.py def get_base_gamepass ( self , gamepass_id : int ) -> BaseGamePass : \"\"\" Gets a base gamepass. Arguments: gamepass_id: A Roblox gamepass ID. Returns: A BaseGamePass. \"\"\" return BaseGamePass ( shared = self . _shared , gamepass_id = gamepass_id )","title":"get_base_gamepass()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_group","text":"Gets a base group. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Parameters: Name Type Description Default group_id int A Roblox group ID. required Returns: Type Description BaseGroup A BaseGroup. Source code in roblox/client.py def get_base_group ( self , group_id : int ) -> BaseGroup : \"\"\" Gets a base group. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Arguments: group_id: A Roblox group ID. Returns: A BaseGroup. \"\"\" return BaseGroup ( shared = self . _shared , group_id = group_id )","title":"get_base_group()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_place","text":"Gets a base place. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Parameters: Name Type Description Default place_id int A Roblox place ID. required Returns: Type Description BasePlace A BasePlace. Source code in roblox/client.py def get_base_place ( self , place_id : int ) -> BasePlace : \"\"\" Gets a base place. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Arguments: place_id: A Roblox place ID. Returns: A BasePlace. \"\"\" return BasePlace ( shared = self . _shared , place_id = place_id )","title":"get_base_place()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_plugin","text":"Gets a base plugin. FIXME This method does not send any requests - it just generates a BaseUser object. Parameters: Name Type Description Default plugin_id int A Roblox plugin ID. required Returns: Type Description BasePlugin A BasePlugin. Source code in roblox/client.py def get_base_plugin ( self , plugin_id : int ) -> BasePlugin : \"\"\" Gets a base plugin. FIXME This method does not send any requests - it just generates a BaseUser object. Arguments: plugin_id: A Roblox plugin ID. Returns: A BasePlugin. \"\"\" return BasePlugin ( shared = self . _shared , plugin_id = plugin_id )","title":"get_base_plugin()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_universe","text":"Gets a base universe. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Parameters: Name Type Description Default universe_id int A Roblox universe ID. required Returns: Type Description BaseUniverse A BaseUniverse. Source code in roblox/client.py def get_base_universe ( self , universe_id : int ) -> BaseUniverse : \"\"\" Gets a base universe. FIXME This method does not send any requests - it just generates a BaseGroup object. Learn more about bases here. Arguments: universe_id: A Roblox universe ID. Returns: A BaseUniverse. \"\"\" return BaseUniverse ( shared = self . _shared , universe_id = universe_id )","title":"get_base_universe()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_user","text":"Gets a base user. FIXME This method does not send any requests - it just generates a BaseUser object. Parameters: Name Type Description Default user_id int A Roblox user ID. required Returns: Type Description BaseUser A BaseUser. Source code in roblox/client.py def get_base_user ( self , user_id : int ) -> BaseUser : \"\"\" Gets a base user. FIXME This method does not send any requests - it just generates a BaseUser object. Arguments: user_id: A Roblox user ID. Returns: A BaseUser. \"\"\" return BaseUser ( shared = self . _shared , user_id = user_id )","title":"get_base_user()"},{"location":"reference/roblox/client/#roblox.client.Client.get_group","text":"Gets a group by its ID. Parameters: Name Type Description Default group_id int A Roblox group ID. required Returns: Type Description Group A Group. Source code in roblox/client.py async def get_group ( self , group_id : int ) -> Group : \"\"\" Gets a group by its ID. Arguments: group_id: A Roblox group ID. Returns: A Group. \"\"\" group_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { group_id } \" ) ) group_data = group_response . json () return Group ( shared = self . _shared , data = group_data )","title":"get_group()"},{"location":"reference/roblox/client/#roblox.client.Client.get_place","text":"Gets a place with the passed ID. Parameters: Name Type Description Default place_id int A Roblox place ID. required Returns: Type Description Optional[roblox.places.Place] A Place. Source code in roblox/client.py async def get_place ( self , place_id : int ) -> Optional [ Place ]: \"\"\" Gets a place with the passed ID. Arguments: place_id: A Roblox place ID. Returns: A Place. \"\"\" places = await self . get_places ( place_ids = [ place_id ]) try : return places [ 0 ] except IndexError : return None","title":"get_place()"},{"location":"reference/roblox/client/#roblox.client.Client.get_places","text":"Grabs a list of places corresponding to each ID in the list. Parameters: Name Type Description Default place_ids List[int] A list of Roblox place IDs. required Returns: Type Description List[roblox.places.Place] A list of Places. Source code in roblox/client.py async def get_places ( self , place_ids : List [ int ]) -> List [ Place ]: \"\"\" Grabs a list of places corresponding to each ID in the list. Arguments: place_ids: A list of Roblox place IDs. Returns: A list of Places. \"\"\" places_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"games\" , f \"v1/games/multiget-place-details\" ), params = { \"placeIds\" : place_ids }, ) places_data = places_response . json () return [ Place ( shared = self . _shared , data = place_data ) for place_data in places_data ]","title":"get_places()"},{"location":"reference/roblox/client/#roblox.client.Client.get_plugin","text":"Grabs a plugin with the passed ID. Parameters: Name Type Description Default plugin_id int A Roblox plugin ID. required Returns: Type Description Optional[roblox.plugins.Plugin] A Plugin. Source code in roblox/client.py async def get_plugin ( self , plugin_id : int ) -> Optional [ Plugin ]: \"\"\" Grabs a plugin with the passed ID. Arguments: plugin_id: A Roblox plugin ID. Returns: A Plugin. \"\"\" plugins = await self . get_plugins ([ plugin_id ]) try : return plugins [ 0 ] except IndexError : return None","title":"get_plugin()"},{"location":"reference/roblox/client/#roblox.client.Client.get_plugins","text":"Grabs a list of plugins corresponding to each ID in the list. Parameters: Name Type Description Default plugin_ids List[int] A list of Roblox plugin IDs. required Returns: Type Description List[roblox.plugins.Plugin] A list of Plugins. Source code in roblox/client.py async def get_plugins ( self , plugin_ids : List [ int ]) -> List [ Plugin ]: \"\"\" Grabs a list of plugins corresponding to each ID in the list. Arguments: plugin_ids: A list of Roblox plugin IDs. Returns: A list of Plugins. \"\"\" plugins_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"develop\" , \"v1/plugins\" ), params = { \"pluginIds\" : plugin_ids } ) plugins_data = plugins_response . json ()[ \"data\" ] return [ Plugin ( shared = self . _shared , data = plugin_data ) for plugin_data in plugins_data ]","title":"get_plugins()"},{"location":"reference/roblox/client/#roblox.client.Client.get_universe","text":"Gets a universe with the passed ID. Parameters: Name Type Description Default universe_id int A Roblox universe ID. required Returns: Type Description Optional[roblox.universes.Universe] A Universe. Source code in roblox/client.py async def get_universe ( self , universe_id : int ) -> Optional [ Universe ]: \"\"\" Gets a universe with the passed ID. Arguments: universe_id: A Roblox universe ID. Returns: A Universe. \"\"\" universes = await self . get_universes ( universe_ids = [ universe_id ]) try : return universes [ 0 ] except IndexError : return None","title":"get_universe()"},{"location":"reference/roblox/client/#roblox.client.Client.get_universes","text":"Grabs a list of universes corresponding to each ID in the list. Parameters: Name Type Description Default universe_ids List[int] A list of Roblox universe IDs. required Returns: Type Description List[roblox.universes.Universe] A list of Universes. Source code in roblox/client.py async def get_universes ( self , universe_ids : List [ int ]) -> List [ Universe ]: \"\"\" Grabs a list of universes corresponding to each ID in the list. Arguments: universe_ids: A list of Roblox universe IDs. Returns: A list of Universes. \"\"\" universes_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"games\" , f \"v1/games\" ), params = { \"universeIds\" : universe_ids }, ) universes_data = universes_response . json ()[ \"data\" ] return [ Universe ( shared = self . _shared , data = universe_data ) for universe_data in universes_data ]","title":"get_universes()"},{"location":"reference/roblox/client/#roblox.client.Client.get_user","text":"Gets a user with the specified user ID. Parameters: Name Type Description Default user_id int A Roblox user ID. required Returns: Type Description User A user object. Source code in roblox/client.py async def get_user ( self , user_id : int ) -> User : \"\"\" Gets a user with the specified user ID. Arguments: user_id: A Roblox user ID. Returns: A user object. \"\"\" user_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"users\" , f \"v1/users/ { user_id } \" ) ) user_data = user_response . json () return User ( shared = self . _shared , data = user_data )","title":"get_user()"},{"location":"reference/roblox/client/#roblox.client.Client.get_user_by_username","text":"Grabs a user corresponding to the passed username. Parameters: Name Type Description Default username str A Roblox username. required exclude_banned_users bool Whether to exclude banned users from the data. False expand bool Whether to return a User (2 requests) rather than a RequestedUsernamePartialUser (1 request) False Returns: Type Description Union[roblox.partials.partialuser.RequestedUsernamePartialUser, roblox.users.User] A User, RequestedUsernamePartialUser, or None, depending on the expand argument. Source code in roblox/client.py async def get_user_by_username ( self , username : str , exclude_banned_users : bool = False , expand : bool = False ) -> Optional [ Union [ RequestedUsernamePartialUser , User ]]: \"\"\" Grabs a user corresponding to the passed username. Arguments: username: A Roblox username. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a User (2 requests) rather than a RequestedUsernamePartialUser (1 request) Returns: A User, RequestedUsernamePartialUser, or None, depending on the expand argument. \"\"\" users = await self . get_users_by_usernames ( usernames = [ username ], exclude_banned_users = exclude_banned_users , expand = expand , ) try : return users [ 0 ] except IndexError : return None","title":"get_user_by_username()"},{"location":"reference/roblox/client/#roblox.client.Client.get_users","text":"Grabs a list of users corresponding to each user ID in the list. Parameters: Name Type Description Default user_ids List[int] A list of Roblox user IDs. required exclude_banned_users bool Whether to exclude banned users from the data. False expand bool Whether to return a list of Users (2 requests) rather than PartialUsers (1 request) False Returns: Type Description Union[List[roblox.partials.partialuser.PartialUser], List[roblox.users.User]] A List of Users or partial users. Source code in roblox/client.py async def get_users ( self , user_ids : List [ int ], exclude_banned_users : bool = False , expand : bool = False , ) -> Union [ List [ PartialUser ], List [ User ]]: \"\"\" Grabs a list of users corresponding to each user ID in the list. Arguments: user_ids: A list of Roblox user IDs. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a list of Users (2 requests) rather than PartialUsers (1 request) Returns: A List of Users or partial users. \"\"\" users_response = await self . _requests . post ( url = self . _shared . url_generator . get_url ( \"users\" , f \"v1/users\" ), json = { \"userIds\" : user_ids , \"excludeBannedUsers\" : exclude_banned_users }, ) users_data = users_response . json ()[ \"data\" ] if expand : return [ await self . get_user ( user_data [ \"id\" ]) for user_data in users_data ] else : return [ PartialUser ( shared = self . _shared , data = user_data ) for user_data in users_data ]","title":"get_users()"},{"location":"reference/roblox/client/#roblox.client.Client.get_users_by_usernames","text":"Grabs a list of users corresponding to each username in the list. Parameters: Name Type Description Default usernames List[str] A list of Roblox usernames. required exclude_banned_users bool Whether to exclude banned users from the data. False expand bool Whether to return a list of Users (2 requests) rather than RequestedUsernamePartialUsers (1 request) False Returns: Type Description Union[List[roblox.partials.partialuser.RequestedUsernamePartialUser], List[roblox.users.User]] A list of User or RequestedUsernamePartialUser, depending on the expand argument. Source code in roblox/client.py async def get_users_by_usernames ( self , usernames : List [ str ], exclude_banned_users : bool = False , expand : bool = False , ) -> Union [ List [ RequestedUsernamePartialUser ], List [ User ]]: \"\"\" Grabs a list of users corresponding to each username in the list. Arguments: usernames: A list of Roblox usernames. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a list of Users (2 requests) rather than RequestedUsernamePartialUsers (1 request) Returns: A list of User or RequestedUsernamePartialUser, depending on the expand argument. \"\"\" users_response = await self . _requests . post ( url = self . _shared . url_generator . get_url ( \"users\" , f \"v1/usernames/users\" ), json = { \"usernames\" : usernames , \"excludeBannedUsers\" : exclude_banned_users }, ) users_data = users_response . json ()[ \"data\" ] if expand : return [ await self . get_user ( user_data [ \"id\" ]) for user_data in users_data ] else : return [ RequestedUsernamePartialUser ( shared = self . _shared , data = user_data ) for user_data in users_data ]","title":"get_users_by_usernames()"},{"location":"reference/roblox/client/#roblox.client.Client.set_token","text":"Authenticates the client with the passed .ROBLOSECURITY token. This method does not send any requests and will not throw if the token is invalid. Parameters: Name Type Description Default token str A .ROBLOSECURITY token to authenticate the client with. required Source code in roblox/client.py def set_token ( self , token : str ) -> None : \"\"\" Authenticates the client with the passed .ROBLOSECURITY token. This method does not send any requests and will not throw if the token is invalid. Arguments: token: A .ROBLOSECURITY token to authenticate the client with. \"\"\" self . _requests . session . cookies [ \".ROBLOSECURITY\" ] = token","title":"set_token()"},{"location":"reference/roblox/client/#roblox.client.Client.user_search","text":"Search for users with a keyword. Parameters: Name Type Description Default keyword str A keyword to search for. required limit int How many users should be returned for each page 10 Returns: Type Description PageIterator A PageIterator containing RequestedUsernamePartialUser. Source code in roblox/client.py def user_search ( self , keyword : str , limit : int = 10 ) -> PageIterator : \"\"\" Search for users with a keyword. Arguments: keyword: A keyword to search for. limit: How many users should be returned for each page Returns: A PageIterator containing RequestedUsernamePartialUser. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"users\" , f \"v1/users/search\" ), limit = limit , extra_parameters = { \"keyword\" : keyword }, handler = _user_search_handler , )","title":"user_search()"},{"location":"reference/roblox/conversations/","text":"roblox.conversations \u00b6 Contains objects related to Roblox chat conversations. Conversation ( BaseConversation ) \u00b6 Represents a Roblox chat conversation. Attributes: Name Type Description id int Chat conversation Id. title str Chat conversation title. initiator PartialUser Conversation initiator entity. has_unread_messages bool Does the conversation have any unread messages. participants List[PartialUser] Participants involved in the conversation. conversation_type ConversationType Type of the conversation. conversation_title ConversationTitle Specifies if the conversation title is generated by default. last_updated datetime Specifies the datetime when the conversation was last updated. conversation_universe Optional[ChatPartialUniverse] Specifies the universe associated with the conversation. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The shared object. required data dict The conversation data. required Source code in roblox/conversations.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The shared object. data: The conversation data. \"\"\" super () . __init__ ( shared = shared , conversation_id = self . id ) self . id : int = data [ \"id\" ] self . title : str = data [ \"title\" ] # Technically the initiator could be a group, but in practice that doesn't happen # so this is a partialuser # Nikita Petko: Well uhhh, the initiator is of the ChatParticipant model, # where it can either be from User or System. self . initiator : PartialUser = PartialUser ( shared , data [ \"initiator\" ]) self . has_unread_messages : bool = data [ \"hasUnreadMessages\" ] self . participants : List [ PartialUser ] = [ PartialUser ( shared = shared , data = participant_data ) for participant_data in data [ \"participants\" ]] self . conversation_type : ConversationType = ConversationType ( data [ \"conversationType\" ]) self . conversation_title : ConversationTitle = ConversationTitle ( data = data [ \"conversationTitle\" ] ) self . last_updated : datetime = parse ( data [ \"lastUpdated\" ]) self . conversation_universe : Optional [ ChatPartialUniverse ] = data [ \"conversationUniverse\" ] and ChatPartialUniverse ( shared = shared , data = data [ \"conversationUniverse\" ] ) __repr__ ( self ) special \u00b6 Source code in roblox/conversations.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } title= { self . title !r} >\" ConversationTitle \u00b6 A chat conversation's title. Attributes: Name Type Description title_for_viewer str Specifies the title for the conversation specific to the viewer. is_default_title bool Specifies if the title displayed for the user is generated as a default title in the backend or was custom assigned by the user. __init__ ( self , data : dict ) special \u00b6 Parameters: Name Type Description Default data dict The raw input data. required Source code in roblox/conversations.py def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . title_for_viewer : str = data [ \"titleForViewer\" ] self . is_default_title : bool = data [ \"isDefaultTitle\" ] __repr__ ( self ) special \u00b6 Source code in roblox/conversations.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } title_for_viewer= { self . title_for_viewer !r} >\" ConversationType ( Enum ) \u00b6 A chat conversation's type. cloud_edit_conversation \u00b6 Represents a chat in a team-create session. multi_user_conversation \u00b6 Represents a chat with multiples users on the website. one_to_one_conversation \u00b6 Represents a one-to-one conversation with person A and B.","title":"conversations"},{"location":"reference/roblox/conversations/#roblox.conversations","text":"Contains objects related to Roblox chat conversations.","title":"conversations"},{"location":"reference/roblox/conversations/#roblox.conversations.Conversation","text":"Represents a Roblox chat conversation. Attributes: Name Type Description id int Chat conversation Id. title str Chat conversation title. initiator PartialUser Conversation initiator entity. has_unread_messages bool Does the conversation have any unread messages. participants List[PartialUser] Participants involved in the conversation. conversation_type ConversationType Type of the conversation. conversation_title ConversationTitle Specifies if the conversation title is generated by default. last_updated datetime Specifies the datetime when the conversation was last updated. conversation_universe Optional[ChatPartialUniverse] Specifies the universe associated with the conversation.","title":"Conversation"},{"location":"reference/roblox/conversations/#roblox.conversations.Conversation.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The shared object. required data dict The conversation data. required Source code in roblox/conversations.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The shared object. data: The conversation data. \"\"\" super () . __init__ ( shared = shared , conversation_id = self . id ) self . id : int = data [ \"id\" ] self . title : str = data [ \"title\" ] # Technically the initiator could be a group, but in practice that doesn't happen # so this is a partialuser # Nikita Petko: Well uhhh, the initiator is of the ChatParticipant model, # where it can either be from User or System. self . initiator : PartialUser = PartialUser ( shared , data [ \"initiator\" ]) self . has_unread_messages : bool = data [ \"hasUnreadMessages\" ] self . participants : List [ PartialUser ] = [ PartialUser ( shared = shared , data = participant_data ) for participant_data in data [ \"participants\" ]] self . conversation_type : ConversationType = ConversationType ( data [ \"conversationType\" ]) self . conversation_title : ConversationTitle = ConversationTitle ( data = data [ \"conversationTitle\" ] ) self . last_updated : datetime = parse ( data [ \"lastUpdated\" ]) self . conversation_universe : Optional [ ChatPartialUniverse ] = data [ \"conversationUniverse\" ] and ChatPartialUniverse ( shared = shared , data = data [ \"conversationUniverse\" ] )","title":"__init__()"},{"location":"reference/roblox/conversations/#roblox.conversations.Conversation.__repr__","text":"Source code in roblox/conversations.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } title= { self . title !r} >\"","title":"__repr__()"},{"location":"reference/roblox/conversations/#roblox.conversations.ConversationTitle","text":"A chat conversation's title. Attributes: Name Type Description title_for_viewer str Specifies the title for the conversation specific to the viewer. is_default_title bool Specifies if the title displayed for the user is generated as a default title in the backend or was custom assigned by the user.","title":"ConversationTitle"},{"location":"reference/roblox/conversations/#roblox.conversations.ConversationTitle.__init__","text":"Parameters: Name Type Description Default data dict The raw input data. required Source code in roblox/conversations.py def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . title_for_viewer : str = data [ \"titleForViewer\" ] self . is_default_title : bool = data [ \"isDefaultTitle\" ]","title":"__init__()"},{"location":"reference/roblox/conversations/#roblox.conversations.ConversationTitle.__repr__","text":"Source code in roblox/conversations.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } title_for_viewer= { self . title_for_viewer !r} >\"","title":"__repr__()"},{"location":"reference/roblox/conversations/#roblox.conversations.ConversationType","text":"A chat conversation's type.","title":"ConversationType"},{"location":"reference/roblox/conversations/#roblox.conversations.ConversationType.cloud_edit_conversation","text":"Represents a chat in a team-create session.","title":"cloud_edit_conversation"},{"location":"reference/roblox/conversations/#roblox.conversations.ConversationType.multi_user_conversation","text":"Represents a chat with multiples users on the website.","title":"multi_user_conversation"},{"location":"reference/roblox/conversations/#roblox.conversations.ConversationType.one_to_one_conversation","text":"Represents a one-to-one conversation with person A and B.","title":"one_to_one_conversation"},{"location":"reference/roblox/creatortype/","text":"roblox.creatortype \u00b6 Contains shared enums. fixme: this should be deprecated! CreatorType ( Enum ) \u00b6 Represents the type of creator for objects that can be owned by either a group or a user, like Assets. group \u00b6 The creator is a group. user \u00b6 The creator is a user.","title":"creatortype"},{"location":"reference/roblox/creatortype/#roblox.creatortype","text":"Contains shared enums. fixme: this should be deprecated!","title":"creatortype"},{"location":"reference/roblox/creatortype/#roblox.creatortype.CreatorType","text":"Represents the type of creator for objects that can be owned by either a group or a user, like Assets.","title":"CreatorType"},{"location":"reference/roblox/creatortype/#roblox.creatortype.CreatorType.group","text":"The creator is a group.","title":"group"},{"location":"reference/roblox/creatortype/#roblox.creatortype.CreatorType.user","text":"The creator is a user.","title":"user"},{"location":"reference/roblox/delivery/","text":"roblox.delivery \u00b6 Contains classes and functions related to Roblox asset delivery. BaseCDNHash \u00b6 Represents a cdn_hash on a Roblox content delivery network. Attributes: Name Type Description cdn_hash str The CDN hash as a string. __init__ ( self , shared : ClientSharedObject , cdn_hash : str ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The shared object. required cdn_hash str The CDN hash as a string. required Source code in roblox/delivery.py def __init__ ( self , shared : ClientSharedObject , cdn_hash : str ): \"\"\" Arguments: shared: The shared object. cdn_hash: The CDN hash as a string. \"\"\" self . _shared : ClientSharedObject = shared self . cdn_hash : str = cdn_hash __repr__ ( self ) special \u00b6 Source code in roblox/delivery.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } cdn_hash= { self . cdn_hash } >\" get_cdn_number ( self ) -> int \u00b6 Returns the CDN number of this CDN hash. Returns: Type Description int The computed number of the given cdn_hash Source code in roblox/delivery.py def get_cdn_number ( self ) -> int : \"\"\" Returns the CDN number of this CDN hash. Returns: The computed number of the given cdn_hash \"\"\" return get_cdn_number ( self . cdn_hash ) get_url ( self , site : str = 'rbxcdn.com' ) -> str \u00b6 Gets the cdn_hash's URL. This should be implemented by subclasses. Parameters: Name Type Description Default site str Represents the URL for what site it should target, be it rbxcdn.com, or roblox.com etc. 'rbxcdn.com' Returns: Type Description str The computed URL from the given cdn_hash attribute. Source code in roblox/delivery.py def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Gets the cdn_hash's URL. This should be implemented by subclasses. Arguments: site: Represents the URL for what site it should target, be it rbxcdn.com, or roblox.com etc. Returns: The computed URL from the given cdn_hash attribute. \"\"\" raise NotImplementedError ContentCDNHash ( BaseCDNHash ) \u00b6 Represents a CDN hash on cX.rbxcdn.com. __init__ ( self , shared : ClientSharedObject , cdn_hash : str ) special \u00b6 Source code in roblox/delivery.py def __init__ ( self , shared : ClientSharedObject , cdn_hash : str ): super () . __init__ ( shared = shared , cdn_hash = cdn_hash ) get_url ( self , site : str = 'rbxcdn.com' ) -> str \u00b6 Returns this hash's URL. Source code in roblox/delivery.py def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Returns this hash's URL. \"\"\" return self . _get_url ( \"c\" , cdn_site ) DeliveryProvider \u00b6 __init__ ( self , shared : ClientSharedObject ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The shared object, which is passed to all objects this client generates. required Source code in roblox/delivery.py def __init__ ( self , shared : ClientSharedObject ): \"\"\" Arguments: shared: The shared object, which is passed to all objects this client generates. \"\"\" self . _shared : ClientSharedObject = shared get_cdn_hash ( self , cdn_hash : str ) -> BaseCDNHash \u00b6 Gets a Roblox CDN cdn_hash. Parameters: Name Type Description Default cdn_hash str The cdn_hash. required Source code in roblox/delivery.py def get_cdn_hash ( self , cdn_hash : str ) -> BaseCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A BaseHash. \"\"\" return BaseCDNHash ( shared = self . _shared , cdn_hash = cdn_hash ) get_cdn_hash_from_url ( self , url : str , site : str = 'rbxcdn.com' ) -> BaseCDNHash \u00b6 Parameters: Name Type Description Default url str A CDN url. required site str The site this cdn_hash is located at. 'rbxcdn.com' Source code in roblox/delivery.py def get_cdn_hash_from_url ( self , url : str , site : str = cdn_site ) -> BaseCDNHash : \"\"\" todo: turn this into something that actually splits into path. Arguments: url: A CDN url. site: The site this cdn_hash is located at. Returns: The CDN cdn_hash for the supplied CDN URL. \"\"\" return self . get_cdn_hash ( cdn_hash = url . split ( f \". { site } /\" )[ 1 ] ) get_content_cdn_hash ( self , cdn_hash : str ) -> ContentCDNHash \u00b6 Gets a Roblox CDN cdn_hash. Parameters: Name Type Description Default cdn_hash str The cdn_hash. required Source code in roblox/delivery.py def get_content_cdn_hash ( self , cdn_hash : str ) -> ContentCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A BaseHash. \"\"\" return ContentCDNHash ( shared = self . _shared , cdn_hash = cdn_hash ) get_thumbnail_cdn_hash ( self , cdn_hash : str ) -> ThumbnailCDNHash \u00b6 Gets a Roblox CDN cdn_hash. Parameters: Name Type Description Default cdn_hash str The cdn_hash. required Source code in roblox/delivery.py def get_thumbnail_cdn_hash ( self , cdn_hash : str ) -> ThumbnailCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A BaseHash. \"\"\" return ThumbnailCDNHash ( shared = self . _shared , cdn_hash = cdn_hash ) ThumbnailCDNHash ( BaseCDNHash ) \u00b6 Represents a CDN hash on tX.rbxcdn.com. __init__ ( self , shared : ClientSharedObject , cdn_hash : str ) special \u00b6 Source code in roblox/delivery.py def __init__ ( self , shared : ClientSharedObject , cdn_hash : str ): super () . __init__ ( shared = shared , cdn_hash = cdn_hash ) get_url ( self , site : str = 'rbxcdn.com' ) -> str \u00b6 Returns this CDN hash's URL. Source code in roblox/delivery.py def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Returns this CDN hash's URL. \"\"\" return self . _get_url ( \"t\" , cdn_site ) get_cdn_number ( cdn_hash : str ) -> int \u00b6 Gets the number in the CDN where number represents X in tX.rbxcdn.com Parameters: Name Type Description Default cdn_hash str The CDN cdn_hash to generate a CDN number for. required Source code in roblox/delivery.py def get_cdn_number ( cdn_hash : str ) -> int : \"\"\" Gets the number in the CDN where number represents X in tX.rbxcdn.com Arguments: cdn_hash: The CDN cdn_hash to generate a CDN number for. Returns: The CDN number for the supplied cdn_hash. \"\"\" i = 31 for char in cdn_hash [: 32 ]: i ^= ord ( char ) # i ^= int(char, 16) also works return i % 8","title":"delivery"},{"location":"reference/roblox/delivery/#roblox.delivery","text":"Contains classes and functions related to Roblox asset delivery.","title":"delivery"},{"location":"reference/roblox/delivery/#roblox.delivery.BaseCDNHash","text":"Represents a cdn_hash on a Roblox content delivery network. Attributes: Name Type Description cdn_hash str The CDN hash as a string.","title":"BaseCDNHash"},{"location":"reference/roblox/delivery/#roblox.delivery.BaseCDNHash.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The shared object. required cdn_hash str The CDN hash as a string. required Source code in roblox/delivery.py def __init__ ( self , shared : ClientSharedObject , cdn_hash : str ): \"\"\" Arguments: shared: The shared object. cdn_hash: The CDN hash as a string. \"\"\" self . _shared : ClientSharedObject = shared self . cdn_hash : str = cdn_hash","title":"__init__()"},{"location":"reference/roblox/delivery/#roblox.delivery.BaseCDNHash.__repr__","text":"Source code in roblox/delivery.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } cdn_hash= { self . cdn_hash } >\"","title":"__repr__()"},{"location":"reference/roblox/delivery/#roblox.delivery.BaseCDNHash.get_cdn_number","text":"Returns the CDN number of this CDN hash. Returns: Type Description int The computed number of the given cdn_hash Source code in roblox/delivery.py def get_cdn_number ( self ) -> int : \"\"\" Returns the CDN number of this CDN hash. Returns: The computed number of the given cdn_hash \"\"\" return get_cdn_number ( self . cdn_hash )","title":"get_cdn_number()"},{"location":"reference/roblox/delivery/#roblox.delivery.BaseCDNHash.get_url","text":"Gets the cdn_hash's URL. This should be implemented by subclasses. Parameters: Name Type Description Default site str Represents the URL for what site it should target, be it rbxcdn.com, or roblox.com etc. 'rbxcdn.com' Returns: Type Description str The computed URL from the given cdn_hash attribute. Source code in roblox/delivery.py def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Gets the cdn_hash's URL. This should be implemented by subclasses. Arguments: site: Represents the URL for what site it should target, be it rbxcdn.com, or roblox.com etc. Returns: The computed URL from the given cdn_hash attribute. \"\"\" raise NotImplementedError","title":"get_url()"},{"location":"reference/roblox/delivery/#roblox.delivery.ContentCDNHash","text":"Represents a CDN hash on cX.rbxcdn.com.","title":"ContentCDNHash"},{"location":"reference/roblox/delivery/#roblox.delivery.ContentCDNHash.__init__","text":"Source code in roblox/delivery.py def __init__ ( self , shared : ClientSharedObject , cdn_hash : str ): super () . __init__ ( shared = shared , cdn_hash = cdn_hash )","title":"__init__()"},{"location":"reference/roblox/delivery/#roblox.delivery.ContentCDNHash.get_url","text":"Returns this hash's URL. Source code in roblox/delivery.py def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Returns this hash's URL. \"\"\" return self . _get_url ( \"c\" , cdn_site )","title":"get_url()"},{"location":"reference/roblox/delivery/#roblox.delivery.DeliveryProvider","text":"","title":"DeliveryProvider"},{"location":"reference/roblox/delivery/#roblox.delivery.DeliveryProvider.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The shared object, which is passed to all objects this client generates. required Source code in roblox/delivery.py def __init__ ( self , shared : ClientSharedObject ): \"\"\" Arguments: shared: The shared object, which is passed to all objects this client generates. \"\"\" self . _shared : ClientSharedObject = shared","title":"__init__()"},{"location":"reference/roblox/delivery/#roblox.delivery.DeliveryProvider.get_cdn_hash","text":"Gets a Roblox CDN cdn_hash. Parameters: Name Type Description Default cdn_hash str The cdn_hash. required Source code in roblox/delivery.py def get_cdn_hash ( self , cdn_hash : str ) -> BaseCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A BaseHash. \"\"\" return BaseCDNHash ( shared = self . _shared , cdn_hash = cdn_hash )","title":"get_cdn_hash()"},{"location":"reference/roblox/delivery/#roblox.delivery.DeliveryProvider.get_cdn_hash_from_url","text":"Parameters: Name Type Description Default url str A CDN url. required site str The site this cdn_hash is located at. 'rbxcdn.com' Source code in roblox/delivery.py def get_cdn_hash_from_url ( self , url : str , site : str = cdn_site ) -> BaseCDNHash : \"\"\" todo: turn this into something that actually splits into path. Arguments: url: A CDN url. site: The site this cdn_hash is located at. Returns: The CDN cdn_hash for the supplied CDN URL. \"\"\" return self . get_cdn_hash ( cdn_hash = url . split ( f \". { site } /\" )[ 1 ] )","title":"get_cdn_hash_from_url()"},{"location":"reference/roblox/delivery/#roblox.delivery.DeliveryProvider.get_content_cdn_hash","text":"Gets a Roblox CDN cdn_hash. Parameters: Name Type Description Default cdn_hash str The cdn_hash. required Source code in roblox/delivery.py def get_content_cdn_hash ( self , cdn_hash : str ) -> ContentCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A BaseHash. \"\"\" return ContentCDNHash ( shared = self . _shared , cdn_hash = cdn_hash )","title":"get_content_cdn_hash()"},{"location":"reference/roblox/delivery/#roblox.delivery.DeliveryProvider.get_thumbnail_cdn_hash","text":"Gets a Roblox CDN cdn_hash. Parameters: Name Type Description Default cdn_hash str The cdn_hash. required Source code in roblox/delivery.py def get_thumbnail_cdn_hash ( self , cdn_hash : str ) -> ThumbnailCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A BaseHash. \"\"\" return ThumbnailCDNHash ( shared = self . _shared , cdn_hash = cdn_hash )","title":"get_thumbnail_cdn_hash()"},{"location":"reference/roblox/delivery/#roblox.delivery.ThumbnailCDNHash","text":"Represents a CDN hash on tX.rbxcdn.com.","title":"ThumbnailCDNHash"},{"location":"reference/roblox/delivery/#roblox.delivery.ThumbnailCDNHash.__init__","text":"Source code in roblox/delivery.py def __init__ ( self , shared : ClientSharedObject , cdn_hash : str ): super () . __init__ ( shared = shared , cdn_hash = cdn_hash )","title":"__init__()"},{"location":"reference/roblox/delivery/#roblox.delivery.ThumbnailCDNHash.get_url","text":"Returns this CDN hash's URL. Source code in roblox/delivery.py def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Returns this CDN hash's URL. \"\"\" return self . _get_url ( \"t\" , cdn_site )","title":"get_url()"},{"location":"reference/roblox/delivery/#roblox.delivery.get_cdn_number","text":"Gets the number in the CDN where number represents X in tX.rbxcdn.com Parameters: Name Type Description Default cdn_hash str The CDN cdn_hash to generate a CDN number for. required Source code in roblox/delivery.py def get_cdn_number ( cdn_hash : str ) -> int : \"\"\" Gets the number in the CDN where number represents X in tX.rbxcdn.com Arguments: cdn_hash: The CDN cdn_hash to generate a CDN number for. Returns: The CDN number for the supplied cdn_hash. \"\"\" i = 31 for char in cdn_hash [: 32 ]: i ^= ord ( char ) # i ^= int(char, 16) also works return i % 8","title":"get_cdn_number()"},{"location":"reference/roblox/friends/","text":"roblox.friends \u00b6 Contains classes related to Roblox friend data and parsing. Friend ( User ) \u00b6 Represents a friend. Attributes: Name Type Description is_online Optional[bool] Whether the user is currently online. presence_type int Their presence type. Don't use this. is_deleted bool Whether the account is deleted. friend_frequent_rank int Unknown __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default data dict The data we get back from the endpoint. required shared ClientSharedObject The shared object, which is passed to all objects this client generates. required Source code in roblox/friends.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: data: The data we get back from the endpoint. shared: The shared object, which is passed to all objects this client generates. \"\"\" super () . __init__ ( shared = shared , data = data ) self . is_online : Optional [ bool ] = data . get ( \"isOnline\" ) self . presence_type : int = data [ \"presenceType\" ] self . is_deleted : bool = data [ \"isDeleted\" ] self . friend_frequent_rank : int = data [ \"friendFrequentRank\" ] __repr__ ( self ) special \u00b6 Source code in roblox/friends.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} is_online= { self . is_online } >\"","title":"friends"},{"location":"reference/roblox/friends/#roblox.friends","text":"Contains classes related to Roblox friend data and parsing.","title":"friends"},{"location":"reference/roblox/friends/#roblox.friends.Friend","text":"Represents a friend. Attributes: Name Type Description is_online Optional[bool] Whether the user is currently online. presence_type int Their presence type. Don't use this. is_deleted bool Whether the account is deleted. friend_frequent_rank int Unknown","title":"Friend"},{"location":"reference/roblox/friends/#roblox.friends.Friend.__init__","text":"Parameters: Name Type Description Default data dict The data we get back from the endpoint. required shared ClientSharedObject The shared object, which is passed to all objects this client generates. required Source code in roblox/friends.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: data: The data we get back from the endpoint. shared: The shared object, which is passed to all objects this client generates. \"\"\" super () . __init__ ( shared = shared , data = data ) self . is_online : Optional [ bool ] = data . get ( \"isOnline\" ) self . presence_type : int = data [ \"presenceType\" ] self . is_deleted : bool = data [ \"isDeleted\" ] self . friend_frequent_rank : int = data [ \"friendFrequentRank\" ]","title":"__init__()"},{"location":"reference/roblox/friends/#roblox.friends.Friend.__repr__","text":"Source code in roblox/friends.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} is_online= { self . is_online } >\"","title":"__repr__()"},{"location":"reference/roblox/gamepasses/","text":"roblox.gamepasses \u00b6 Contains classes related to Roblox gamepass data and parsing. GamePass ( BaseGamePass ) \u00b6 Represents a Roblox gamepass. Attributes: Name Type Description _shared ClientSharedObject The shared object. id int The gamepass ID. name str The gamepass name. display_name str The gamepass display name. price Optional[int] The gamepass price. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Source code in roblox/gamepasses.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . id : int = data [ \"id\" ] super () . __init__ ( shared = self . _shared , gamepass_id = self . id ) self . name : str = data [ \"name\" ] self . display_name : str = data [ \"displayName\" ] # TODO: add product here self . price : Optional [ int ] = data [ \"price\" ] __repr__ ( self ) special \u00b6 Source code in roblox/gamepasses.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} price= { self . price } >\"","title":"gamepasses"},{"location":"reference/roblox/gamepasses/#roblox.gamepasses","text":"Contains classes related to Roblox gamepass data and parsing.","title":"gamepasses"},{"location":"reference/roblox/gamepasses/#roblox.gamepasses.GamePass","text":"Represents a Roblox gamepass. Attributes: Name Type Description _shared ClientSharedObject The shared object. id int The gamepass ID. name str The gamepass name. display_name str The gamepass display name. price Optional[int] The gamepass price.","title":"GamePass"},{"location":"reference/roblox/gamepasses/#roblox.gamepasses.GamePass.__init__","text":"Source code in roblox/gamepasses.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . id : int = data [ \"id\" ] super () . __init__ ( shared = self . _shared , gamepass_id = self . id ) self . name : str = data [ \"name\" ] self . display_name : str = data [ \"displayName\" ] # TODO: add product here self . price : Optional [ int ] = data [ \"price\" ]","title":"__init__()"},{"location":"reference/roblox/gamepasses/#roblox.gamepasses.GamePass.__repr__","text":"Source code in roblox/gamepasses.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} price= { self . price } >\"","title":"__repr__()"},{"location":"reference/roblox/groups/","text":"roblox.groups \u00b6 Contains classes related to Roblox group data and parsing. Group ( BaseGroup ) \u00b6 Represents a Join Request Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int the id of the group. name str name of the group. description str description of the group. owner PartialUser player who owns the group. shout Optional[Shout] the current group shout. member_count int about of members in the group. is_builders_club_only bool can only people with builder club join. public_entry_allowed bool can you join without your join request having to be accepted. is_locked bool Is the group locked? __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default data dict The data we get back from the endpoint. required shared ClientSharedObject The shared object, which is passed to all objects this client generates. required Source code in roblox/groups.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: data: The data we get back from the endpoint. shared: The shared object, which is passed to all objects this client generates. \"\"\" super () . __init__ ( shared , data [ \"id\" ]) self . _shared : ClientSharedObject = shared self . id : int = data [ \"id\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . owner : PartialUser = PartialUser ( shared = shared , data = data [ \"owner\" ]) self . shout : Optional [ Shout ] = data [ \"shout\" ] and Shout ( shared = self . _shared , data = data [ \"shout\" ] ) or None self . member_count : int = data [ \"memberCount\" ] self . is_builders_club_only : bool = data [ \"isBuildersClubOnly\" ] self . public_entry_allowed : bool = data [ \"publicEntryAllowed\" ] self . is_locked : bool = data . get ( \"isLocked\" ) or False __repr__ ( self ) special \u00b6 Source code in roblox/groups.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} owner= { self . owner } >\" update_shout ( self , message : str , update_self : bool = True ) -> Tuple [ Optional [ roblox . shout . Shout ], Optional [ roblox . shout . Shout ]] async \u00b6 Updates the shout. Parameters: Name Type Description Default message str The new shout message. required update_self bool Whether to update self.shout automatically. True Source code in roblox/groups.py async def update_shout ( self , message : str , update_self : bool = True ) -> Tuple [ Optional [ Shout ], Optional [ Shout ]]: \"\"\" Updates the shout. Arguments: message: The new shout message. update_self: Whether to update self.shout automatically. \"\"\" shout_response = await self . _requests . patch ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /status\" ), json = { \"message\" : message } ) shout_data = shout_response . json () old_shout : Optional [ Shout ] = self . shout new_shout : Optional [ Shout ] = shout_data and Shout ( shared = self . _shared , data = shout_data ) or None if update_self : self . shout = new_shout return old_shout , new_shout","title":"groups"},{"location":"reference/roblox/groups/#roblox.groups","text":"Contains classes related to Roblox group data and parsing.","title":"groups"},{"location":"reference/roblox/groups/#roblox.groups.Group","text":"Represents a Join Request Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int the id of the group. name str name of the group. description str description of the group. owner PartialUser player who owns the group. shout Optional[Shout] the current group shout. member_count int about of members in the group. is_builders_club_only bool can only people with builder club join. public_entry_allowed bool can you join without your join request having to be accepted. is_locked bool Is the group locked?","title":"Group"},{"location":"reference/roblox/groups/#roblox.groups.Group.__init__","text":"Parameters: Name Type Description Default data dict The data we get back from the endpoint. required shared ClientSharedObject The shared object, which is passed to all objects this client generates. required Source code in roblox/groups.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: data: The data we get back from the endpoint. shared: The shared object, which is passed to all objects this client generates. \"\"\" super () . __init__ ( shared , data [ \"id\" ]) self . _shared : ClientSharedObject = shared self . id : int = data [ \"id\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . owner : PartialUser = PartialUser ( shared = shared , data = data [ \"owner\" ]) self . shout : Optional [ Shout ] = data [ \"shout\" ] and Shout ( shared = self . _shared , data = data [ \"shout\" ] ) or None self . member_count : int = data [ \"memberCount\" ] self . is_builders_club_only : bool = data [ \"isBuildersClubOnly\" ] self . public_entry_allowed : bool = data [ \"publicEntryAllowed\" ] self . is_locked : bool = data . get ( \"isLocked\" ) or False","title":"__init__()"},{"location":"reference/roblox/groups/#roblox.groups.Group.__repr__","text":"Source code in roblox/groups.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} owner= { self . owner } >\"","title":"__repr__()"},{"location":"reference/roblox/groups/#roblox.groups.Group.update_shout","text":"Updates the shout. Parameters: Name Type Description Default message str The new shout message. required update_self bool Whether to update self.shout automatically. True Source code in roblox/groups.py async def update_shout ( self , message : str , update_self : bool = True ) -> Tuple [ Optional [ Shout ], Optional [ Shout ]]: \"\"\" Updates the shout. Arguments: message: The new shout message. update_self: Whether to update self.shout automatically. \"\"\" shout_response = await self . _requests . patch ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /status\" ), json = { \"message\" : message } ) shout_data = shout_response . json () old_shout : Optional [ Shout ] = self . shout new_shout : Optional [ Shout ] = shout_data and Shout ( shared = self . _shared , data = shout_data ) or None if update_self : self . shout = new_shout return old_shout , new_shout","title":"update_shout()"},{"location":"reference/roblox/instances/","text":"roblox.instances \u00b6 This module contains classes intended to parse and deal with data from Roblox item instance information endpoints. instance_classes \u00b6 AssetInstance ( ItemInstance ) \u00b6 Represents an instance of a Roblox asset. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Source code in roblox/instances.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared super () . __init__ ( shared = self . _shared , data = data ) self . asset : BaseAsset = BaseAsset ( shared = self . _shared , asset_id = data [ \"id\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } asset= { self . asset } >\" BadgeInstance ( ItemInstance ) \u00b6 Represents an instance of a Roblox badge. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Source code in roblox/instances.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared super () . __init__ ( shared = self . _shared , data = data ) self . badge : BaseBadge = BaseBadge ( shared = self . _shared , badge_id = data [ \"id\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } badge= { self . badge } >\" GamePassInstance ( ItemInstance ) \u00b6 Represents an instance of a Roblox gamepass. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Source code in roblox/instances.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared super () . __init__ ( shared = self . _shared , data = data ) self . gamepass : BaseGamePass = BaseGamePass ( shared = self . _shared , gamepass_id = data [ \"id\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } gamepass= { self . gamepass } >\" InstanceType ( Enum ) \u00b6 Represents an asset instance type. asset \u00b6 gamepass \u00b6 ItemInstance ( BaseInstance ) \u00b6 Represents an instance of a Roblox item of some kind. Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The data from the endpoint. required Source code in roblox/instances.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The data from the endpoint. \"\"\" self . _shared : ClientSharedObject = shared self . name : str = data [ \"name\" ] self . type : str = data [ \"type\" ] # fixme super () . __init__ ( shared = self . _shared , instance_id = data [ \"instanceId\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } >\"","title":"instances"},{"location":"reference/roblox/instances/#roblox.instances","text":"This module contains classes intended to parse and deal with data from Roblox item instance information endpoints.","title":"instances"},{"location":"reference/roblox/instances/#roblox.instances.instance_classes","text":"","title":"instance_classes"},{"location":"reference/roblox/instances/#roblox.instances.AssetInstance","text":"Represents an instance of a Roblox asset.","title":"AssetInstance"},{"location":"reference/roblox/instances/#roblox.instances.AssetInstance.__init__","text":"Source code in roblox/instances.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared super () . __init__ ( shared = self . _shared , data = data ) self . asset : BaseAsset = BaseAsset ( shared = self . _shared , asset_id = data [ \"id\" ])","title":"__init__()"},{"location":"reference/roblox/instances/#roblox.instances.AssetInstance.__repr__","text":"Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } asset= { self . asset } >\"","title":"__repr__()"},{"location":"reference/roblox/instances/#roblox.instances.BadgeInstance","text":"Represents an instance of a Roblox badge.","title":"BadgeInstance"},{"location":"reference/roblox/instances/#roblox.instances.BadgeInstance.__init__","text":"Source code in roblox/instances.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared super () . __init__ ( shared = self . _shared , data = data ) self . badge : BaseBadge = BaseBadge ( shared = self . _shared , badge_id = data [ \"id\" ])","title":"__init__()"},{"location":"reference/roblox/instances/#roblox.instances.BadgeInstance.__repr__","text":"Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } badge= { self . badge } >\"","title":"__repr__()"},{"location":"reference/roblox/instances/#roblox.instances.GamePassInstance","text":"Represents an instance of a Roblox gamepass.","title":"GamePassInstance"},{"location":"reference/roblox/instances/#roblox.instances.GamePassInstance.__init__","text":"Source code in roblox/instances.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared super () . __init__ ( shared = self . _shared , data = data ) self . gamepass : BaseGamePass = BaseGamePass ( shared = self . _shared , gamepass_id = data [ \"id\" ])","title":"__init__()"},{"location":"reference/roblox/instances/#roblox.instances.GamePassInstance.__repr__","text":"Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } gamepass= { self . gamepass } >\"","title":"__repr__()"},{"location":"reference/roblox/instances/#roblox.instances.InstanceType","text":"Represents an asset instance type.","title":"InstanceType"},{"location":"reference/roblox/instances/#roblox.instances.InstanceType.asset","text":"","title":"asset"},{"location":"reference/roblox/instances/#roblox.instances.InstanceType.gamepass","text":"","title":"gamepass"},{"location":"reference/roblox/instances/#roblox.instances.ItemInstance","text":"Represents an instance of a Roblox item of some kind. Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates.","title":"ItemInstance"},{"location":"reference/roblox/instances/#roblox.instances.ItemInstance.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The data from the endpoint. required Source code in roblox/instances.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The data from the endpoint. \"\"\" self . _shared : ClientSharedObject = shared self . name : str = data [ \"name\" ] self . type : str = data [ \"type\" ] # fixme super () . __init__ ( shared = self . _shared , instance_id = data [ \"instanceId\" ])","title":"__init__()"},{"location":"reference/roblox/instances/#roblox.instances.ItemInstance.__repr__","text":"Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } >\"","title":"__repr__()"},{"location":"reference/roblox/jobs/","text":"roblox.jobs \u00b6 This module contains classes intended to parse and deal with data from Roblox server instance (or \"job\") endpoints. GameInstance ( BaseJob ) \u00b6 Represents a game (or place) instance, or \"job\". Attributes: Name Type Description _shared ClientSharedObject The shared object. id str The instance's job ID. capacity int The server's capacity. ping int The server's ping. fps float The server's FPS. show_slow_game_message bool Whether to show the \"slow game\" message. place BasePlace The server's place. current_players List[GameInstancePlayer] A list of the players in this server. can_join bool Whether the authenticated user can join this server. show_shutdown_button bool Whether to show the shutdown button on this server. friends_description str What text should be shown if this server is a \"friends are in\" server. friends_mouseover What text should be shown on mouseover if this server is a \"friends are in\" server. capacity_message str The server's capacity as a parsed message. join_script str JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game. app_join_script str JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game through the Roblox mobile app. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Source code in roblox/jobs.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . id : str = data [ \"Guid\" ] super () . __init__ ( shared = self . _shared , job_id = self . id ) self . capacity : int = data [ \"Capacity\" ] self . ping : int = data [ \"Ping\" ] self . fps : float = data [ \"Fps\" ] self . show_slow_game_message : bool = data [ \"ShowSlowGameMessage\" ] self . place : BasePlace = BasePlace ( shared = self . _shared , place_id = data [ \"PlaceId\" ]) self . current_players : List [ GameInstancePlayer ] = [ GameInstancePlayer ( shared = self . _shared , data = player_data ) for player_data in data [ \"CurrentPlayers\" ] ] self . can_join : bool = data [ \"UserCanJoin\" ] self . show_shutdown_button : bool = data [ \"ShowShutdownButton\" ] self . friends_description : str = data [ \"FriendsDescription\" ] self . friends_mouseover = data [ \"FriendsMouseover\" ] self . capacity_message : str = data [ \"PlayersCapacity\" ] # TODO: reconsider self . join_script : str = data [ \"JoinScript\" ] self . app_join_script : str = data [ \"RobloxAppJoinScript\" ] __repr__ ( self ) special \u00b6 Source code in roblox/jobs.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id !r} capacity { self . capacity } >\" GameInstancePlayer ( BaseUser ) \u00b6 Represents a single player in a game instance. Data, like user ID and username, may be filled with placeholder data. Do not rely on this object containing proper data. If the id attribute is 0, this object should not be used. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Source code in roblox/jobs.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . id : int = data [ \"Id\" ] super () . __init__ ( shared = self . _shared , user_id = self . id ) self . name : str = data [ \"Username\" ] self . thumbnail : GameInstancePlayerThumbnail = GameInstancePlayerThumbnail ( shared = self . _shared , data = data [ \"Thumbnail\" ] ) __repr__ ( self ) special \u00b6 Source code in roblox/jobs.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" GameInstancePlayerThumbnail \u00b6 Represent a player in a game instance's thumbnail. As the asset part of these thumbnails is no longer in use, this endpoint does not attempt to implement asset information. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Source code in roblox/jobs.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . url : str = data [ \"Url\" ] self . final : bool = data [ \"IsFinal\" ] __repr__ ( self ) special \u00b6 Source code in roblox/jobs.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } url= { self . url !r} final= { self . final } \" GameInstances \u00b6 Represents a game/place's active server instances. Attributes: Name Type Description place BasePlace The place. show_shutdown_all_button bool Whether to show the \"Shutdown All\" button on the server list. is_game_instance_list_unavailable bool Whether the list is unavailable. collection List[GameInstance] A list of the game instances. total_collection_size int How many active servers there are. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Source code in roblox/jobs.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . place : BasePlace = BasePlace ( shared = self . _shared , place_id = data [ \"PlaceId\" ]) self . show_shutdown_all_button : bool = data [ \"ShowShutdownAllButton\" ] self . is_game_instance_list_unavailable : bool = data [ \"IsGameInstanceListUnavailable\" ] self . collection : List [ GameInstance ] = [ GameInstance ( shared = self . _shared , data = instance_data ) for instance_data in data [ \"Collection\" ] ] self . total_collection_size : int = data [ \"TotalCollectionSize\" ]","title":"jobs"},{"location":"reference/roblox/jobs/#roblox.jobs","text":"This module contains classes intended to parse and deal with data from Roblox server instance (or \"job\") endpoints.","title":"jobs"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstance","text":"Represents a game (or place) instance, or \"job\". Attributes: Name Type Description _shared ClientSharedObject The shared object. id str The instance's job ID. capacity int The server's capacity. ping int The server's ping. fps float The server's FPS. show_slow_game_message bool Whether to show the \"slow game\" message. place BasePlace The server's place. current_players List[GameInstancePlayer] A list of the players in this server. can_join bool Whether the authenticated user can join this server. show_shutdown_button bool Whether to show the shutdown button on this server. friends_description str What text should be shown if this server is a \"friends are in\" server. friends_mouseover What text should be shown on mouseover if this server is a \"friends are in\" server. capacity_message str The server's capacity as a parsed message. join_script str JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game. app_join_script str JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game through the Roblox mobile app.","title":"GameInstance"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstance.__init__","text":"Source code in roblox/jobs.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . id : str = data [ \"Guid\" ] super () . __init__ ( shared = self . _shared , job_id = self . id ) self . capacity : int = data [ \"Capacity\" ] self . ping : int = data [ \"Ping\" ] self . fps : float = data [ \"Fps\" ] self . show_slow_game_message : bool = data [ \"ShowSlowGameMessage\" ] self . place : BasePlace = BasePlace ( shared = self . _shared , place_id = data [ \"PlaceId\" ]) self . current_players : List [ GameInstancePlayer ] = [ GameInstancePlayer ( shared = self . _shared , data = player_data ) for player_data in data [ \"CurrentPlayers\" ] ] self . can_join : bool = data [ \"UserCanJoin\" ] self . show_shutdown_button : bool = data [ \"ShowShutdownButton\" ] self . friends_description : str = data [ \"FriendsDescription\" ] self . friends_mouseover = data [ \"FriendsMouseover\" ] self . capacity_message : str = data [ \"PlayersCapacity\" ] # TODO: reconsider self . join_script : str = data [ \"JoinScript\" ] self . app_join_script : str = data [ \"RobloxAppJoinScript\" ]","title":"__init__()"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstance.__repr__","text":"Source code in roblox/jobs.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id !r} capacity { self . capacity } >\"","title":"__repr__()"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstancePlayer","text":"Represents a single player in a game instance. Data, like user ID and username, may be filled with placeholder data. Do not rely on this object containing proper data. If the id attribute is 0, this object should not be used.","title":"GameInstancePlayer"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstancePlayer.__init__","text":"Source code in roblox/jobs.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . id : int = data [ \"Id\" ] super () . __init__ ( shared = self . _shared , user_id = self . id ) self . name : str = data [ \"Username\" ] self . thumbnail : GameInstancePlayerThumbnail = GameInstancePlayerThumbnail ( shared = self . _shared , data = data [ \"Thumbnail\" ] )","title":"__init__()"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstancePlayer.__repr__","text":"Source code in roblox/jobs.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstancePlayerThumbnail","text":"Represent a player in a game instance's thumbnail. As the asset part of these thumbnails is no longer in use, this endpoint does not attempt to implement asset information.","title":"GameInstancePlayerThumbnail"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstancePlayerThumbnail.__init__","text":"Source code in roblox/jobs.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . url : str = data [ \"Url\" ] self . final : bool = data [ \"IsFinal\" ]","title":"__init__()"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstancePlayerThumbnail.__repr__","text":"Source code in roblox/jobs.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } url= { self . url !r} final= { self . final } \"","title":"__repr__()"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstances","text":"Represents a game/place's active server instances. Attributes: Name Type Description place BasePlace The place. show_shutdown_all_button bool Whether to show the \"Shutdown All\" button on the server list. is_game_instance_list_unavailable bool Whether the list is unavailable. collection List[GameInstance] A list of the game instances. total_collection_size int How many active servers there are.","title":"GameInstances"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstances.__init__","text":"Source code in roblox/jobs.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . place : BasePlace = BasePlace ( shared = self . _shared , place_id = data [ \"PlaceId\" ]) self . show_shutdown_all_button : bool = data [ \"ShowShutdownAllButton\" ] self . is_game_instance_list_unavailable : bool = data [ \"IsGameInstanceListUnavailable\" ] self . collection : List [ GameInstance ] = [ GameInstance ( shared = self . _shared , data = instance_data ) for instance_data in data [ \"Collection\" ] ] self . total_collection_size : int = data [ \"TotalCollectionSize\" ]","title":"__init__()"},{"location":"reference/roblox/members/","text":"roblox.members \u00b6 This module contains classes intended to parse and deal with data from Roblox group member endpoints. Member ( MemberRelationship ) \u00b6 Represents a group member. Attributes: Name Type Description _shared ClientSharedObject The shared object. role PartialRole The member's role. group BaseGroup The member's group. __init__ ( self , shared : ClientSharedObject , data : dict , group : BaseGroup ) special \u00b6 Source code in roblox/members.py def __init__ ( self , shared : ClientSharedObject , data : dict , group : BaseGroup ): self . _shared : ClientSharedObject = shared self . id : int = data [ \"user\" ][ \"userId\" ] self . name : str = data [ \"user\" ][ \"username\" ] self . display_name : str = data [ \"user\" ][ \"displayName\" ] super () . __init__ ( shared = self . _shared , user = self . id , group = group ) self . role : PartialRole = PartialRole ( shared = self . _shared , data = data [ \"role\" ]) self . group : BaseGroup = group __repr__ ( self ) special \u00b6 Source code in roblox/members.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} role= { self . role } >\" MemberRelationship ( BaseUser ) \u00b6 Represents a relationship between a user and a group. __init__ ( self , shared : ClientSharedObject , user : Union [ BaseUser , int ], group : Union [ BaseGroup , int ]) special \u00b6 Source code in roblox/members.py def __init__ ( self , shared : ClientSharedObject , user : Union [ BaseUser , int ], group : Union [ BaseGroup , int ]): self . _shared : ClientSharedObject = shared super () . __init__ ( shared = self . _shared , user_id = int ( user )) self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( shared = self . _shared , group_id = group ) else : self . group = group kick ( self ) async \u00b6 Kicks this member from the group. Source code in roblox/members.py async def kick ( self ): \"\"\" Kicks this member from the group. \"\"\" await self . group . kick_user ( self ) set_rank ( self , rank : int ) async \u00b6 Sets this member's rank. Parameters: Name Type Description Default rank int The new rank this member should be assigned. Should be in the range of 0-255. required Source code in roblox/members.py async def set_rank ( self , rank : int ): \"\"\" Sets this member's rank. Arguments: rank: The new rank this member should be assigned. Should be in the range of 0-255. \"\"\" await self . group . set_rank ( self , rank ) set_role ( self , role : BaseRole ) async \u00b6 Sets this member's role. Parameters: Name Type Description Default role BaseRole The new role this member should be assigned. required Source code in roblox/members.py async def set_role ( self , role : BaseRole ): \"\"\" Sets this member's role. Arguments: role: The new role this member should be assigned. \"\"\" await self . group . set_role ( self , role )","title":"members"},{"location":"reference/roblox/members/#roblox.members","text":"This module contains classes intended to parse and deal with data from Roblox group member endpoints.","title":"members"},{"location":"reference/roblox/members/#roblox.members.Member","text":"Represents a group member. Attributes: Name Type Description _shared ClientSharedObject The shared object. role PartialRole The member's role. group BaseGroup The member's group.","title":"Member"},{"location":"reference/roblox/members/#roblox.members.Member.__init__","text":"Source code in roblox/members.py def __init__ ( self , shared : ClientSharedObject , data : dict , group : BaseGroup ): self . _shared : ClientSharedObject = shared self . id : int = data [ \"user\" ][ \"userId\" ] self . name : str = data [ \"user\" ][ \"username\" ] self . display_name : str = data [ \"user\" ][ \"displayName\" ] super () . __init__ ( shared = self . _shared , user = self . id , group = group ) self . role : PartialRole = PartialRole ( shared = self . _shared , data = data [ \"role\" ]) self . group : BaseGroup = group","title":"__init__()"},{"location":"reference/roblox/members/#roblox.members.Member.__repr__","text":"Source code in roblox/members.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} role= { self . role } >\"","title":"__repr__()"},{"location":"reference/roblox/members/#roblox.members.MemberRelationship","text":"Represents a relationship between a user and a group.","title":"MemberRelationship"},{"location":"reference/roblox/members/#roblox.members.MemberRelationship.__init__","text":"Source code in roblox/members.py def __init__ ( self , shared : ClientSharedObject , user : Union [ BaseUser , int ], group : Union [ BaseGroup , int ]): self . _shared : ClientSharedObject = shared super () . __init__ ( shared = self . _shared , user_id = int ( user )) self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( shared = self . _shared , group_id = group ) else : self . group = group","title":"__init__()"},{"location":"reference/roblox/members/#roblox.members.MemberRelationship.kick","text":"Kicks this member from the group. Source code in roblox/members.py async def kick ( self ): \"\"\" Kicks this member from the group. \"\"\" await self . group . kick_user ( self )","title":"kick()"},{"location":"reference/roblox/members/#roblox.members.MemberRelationship.set_rank","text":"Sets this member's rank. Parameters: Name Type Description Default rank int The new rank this member should be assigned. Should be in the range of 0-255. required Source code in roblox/members.py async def set_rank ( self , rank : int ): \"\"\" Sets this member's rank. Arguments: rank: The new rank this member should be assigned. Should be in the range of 0-255. \"\"\" await self . group . set_rank ( self , rank )","title":"set_rank()"},{"location":"reference/roblox/members/#roblox.members.MemberRelationship.set_role","text":"Sets this member's role. Parameters: Name Type Description Default role BaseRole The new role this member should be assigned. required Source code in roblox/members.py async def set_role ( self , role : BaseRole ): \"\"\" Sets this member's role. Arguments: role: The new role this member should be assigned. \"\"\" await self . group . set_role ( self , role )","title":"set_role()"},{"location":"reference/roblox/places/","text":"roblox.places \u00b6 This module contains classes intended to parse and deal with data from Roblox place information endpoints. Place ( BasePlace ) \u00b6 Represents a Roblox place. Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. _data dict The data form the request. id int id of the place. name str Name of the place. description str Description of the place. url str URL for the place. builder str The name of the user or group who owns the place. builder_id int The ID of the player or group who owns the place. is_playable bool Whether the authenticated user can play this game. reason_prohibited str If the place is not playable, contains the reason why the user cannot play the game. universe BaseUniverse The BaseUniverse that contains this place. universe_root_place BasePlace The root place that the universe contains. price int How much it costs to play the game. image_token str Can be used to generate thumbnails for this place. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The shared object, which is passed to all objects this client generates. required data dict data to make the magic happen. required Source code in roblox/places.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The shared object, which is passed to all objects this client generates. data: data to make the magic happen. \"\"\" super () . __init__ ( shared = shared , place_id = data [ \"placeId\" ]) self . _shared : ClientSharedObject = shared self . _data : dict = data self . id : int = data [ \"placeId\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . url : str = data [ \"url\" ] self . builder : str = data [ \"builder\" ] self . builder_id : int = data [ \"builderId\" ] self . is_playable : bool = data [ \"isPlayable\" ] self . reason_prohibited : str = data [ \"reasonProhibited\" ] self . universe : BaseUniverse = BaseUniverse ( shared = self . _shared , universe_id = data [ \"universeId\" ]) self . universe_root_place : BasePlace = BasePlace ( shared = self . _shared , place_id = data [ \"universeRootPlaceId\" ]) self . price : int = data [ \"price\" ] self . image_token : str = data [ \"imageToken\" ] __repr__ ( self ) special \u00b6 Source code in roblox/places.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"places"},{"location":"reference/roblox/places/#roblox.places","text":"This module contains classes intended to parse and deal with data from Roblox place information endpoints.","title":"places"},{"location":"reference/roblox/places/#roblox.places.Place","text":"Represents a Roblox place. Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. _data dict The data form the request. id int id of the place. name str Name of the place. description str Description of the place. url str URL for the place. builder str The name of the user or group who owns the place. builder_id int The ID of the player or group who owns the place. is_playable bool Whether the authenticated user can play this game. reason_prohibited str If the place is not playable, contains the reason why the user cannot play the game. universe BaseUniverse The BaseUniverse that contains this place. universe_root_place BasePlace The root place that the universe contains. price int How much it costs to play the game. image_token str Can be used to generate thumbnails for this place.","title":"Place"},{"location":"reference/roblox/places/#roblox.places.Place.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The shared object, which is passed to all objects this client generates. required data dict data to make the magic happen. required Source code in roblox/places.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The shared object, which is passed to all objects this client generates. data: data to make the magic happen. \"\"\" super () . __init__ ( shared = shared , place_id = data [ \"placeId\" ]) self . _shared : ClientSharedObject = shared self . _data : dict = data self . id : int = data [ \"placeId\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . url : str = data [ \"url\" ] self . builder : str = data [ \"builder\" ] self . builder_id : int = data [ \"builderId\" ] self . is_playable : bool = data [ \"isPlayable\" ] self . reason_prohibited : str = data [ \"reasonProhibited\" ] self . universe : BaseUniverse = BaseUniverse ( shared = self . _shared , universe_id = data [ \"universeId\" ]) self . universe_root_place : BasePlace = BasePlace ( shared = self . _shared , place_id = data [ \"universeRootPlaceId\" ]) self . price : int = data [ \"price\" ] self . image_token : str = data [ \"imageToken\" ]","title":"__init__()"},{"location":"reference/roblox/places/#roblox.places.Place.__repr__","text":"Source code in roblox/places.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/plugins/","text":"roblox.plugins \u00b6 This module contains classes intended to parse and deal with data from Roblox plugin information endpoints. Plugin ( BasePlugin ) \u00b6 Represents a Roblox plugin. It is intended to parse data from https://develop.roblox.com/v1/plugins . Attributes: id: The ID of the plugin. name: The name of the plugin. description: The plugin's description. comments_enabled: Whether comments are enabled or disabled. version_id: The plugin's current version ID. created: When the plugin was created. updated: When the plugin was updated. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Attributes: Name Type Description shared The shared object, which is passed to all objects this client generates. data data to make the magic happen. Source code in roblox/plugins.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Attributes: shared: The shared object, which is passed to all objects this client generates. data: data to make the magic happen. \"\"\" super () . __init__ ( shared = shared , plugin_id = data [ \"id\" ]) self . id : int = data [ \"id\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . comments_enabled : bool = data [ \"commentsEnabled\" ] self . version_id : int = data [ \"versionId\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/plugins.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"plugins"},{"location":"reference/roblox/plugins/#roblox.plugins","text":"This module contains classes intended to parse and deal with data from Roblox plugin information endpoints.","title":"plugins"},{"location":"reference/roblox/plugins/#roblox.plugins.Plugin","text":"Represents a Roblox plugin. It is intended to parse data from https://develop.roblox.com/v1/plugins . Attributes: id: The ID of the plugin. name: The name of the plugin. description: The plugin's description. comments_enabled: Whether comments are enabled or disabled. version_id: The plugin's current version ID. created: When the plugin was created. updated: When the plugin was updated.","title":"Plugin"},{"location":"reference/roblox/plugins/#roblox.plugins.Plugin.__init__","text":"Attributes: Name Type Description shared The shared object, which is passed to all objects this client generates. data data to make the magic happen. Source code in roblox/plugins.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Attributes: shared: The shared object, which is passed to all objects this client generates. data: data to make the magic happen. \"\"\" super () . __init__ ( shared = shared , plugin_id = data [ \"id\" ]) self . id : int = data [ \"id\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . comments_enabled : bool = data [ \"commentsEnabled\" ] self . version_id : int = data [ \"versionId\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ])","title":"__init__()"},{"location":"reference/roblox/plugins/#roblox.plugins.Plugin.__repr__","text":"Source code in roblox/plugins.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/presence/","text":"roblox.presence \u00b6 This module contains classes intended to parse and deal with data from Roblox presence endpoints. Presence \u00b6 The PresenceProvider is an object that represents https://presence.roblox.com/ and provides multiple functions for fetching user presence information. Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. _data dict The data form the request. user_presence_type int type of presence? last_location str last location the user visited. place Optional[BasePlace] place of the last visited game. root_place Optional[BasePlace] root_place of the last visited game. game_id Optional[str] game_id of the last visited game. universe Optional[BaseUniverse] universe of the last visited game. user_id int the id of the currently selected user. last_online datetime when that user was online for the last time. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject Shared object. required data dict The data form the request. required Source code in roblox/presence.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: Shared object. data: The data form the request. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . user_presence_type : int = data [ \"userPresenceType\" ] self . last_location : str = data [ \"lastLocation\" ] self . place : Optional [ BasePlace ] = data . get ( \"placeId\" ) and BasePlace ( shared = shared , place_id = data [ \"placeId\" ] ) self . root_place : Optional [ BasePlace ] = data . get ( \"rootPlaceId\" ) and BasePlace ( shared = shared , place_id = data [ \"rootPlaceId\" ] ) self . game_id : Optional [ str ] = data [ \"gameId\" ] self . universe : Optional [ BaseUniverse ] = data . get ( \"universeId\" ) and BaseUniverse ( shared = shared , universe_id = data [ \"universeId\" ] ) self . user_id : int = data [ \"userId\" ] self . last_online : datetime = parse ( data [ \"lastOnline\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/presence.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } user_presence_type= { self . user_presence_type } >\" PresenceProvider \u00b6 The PresenceProvider provides multiple functions for fetching user presence information. Attributes: Name Type Description _shared The shared object, which is passed to all objects this client generates. __init__ ( self , shared : ClientSharedObject ) special \u00b6 Source code in roblox/presence.py def __init__ ( self , shared : ClientSharedObject ): self . _shared : ClientSharedObject = shared get_user_presences ( self , user_ids : List [ int ]) -> List [ roblox . presence . Presence ] async \u00b6 Returns a list of Presence objects corresponding to each user in the list. Parameters: Name Type Description Default user_ids List[int] The list of users you want to presences form. required Returns: Type Description List[roblox.presence.Presence] A List of Presence. Source code in roblox/presence.py async def get_user_presences ( self , user_ids : List [ int ]) -> List [ Presence ]: \"\"\" Returns a list of Presence objects corresponding to each user in the list. Arguments: user_ids: The list of users you want to presences form. Returns: A List of Presence. \"\"\" presences_response = await self . _shared . requests . post ( url = self . _shared . url_generator . get_url ( \"presence\" , \"v1/presence/users\" ), json = { \"userIds\" : user_ids } ) presences_data = presences_response . json ()[ \"userPresences\" ] return [ Presence ( shared = self . _shared , data = presence_data ) for presence_data in presences_data ]","title":"presence"},{"location":"reference/roblox/presence/#roblox.presence","text":"This module contains classes intended to parse and deal with data from Roblox presence endpoints.","title":"presence"},{"location":"reference/roblox/presence/#roblox.presence.Presence","text":"The PresenceProvider is an object that represents https://presence.roblox.com/ and provides multiple functions for fetching user presence information. Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. _data dict The data form the request. user_presence_type int type of presence? last_location str last location the user visited. place Optional[BasePlace] place of the last visited game. root_place Optional[BasePlace] root_place of the last visited game. game_id Optional[str] game_id of the last visited game. universe Optional[BaseUniverse] universe of the last visited game. user_id int the id of the currently selected user. last_online datetime when that user was online for the last time.","title":"Presence"},{"location":"reference/roblox/presence/#roblox.presence.Presence.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject Shared object. required data dict The data form the request. required Source code in roblox/presence.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: Shared object. data: The data form the request. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . user_presence_type : int = data [ \"userPresenceType\" ] self . last_location : str = data [ \"lastLocation\" ] self . place : Optional [ BasePlace ] = data . get ( \"placeId\" ) and BasePlace ( shared = shared , place_id = data [ \"placeId\" ] ) self . root_place : Optional [ BasePlace ] = data . get ( \"rootPlaceId\" ) and BasePlace ( shared = shared , place_id = data [ \"rootPlaceId\" ] ) self . game_id : Optional [ str ] = data [ \"gameId\" ] self . universe : Optional [ BaseUniverse ] = data . get ( \"universeId\" ) and BaseUniverse ( shared = shared , universe_id = data [ \"universeId\" ] ) self . user_id : int = data [ \"userId\" ] self . last_online : datetime = parse ( data [ \"lastOnline\" ])","title":"__init__()"},{"location":"reference/roblox/presence/#roblox.presence.Presence.__repr__","text":"Source code in roblox/presence.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } user_presence_type= { self . user_presence_type } >\"","title":"__repr__()"},{"location":"reference/roblox/presence/#roblox.presence.PresenceProvider","text":"The PresenceProvider provides multiple functions for fetching user presence information. Attributes: Name Type Description _shared The shared object, which is passed to all objects this client generates.","title":"PresenceProvider"},{"location":"reference/roblox/presence/#roblox.presence.PresenceProvider.__init__","text":"Source code in roblox/presence.py def __init__ ( self , shared : ClientSharedObject ): self . _shared : ClientSharedObject = shared","title":"__init__()"},{"location":"reference/roblox/presence/#roblox.presence.PresenceProvider.get_user_presences","text":"Returns a list of Presence objects corresponding to each user in the list. Parameters: Name Type Description Default user_ids List[int] The list of users you want to presences form. required Returns: Type Description List[roblox.presence.Presence] A List of Presence. Source code in roblox/presence.py async def get_user_presences ( self , user_ids : List [ int ]) -> List [ Presence ]: \"\"\" Returns a list of Presence objects corresponding to each user in the list. Arguments: user_ids: The list of users you want to presences form. Returns: A List of Presence. \"\"\" presences_response = await self . _shared . requests . post ( url = self . _shared . url_generator . get_url ( \"presence\" , \"v1/presence/users\" ), json = { \"userIds\" : user_ids } ) presences_data = presences_response . json ()[ \"userPresences\" ] return [ Presence ( shared = self . _shared , data = presence_data ) for presence_data in presences_data ]","title":"get_user_presences()"},{"location":"reference/roblox/promotionchannels/","text":"roblox.promotionchannels \u00b6 This module contains classes intended to parse and deal with data from Roblox promotion channel endpoints. UserPromotionChannels \u00b6 Represents a user's promotion channels. Attributes: Name Type Description facebook Optional[str] A link to the user's Facebook profile. twitter Optional[str] A Twitter handle. youtube Optional[str] A link to the user's YouTube channel. twitch Optional[str] A link to the user's Twitch channel. __init__ ( self , data : dict ) special \u00b6 Source code in roblox/promotionchannels.py def __init__ ( self , data : dict ): self . facebook : Optional [ str ] = data [ \"facebook\" ] self . twitter : Optional [ str ] = data [ \"twitter\" ] self . youtube : Optional [ str ] = data [ \"youtube\" ] self . twitch : Optional [ str ] = data [ \"twitch\" ] __repr__ ( self ) special \u00b6 Source code in roblox/promotionchannels.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\"","title":"promotionchannels"},{"location":"reference/roblox/promotionchannels/#roblox.promotionchannels","text":"This module contains classes intended to parse and deal with data from Roblox promotion channel endpoints.","title":"promotionchannels"},{"location":"reference/roblox/promotionchannels/#roblox.promotionchannels.UserPromotionChannels","text":"Represents a user's promotion channels. Attributes: Name Type Description facebook Optional[str] A link to the user's Facebook profile. twitter Optional[str] A Twitter handle. youtube Optional[str] A link to the user's YouTube channel. twitch Optional[str] A link to the user's Twitch channel.","title":"UserPromotionChannels"},{"location":"reference/roblox/promotionchannels/#roblox.promotionchannels.UserPromotionChannels.__init__","text":"Source code in roblox/promotionchannels.py def __init__ ( self , data : dict ): self . facebook : Optional [ str ] = data [ \"facebook\" ] self . twitter : Optional [ str ] = data [ \"twitter\" ] self . youtube : Optional [ str ] = data [ \"youtube\" ] self . twitch : Optional [ str ] = data [ \"twitch\" ]","title":"__init__()"},{"location":"reference/roblox/promotionchannels/#roblox.promotionchannels.UserPromotionChannels.__repr__","text":"Source code in roblox/promotionchannels.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\"","title":"__repr__()"},{"location":"reference/roblox/resale/","text":"roblox.resale \u00b6 Contains classes related to Roblox resale. AssetResaleData \u00b6 Represents an asset's resale data. Attributes: Name Type Description asset_stock int The asset's stock. sales int The asset's sales. number_remaining int On a Limited U item that hasn't ran out, this is the amount remaining. recent_average_price int The item's recent average price. original_price int What price this item waas originally sold at. price_data_points List[dict] A list of tuples containing __init__ ( self , data : dict ) special \u00b6 Source code in roblox/resale.py def __init__ ( self , data : dict ): self . asset_stock : int = data [ \"assetStock\" ] self . sales : int = data [ \"sales\" ] self . number_remaining : int = data [ \"numberRemaining\" ] self . recent_average_price : int = data [ \"recentAveragePrice\" ] self . original_price : int = data [ \"originalPrice\" ] self . price_data_points : List [ dict ] = data [ \"priceDataPoints\" ]","title":"resale"},{"location":"reference/roblox/resale/#roblox.resale","text":"Contains classes related to Roblox resale.","title":"resale"},{"location":"reference/roblox/resale/#roblox.resale.AssetResaleData","text":"Represents an asset's resale data. Attributes: Name Type Description asset_stock int The asset's stock. sales int The asset's sales. number_remaining int On a Limited U item that hasn't ran out, this is the amount remaining. recent_average_price int The item's recent average price. original_price int What price this item waas originally sold at. price_data_points List[dict] A list of tuples containing","title":"AssetResaleData"},{"location":"reference/roblox/resale/#roblox.resale.AssetResaleData.__init__","text":"Source code in roblox/resale.py def __init__ ( self , data : dict ): self . asset_stock : int = data [ \"assetStock\" ] self . sales : int = data [ \"sales\" ] self . number_remaining : int = data [ \"numberRemaining\" ] self . recent_average_price : int = data [ \"recentAveragePrice\" ] self . original_price : int = data [ \"originalPrice\" ] self . price_data_points : List [ dict ] = data [ \"priceDataPoints\" ]","title":"__init__()"},{"location":"reference/roblox/robloxbadges/","text":"roblox.robloxbadges \u00b6 This module contains classes intended to parse and deal with data from Roblox roblox badge endpoints. RobloxBadge ( BaseRobloxBadge ) \u00b6 Represents a Roblox roblox badge. Attributes: Name Type Description id int The badge's ID. name str The badge's name. description str The badge's description. image_url str A link to the badge's image. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Source code in roblox/robloxbadges.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . id : int = data [ \"id\" ] super () . __init__ ( shared = self . _shared , roblox_badge_id = self . id ) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . image_url : str = data [ \"imageUrl\" ] __repr__ ( self ) special \u00b6 Source code in roblox/robloxbadges.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } name= { self . name !r} >\"","title":"robloxbadges"},{"location":"reference/roblox/robloxbadges/#roblox.robloxbadges","text":"This module contains classes intended to parse and deal with data from Roblox roblox badge endpoints.","title":"robloxbadges"},{"location":"reference/roblox/robloxbadges/#roblox.robloxbadges.RobloxBadge","text":"Represents a Roblox roblox badge. Attributes: Name Type Description id int The badge's ID. name str The badge's name. description str The badge's description. image_url str A link to the badge's image.","title":"RobloxBadge"},{"location":"reference/roblox/robloxbadges/#roblox.robloxbadges.RobloxBadge.__init__","text":"Source code in roblox/robloxbadges.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . id : int = data [ \"id\" ] super () . __init__ ( shared = self . _shared , roblox_badge_id = self . id ) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . image_url : str = data [ \"imageUrl\" ]","title":"__init__()"},{"location":"reference/roblox/robloxbadges/#roblox.robloxbadges.RobloxBadge.__repr__","text":"Source code in roblox/robloxbadges.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/roles/","text":"roblox.roles \u00b6 This module contains classes intended to parse and deal with data from Roblox group role endpoints. Role ( BaseRole ) \u00b6 Represents a Roblox group's role. Attributes: Name Type Description id int The role's ID. group Optional[BaseGroup] The group that this role is a part of. name str The role's name. description Optional[str] The role's description. rank int The rank, from 0-255, of this role. member_count Optional[int] How many members exist with this role. __init__ ( self , shared : ClientSharedObject , data : dict , group : BaseGroup = None ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The client shared object. required data dict The raw role data. required group BaseGroup The parent group. None Source code in roblox/roles.py def __init__ ( self , shared : ClientSharedObject , data : dict , group : BaseGroup = None ): \"\"\" Arguments: shared: The client shared object. data: The raw role data. group: The parent group. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = data [ \"id\" ] super () . __init__ ( shared = self . _shared , role_id = self . id ) self . group : Optional [ BaseGroup ] = group self . name : str = data [ \"name\" ] self . description : Optional [ str ] = data . get ( \"description\" ) self . rank : int = data [ \"rank\" ] self . member_count : Optional [ int ] = data . get ( \"memberCount\" ) __repr__ ( self ) special \u00b6 Source code in roblox/roles.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } name= { self . name !r} rank= { self . rank } member_count= { self . member_count } >\" get_members ( self , limit : int = 10 ) -> PageIterator \u00b6 Gets all members with this role Returns: Type Description PageIterator A PageIterator containing all members with this role. Source code in roblox/roles.py def get_members ( self , limit : int = 10 ) -> PageIterator : \"\"\" Gets all members with this role Returns: A PageIterator containing all members with this role. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . group . id } /roles/ { self . id } /users\" ), limit = limit , handler = lambda shared , data : PartialUser ( shared = shared , data = data ) )","title":"roles"},{"location":"reference/roblox/roles/#roblox.roles","text":"This module contains classes intended to parse and deal with data from Roblox group role endpoints.","title":"roles"},{"location":"reference/roblox/roles/#roblox.roles.Role","text":"Represents a Roblox group's role. Attributes: Name Type Description id int The role's ID. group Optional[BaseGroup] The group that this role is a part of. name str The role's name. description Optional[str] The role's description. rank int The rank, from 0-255, of this role. member_count Optional[int] How many members exist with this role.","title":"Role"},{"location":"reference/roblox/roles/#roblox.roles.Role.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The client shared object. required data dict The raw role data. required group BaseGroup The parent group. None Source code in roblox/roles.py def __init__ ( self , shared : ClientSharedObject , data : dict , group : BaseGroup = None ): \"\"\" Arguments: shared: The client shared object. data: The raw role data. group: The parent group. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = data [ \"id\" ] super () . __init__ ( shared = self . _shared , role_id = self . id ) self . group : Optional [ BaseGroup ] = group self . name : str = data [ \"name\" ] self . description : Optional [ str ] = data . get ( \"description\" ) self . rank : int = data [ \"rank\" ] self . member_count : Optional [ int ] = data . get ( \"memberCount\" )","title":"__init__()"},{"location":"reference/roblox/roles/#roblox.roles.Role.__repr__","text":"Source code in roblox/roles.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } name= { self . name !r} rank= { self . rank } member_count= { self . member_count } >\"","title":"__repr__()"},{"location":"reference/roblox/roles/#roblox.roles.Role.get_members","text":"Gets all members with this role Returns: Type Description PageIterator A PageIterator containing all members with this role. Source code in roblox/roles.py def get_members ( self , limit : int = 10 ) -> PageIterator : \"\"\" Gets all members with this role Returns: A PageIterator containing all members with this role. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . group . id } /roles/ { self . id } /users\" ), limit = limit , handler = lambda shared , data : PartialUser ( shared = shared , data = data ) )","title":"get_members()"},{"location":"reference/roblox/shout/","text":"roblox.shout \u00b6 Contains the Shout object, which represents a group's shout. Shout \u00b6 Represents a Group Shout. Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. body str The text of the shout. created datetime When the shout was created. updated datetime When the shout was updated. poster PartialUser Who posted the shout. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject Shared object. required data dict The data form the request. required Source code in roblox/shout.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: Shared object. data: The data form the request. \"\"\" self . _shared : ClientSharedObject = shared self . body : str = data [ \"body\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . poster : PartialUser = PartialUser ( shared = self . _shared , data = data [ \"poster\" ] ) __repr__ ( self ) special \u00b6 Source code in roblox/shout.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } created= { self . created } updated= { self . updated } body= { self . body !r} \" \\ f \"poster= { self . poster !r} >\"","title":"shout"},{"location":"reference/roblox/shout/#roblox.shout","text":"Contains the Shout object, which represents a group's shout.","title":"shout"},{"location":"reference/roblox/shout/#roblox.shout.Shout","text":"Represents a Group Shout. Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. body str The text of the shout. created datetime When the shout was created. updated datetime When the shout was updated. poster PartialUser Who posted the shout.","title":"Shout"},{"location":"reference/roblox/shout/#roblox.shout.Shout.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject Shared object. required data dict The data form the request. required Source code in roblox/shout.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: Shared object. data: The data form the request. \"\"\" self . _shared : ClientSharedObject = shared self . body : str = data [ \"body\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . poster : PartialUser = PartialUser ( shared = self . _shared , data = data [ \"poster\" ] )","title":"__init__()"},{"location":"reference/roblox/shout/#roblox.shout.Shout.__repr__","text":"Source code in roblox/shout.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } created= { self . created } updated= { self . updated } body= { self . body !r} \" \\ f \"poster= { self . poster !r} >\"","title":"__repr__()"},{"location":"reference/roblox/sociallinks/","text":"roblox.sociallinks \u00b6 Contains objects related to Roblox social links. SocialLinkType ( Enum ) \u00b6 Represents a type of social link. discord \u00b6 facebook \u00b6 roblox_group \u00b6 twitch \u00b6 twitter \u00b6 youtube \u00b6 UniverseSocialLink ( BaseUniverseSocialLink ) \u00b6 Represents a universe's social links. Attributes: Name Type Description _shared ClientSharedObject The shared object. id int The social link's ID. title str The social link's title. url str The social link's URL. type SocialLinkType The social link's type. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Source code in roblox/sociallinks.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . id : int = data [ \"id\" ] super () . __init__ ( shared = self . _shared , social_link_id = self . id ) self . title : str = data [ \"title\" ] self . url : str = data [ \"url\" ] self . type : SocialLinkType = SocialLinkType ( data [ \"type\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/sociallinks.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } url= { self . url !r} type= { self . type !r} title= { self . title !r} \"","title":"sociallinks"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks","text":"Contains objects related to Roblox social links.","title":"sociallinks"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLinkType","text":"Represents a type of social link.","title":"SocialLinkType"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLinkType.discord","text":"","title":"discord"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLinkType.facebook","text":"","title":"facebook"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLinkType.roblox_group","text":"","title":"roblox_group"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLinkType.twitch","text":"","title":"twitch"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLinkType.twitter","text":"","title":"twitter"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLinkType.youtube","text":"","title":"youtube"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.UniverseSocialLink","text":"Represents a universe's social links. Attributes: Name Type Description _shared ClientSharedObject The shared object. id int The social link's ID. title str The social link's title. url str The social link's URL. type SocialLinkType The social link's type.","title":"UniverseSocialLink"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.UniverseSocialLink.__init__","text":"Source code in roblox/sociallinks.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . id : int = data [ \"id\" ] super () . __init__ ( shared = self . _shared , social_link_id = self . id ) self . title : str = data [ \"title\" ] self . url : str = data [ \"url\" ] self . type : SocialLinkType = SocialLinkType ( data [ \"type\" ])","title":"__init__()"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.UniverseSocialLink.__repr__","text":"Source code in roblox/sociallinks.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } url= { self . url !r} type= { self . type !r} title= { self . title !r} \"","title":"__repr__()"},{"location":"reference/roblox/threedthumbnails/","text":"roblox.threedthumbnails \u00b6 Contains classes related to 3D thumbnails. ThreeDThumbnail \u00b6 Represents a user's 3D Thumbnail data. For more info, see https://robloxapi.wiki/wiki/3D_Thumbnails . Attributes: Name Type Description mtl ThumbnailCDNHash A CDN hash pointing to the MTL data. obj ThumbnailCDNHash A CDN hash pointing to the OBJ data. textures List[ThumbnailCDNHash] A list of CDN hashes pointing to PNG texture data. camera ThreeDThumbnailCamera The camera object. aabb ThreeDThumbnailAABB The AABB object. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Source code in roblox/threedthumbnails.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . mtl : ThumbnailCDNHash = self . _shared . delivery_provider . get_thumbnail_cdn_hash ( data [ \"mtl\" ]) self . obj : ThumbnailCDNHash = self . _shared . delivery_provider . get_thumbnail_cdn_hash ( data [ \"obj\" ]) self . textures : List [ ThumbnailCDNHash ] = [ self . _shared . delivery_provider . get_thumbnail_cdn_hash ( cdn_hash ) for cdn_hash in data [ \"textures\" ] ] self . camera : ThreeDThumbnailCamera = ThreeDThumbnailCamera ( data [ \"camera\" ]) self . aabb : ThreeDThumbnailAABB = ThreeDThumbnailAABB ( data [ \"aabb\" ]) ThreeDThumbnailAABB \u00b6 Represents AABB data in a 3D thumbnail. Roblox uses this data to calculate the maximum render distance used when rendering 3D thumbnails. THREE . Vector3 ( json . aabb . max . x , json . aabb . max . y , json . aabb . max . z ). length () * 4 ; Attributes: Name Type Description min ThreeDThumbnailVector3 The minimum render position. max ThreeDThumbnailVector3 The maximum render position. __init__ ( self , data : dict ) special \u00b6 Source code in roblox/threedthumbnails.py def __init__ ( self , data : dict ): self . min : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"min\" ]) self . max : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"max\" ]) ThreeDThumbnailCamera \u00b6 Represents a camera in a 3D thumbnail. __init__ ( self , data : dict ) special \u00b6 Source code in roblox/threedthumbnails.py def __init__ ( self , data : dict ): self . fov : float = data [ \"fov\" ] self . position : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"position\" ]) self . direction : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"direction\" ]) ThreeDThumbnailVector3 \u00b6 Represents a Vector3 used on a 3D thumbnail. __init__ ( self , data : dict ) special \u00b6 Source code in roblox/threedthumbnails.py def __init__ ( self , data : dict ): self . x : float = data [ \"x\" ] self . y : float = data [ \"y\" ] self . z : float = data [ \"z\" ]","title":"threedthumbnails"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails","text":"Contains classes related to 3D thumbnails.","title":"threedthumbnails"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnail","text":"Represents a user's 3D Thumbnail data. For more info, see https://robloxapi.wiki/wiki/3D_Thumbnails . Attributes: Name Type Description mtl ThumbnailCDNHash A CDN hash pointing to the MTL data. obj ThumbnailCDNHash A CDN hash pointing to the OBJ data. textures List[ThumbnailCDNHash] A list of CDN hashes pointing to PNG texture data. camera ThreeDThumbnailCamera The camera object. aabb ThreeDThumbnailAABB The AABB object.","title":"ThreeDThumbnail"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnail.__init__","text":"Source code in roblox/threedthumbnails.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . mtl : ThumbnailCDNHash = self . _shared . delivery_provider . get_thumbnail_cdn_hash ( data [ \"mtl\" ]) self . obj : ThumbnailCDNHash = self . _shared . delivery_provider . get_thumbnail_cdn_hash ( data [ \"obj\" ]) self . textures : List [ ThumbnailCDNHash ] = [ self . _shared . delivery_provider . get_thumbnail_cdn_hash ( cdn_hash ) for cdn_hash in data [ \"textures\" ] ] self . camera : ThreeDThumbnailCamera = ThreeDThumbnailCamera ( data [ \"camera\" ]) self . aabb : ThreeDThumbnailAABB = ThreeDThumbnailAABB ( data [ \"aabb\" ])","title":"__init__()"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailAABB","text":"Represents AABB data in a 3D thumbnail. Roblox uses this data to calculate the maximum render distance used when rendering 3D thumbnails. THREE . Vector3 ( json . aabb . max . x , json . aabb . max . y , json . aabb . max . z ). length () * 4 ; Attributes: Name Type Description min ThreeDThumbnailVector3 The minimum render position. max ThreeDThumbnailVector3 The maximum render position.","title":"ThreeDThumbnailAABB"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailAABB.__init__","text":"Source code in roblox/threedthumbnails.py def __init__ ( self , data : dict ): self . min : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"min\" ]) self . max : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"max\" ])","title":"__init__()"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailCamera","text":"Represents a camera in a 3D thumbnail.","title":"ThreeDThumbnailCamera"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailCamera.__init__","text":"Source code in roblox/threedthumbnails.py def __init__ ( self , data : dict ): self . fov : float = data [ \"fov\" ] self . position : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"position\" ]) self . direction : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"direction\" ])","title":"__init__()"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailVector3","text":"Represents a Vector3 used on a 3D thumbnail.","title":"ThreeDThumbnailVector3"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailVector3.__init__","text":"Source code in roblox/threedthumbnails.py def __init__ ( self , data : dict ): self . x : float = data [ \"x\" ] self . y : float = data [ \"y\" ] self . z : float = data [ \"z\" ]","title":"__init__()"},{"location":"reference/roblox/thumbnails/","text":"roblox.thumbnails \u00b6 Contains objects related to Roblox thumbnails. AvatarThumbnailType ( Enum ) \u00b6 Type of avatar thumbnail. bust \u00b6 full_body \u00b6 headshot \u00b6 Thumbnail \u00b6 Represents a Roblox thumbnail as returned by almost all endpoints on https://thumbnails.roblox.com/ . Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. _data dict The data form the request. target_id int The id of the target of the image. state ThumbnailState The current state of the image. image_url Optional[str] Url of the image. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject Shared object. required data dict The data form the request. required Source code in roblox/thumbnails.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: Shared object. data: The data form the request. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . target_id : int = data [ \"targetId\" ] self . state : ThumbnailState = ThumbnailState ( data [ \"state\" ]) self . image_url : Optional [ str ] = data [ \"imageUrl\" ] __repr__ ( self ) special \u00b6 Source code in roblox/thumbnails.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } target_id= { self . target_id } name= { self . state !r} \" \\ f \"image_url= { self . image_url !r} >\" get_3d_data ( self ) async \u00b6 Generates 3D thumbnail data for this endpoint. Source code in roblox/thumbnails.py async def get_3d_data ( self ): \"\"\" Generates 3D thumbnail data for this endpoint. \"\"\" threed_response = await self . _shared . requests . get ( url = self . image_url ) threed_data = threed_response . json () return ThreeDThumbnail ( shared = self . _shared , data = threed_data ) ThumbnailFormat ( Enum ) \u00b6 Format returned by the endpoint. jpeg \u00b6 png \u00b6 ThumbnailProvider \u00b6 The ThumbnailProvider that provides multiple functions for generating user thumbnails. Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. __init__ ( self , shared : ClientSharedObject ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject Shared object. required Source code in roblox/thumbnails.py def __init__ ( self , shared : ClientSharedObject ): \"\"\" Arguments: shared: Shared object. \"\"\" self . _shared : ClientSharedObject = shared get_asset_thumbnail_3d ( self , asset : BaseAsset ) -> Thumbnail async \u00b6 Returns a 3d asset thumbnail for the user ID passed. Parameters: Name Type Description Default asset BaseAsset Asset you want the thumbnails of. required Returns: Type Description Thumbnail A Thumbnail. Source code in roblox/thumbnails.py async def get_asset_thumbnail_3d ( self , asset : BaseAsset ) -> Thumbnail : \"\"\" Returns a 3d asset thumbnail for the user ID passed. Arguments: asset: Asset you want the thumbnails of. Returns: A Thumbnail. \"\"\" thumbnail_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/assets-thumbnail-3d\" ), params = { \"assetId\" : int ( asset )}, ) thumbnail_data = thumbnail_response . json () return Thumbnail ( shared = self . _shared , data = thumbnail_data ) get_asset_thumbnails ( self , assets : List [ roblox . bases . baseasset . BaseAsset ], return_policy : ThumbnailReturnPolicy = < ThumbnailReturnPolicy . place_holder : 'PlaceHolder' > , size : str = '30x30' , format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False ) -> List [ roblox . thumbnails . Thumbnail ] async \u00b6 Returns asset thumbnails for the asset ID passed. Parameters: Name Type Description Default assets List[roblox.bases.baseasset.BaseAsset] Assets you want the thumbnails of. required return_policy ThumbnailReturnPolicy How you want it returns look at enum. <ThumbnailReturnPolicy.place_holder: 'PlaceHolder'> size str size of the image. '30x30' format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[roblox.thumbnails.Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_asset_thumbnails ( self , assets : List [ BaseAsset ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , # TODO MAKE SIZE ENUM size : str = \"30x30\" , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns asset thumbnails for the asset ID passed. Arguments: assets: Assets you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/assets\" ), params = { \"assetIds\" : list ( map ( int , assets )), \"returnPolicy\" : return_policy . value , \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] get_badge_icons ( self , badges : List [ roblox . bases . basebadge . BaseBadge ], size : str = '150x150' , format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False ) -> List [ roblox . thumbnails . Thumbnail ] async \u00b6 Returns badge icons for each badge ID passed. Parameters: Name Type Description Default badges List[roblox.bases.basebadge.BaseBadge] Badges you want the thumbnails of. required size str size of the image. '150x150' format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[roblox.thumbnails.Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_badge_icons ( self , badges : List [ BaseBadge ], size : str = \"150x150\" , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns badge icons for each badge ID passed. Arguments: badges: Badges you want the thumbnails of. size: size of the image. format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/badges/icons\" ), params = { \"badgeIds\" : list ( map ( int , badges )), \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] get_gamepass_icons ( self , gamepasses : List [ roblox . bases . basegamepass . BaseGamePass ], size : str = '150x150' , format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False ) -> List [ roblox . thumbnails . Thumbnail ] async \u00b6 Returns gamepass icons for each gamepass ID passed. Parameters: Name Type Description Default gamepasses List[roblox.bases.basegamepass.BaseGamePass] Gamepasses you want the thumbnails of. required size str size of the image. '150x150' format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[roblox.thumbnails.Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_gamepass_icons ( self , gamepasses : List [ BaseGamePass ], # TODO Make size enum size : str = \"150x150\" , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns gamepass icons for each gamepass ID passed. Arguments: gamepasses: Gamepasses you want the thumbnails of. size: size of the image. format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/game-passes\" ), params = { \"gamePassIds\" : list ( map ( int , gamepasses )), \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] get_group_icons ( self , groups : List [ roblox . bases . basegroup . BaseGroup ], size : str = '150x150' , format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False ) -> List [ roblox . thumbnails . Thumbnail ] async \u00b6 Returns icons for each group ID passed. Parameters: Name Type Description Default groups List[roblox.bases.basegroup.BaseGroup] Groups you want the thumbnails of. required size str size of the image. '150x150' format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[roblox.thumbnails.Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_group_icons ( self , groups : List [ BaseGroup ], size : str = \"150x150\" , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns icons for each group ID passed. Arguments: groups: Groups you want the thumbnails of. size: size of the image. format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/groups/icons\" ), params = { \"groupIds\" : list ( map ( int , groups )), \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] get_place_icons ( self , places : List [ roblox . bases . baseplace . BasePlace ], return_policy : ThumbnailReturnPolicy = < ThumbnailReturnPolicy . place_holder : 'PlaceHolder' > , size : str = '50x50' , format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False ) -> List [ roblox . thumbnails . Thumbnail ] async \u00b6 Returns icons for each place ID passed. Parameters: Name Type Description Default places List[roblox.bases.baseplace.BasePlace] Places you want the thumbnails of. required return_policy ThumbnailReturnPolicy How you want it returns look at enum. <ThumbnailReturnPolicy.place_holder: 'PlaceHolder'> size str size of the image. '50x50' format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[roblox.thumbnails.Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_place_icons ( self , places : List [ BasePlace ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : str = \"50x50\" , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns icons for each place ID passed. Arguments: places: Places you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/places/gameicons\" ), params = { \"placeIds\" : list ( map ( int , places )), \"returnPolicy\" : return_policy . value , \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] get_universe_icons ( self , universes : List [ roblox . bases . baseuniverse . BaseUniverse ], return_policy : ThumbnailReturnPolicy = < ThumbnailReturnPolicy . place_holder : 'PlaceHolder' > , size : str = '50x50' , format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False ) -> List [ roblox . thumbnails . Thumbnail ] async \u00b6 Returns universe icons for each universe ID passed. Parameters: Name Type Description Default universes List[roblox.bases.baseuniverse.BaseUniverse] Universes you want the thumbnails of. required return_policy ThumbnailReturnPolicy How you want it returns look at enum. <ThumbnailReturnPolicy.place_holder: 'PlaceHolder'> size str size of the image. '50x50' format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[roblox.thumbnails.Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_universe_icons ( self , universes : List [ BaseUniverse ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : str = \"50x50\" , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns universe icons for each universe ID passed. Arguments: universes: Universes you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/games/icons\" ), params = { \"universeIds\" : list ( map ( int , universes )), \"returnPolicy\" : return_policy . value , \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] get_universe_thumbnails ( self , universes : List [ roblox . bases . baseuniverse . BaseUniverse ], size : str = '768x432' , format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False , count_per_universe : int = None , defaults : bool = None ) -> List [ roblox . thumbnails . UniverseThumbnails ] async \u00b6 Returns universe thumbnails for each universe ID passed. Parameters: Name Type Description Default universes List[roblox.bases.baseuniverse.BaseUniverse] Universes you want the thumbnails of. required size str size of the image. '768x432' format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> count_per_universe int Unknown. None is_circular bool if the image is a circle yes or no. False defaults bool Whether to return default thumbnails. None Returns: Type Description List[roblox.thumbnails.UniverseThumbnails] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_universe_thumbnails ( self , universes : List [ BaseUniverse ], size : str = \"768x432\" , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , count_per_universe : int = None , defaults : bool = None , ) -> List [ UniverseThumbnails ]: \"\"\" Returns universe thumbnails for each universe ID passed. Arguments: universes: Universes you want the thumbnails of. size: size of the image. format: Format of the image. count_per_universe: Unknown. is_circular: if the image is a circle yes or no. defaults: Whether to return default thumbnails. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/games/multiget/thumbnails\" ), params = { \"universeIds\" : list ( map ( int , universes )), \"countPerUniverse\" : count_per_universe , \"defaults\" : defaults , \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ UniverseThumbnails ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] get_user_avatar_3d ( self , user : BaseUser ) -> Thumbnail async \u00b6 Returns the user's thumbnail in 3d. TODO: Add special 3d features Parameters: Name Type Description Default user BaseUser User you want the 3d thumbnail of. required Returns: Type Description Thumbnail A Thumbnail. Source code in roblox/thumbnails.py async def get_user_avatar_3d ( self , user : BaseUser ) -> Thumbnail : \"\"\" Returns the user's thumbnail in 3d. TODO: Add special 3d features Arguments: user: User you want the 3d thumbnail of. Returns: A Thumbnail. \"\"\" thumbnail_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/users/avatar-3d\" ), params = { \"userId\" : int ( user )}, ) thumbnail_data = thumbnail_response . json () return Thumbnail ( shared = self . _shared , data = thumbnail_data ) get_user_avatars ( self , users : List [ roblox . bases . baseuser . BaseUser ], type : AvatarThumbnailType = < AvatarThumbnailType . full_body : 1 > , size : str = None , format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False ) -> List [ roblox . thumbnails . Thumbnail ] async \u00b6 Returns avatars for each user ID passed. Parameters: Name Type Description Default users List[roblox.bases.baseuser.BaseUser] Id of the users you want the thumbnails of. required type AvatarThumbnailType Type of avatar thumbnail you want look at enum. <AvatarThumbnailType.full_body: 1> size str size of the image. None format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[roblox.thumbnails.Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_user_avatars ( self , users : List [ BaseUser ], type : AvatarThumbnailType = AvatarThumbnailType . full_body , size : str = None , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns avatars for each user ID passed. Arguments: users: Id of the users you want the thumbnails of. type: Type of avatar thumbnail you want look at enum. size: size of the image. format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" uri : str if type == AvatarThumbnailType . full_body : uri = \"avatar\" size = size or \"30x30\" elif type == AvatarThumbnailType . bust : uri = \"avatar-bust\" size = size or \"48x48\" elif type == AvatarThumbnailType . headshot : uri = \"avatar-headshot\" size = size or \"48x48\" else : raise ValueError ( \"Avatar type is invalid.\" ) thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , f \"v1/users/ { uri } \" ), params = { \"userIds\" : list ( map ( int , users )), \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] ThumbnailReturnPolicy ( Enum ) \u00b6 The return policy for place/universe thumbnails. auto_generated \u00b6 force_auto_generated \u00b6 place_holder \u00b6 ThumbnailState ( Enum ) \u00b6 The current state of the thumbnail. blocked \u00b6 completed \u00b6 error \u00b6 in_review \u00b6 moderated \u00b6 pending \u00b6 UniverseThumbnails \u00b6 Represents a universe's thumbnails as returned by https://thumbnails.roblox.com/v1/games/multiget/thumbnails . Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. _data dict The data form the request. universe_id int The id of the target of the image. error Optional[str] The errors you got. thumbnails List[Thumbnail] List of thumbnails. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject Shared object. required data dict The data form the request. required Source code in roblox/thumbnails.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: Shared object. data: The data form the request. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data # todo add base universe maby self . universe_id : int = data [ \"universeId\" ] self . error : Optional [ str ] = data [ \"error\" ] self . thumbnails : List [ Thumbnail ] = [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in data [ \"thumbnails\" ] ]","title":"thumbnails"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails","text":"Contains objects related to Roblox thumbnails.","title":"thumbnails"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.AvatarThumbnailType","text":"Type of avatar thumbnail.","title":"AvatarThumbnailType"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.AvatarThumbnailType.bust","text":"","title":"bust"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.AvatarThumbnailType.full_body","text":"","title":"full_body"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.AvatarThumbnailType.headshot","text":"","title":"headshot"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.Thumbnail","text":"Represents a Roblox thumbnail as returned by almost all endpoints on https://thumbnails.roblox.com/ . Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. _data dict The data form the request. target_id int The id of the target of the image. state ThumbnailState The current state of the image. image_url Optional[str] Url of the image.","title":"Thumbnail"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.Thumbnail.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject Shared object. required data dict The data form the request. required Source code in roblox/thumbnails.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: Shared object. data: The data form the request. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . target_id : int = data [ \"targetId\" ] self . state : ThumbnailState = ThumbnailState ( data [ \"state\" ]) self . image_url : Optional [ str ] = data [ \"imageUrl\" ]","title":"__init__()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.Thumbnail.__repr__","text":"Source code in roblox/thumbnails.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } target_id= { self . target_id } name= { self . state !r} \" \\ f \"image_url= { self . image_url !r} >\"","title":"__repr__()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.Thumbnail.get_3d_data","text":"Generates 3D thumbnail data for this endpoint. Source code in roblox/thumbnails.py async def get_3d_data ( self ): \"\"\" Generates 3D thumbnail data for this endpoint. \"\"\" threed_response = await self . _shared . requests . get ( url = self . image_url ) threed_data = threed_response . json () return ThreeDThumbnail ( shared = self . _shared , data = threed_data )","title":"get_3d_data()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailFormat","text":"Format returned by the endpoint.","title":"ThumbnailFormat"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailFormat.jpeg","text":"","title":"jpeg"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailFormat.png","text":"","title":"png"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider","text":"The ThumbnailProvider that provides multiple functions for generating user thumbnails. Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates.","title":"ThumbnailProvider"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject Shared object. required Source code in roblox/thumbnails.py def __init__ ( self , shared : ClientSharedObject ): \"\"\" Arguments: shared: Shared object. \"\"\" self . _shared : ClientSharedObject = shared","title":"__init__()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_asset_thumbnail_3d","text":"Returns a 3d asset thumbnail for the user ID passed. Parameters: Name Type Description Default asset BaseAsset Asset you want the thumbnails of. required Returns: Type Description Thumbnail A Thumbnail. Source code in roblox/thumbnails.py async def get_asset_thumbnail_3d ( self , asset : BaseAsset ) -> Thumbnail : \"\"\" Returns a 3d asset thumbnail for the user ID passed. Arguments: asset: Asset you want the thumbnails of. Returns: A Thumbnail. \"\"\" thumbnail_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/assets-thumbnail-3d\" ), params = { \"assetId\" : int ( asset )}, ) thumbnail_data = thumbnail_response . json () return Thumbnail ( shared = self . _shared , data = thumbnail_data )","title":"get_asset_thumbnail_3d()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_asset_thumbnails","text":"Returns asset thumbnails for the asset ID passed. Parameters: Name Type Description Default assets List[roblox.bases.baseasset.BaseAsset] Assets you want the thumbnails of. required return_policy ThumbnailReturnPolicy How you want it returns look at enum. <ThumbnailReturnPolicy.place_holder: 'PlaceHolder'> size str size of the image. '30x30' format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[roblox.thumbnails.Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_asset_thumbnails ( self , assets : List [ BaseAsset ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , # TODO MAKE SIZE ENUM size : str = \"30x30\" , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns asset thumbnails for the asset ID passed. Arguments: assets: Assets you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/assets\" ), params = { \"assetIds\" : list ( map ( int , assets )), \"returnPolicy\" : return_policy . value , \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_asset_thumbnails()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_badge_icons","text":"Returns badge icons for each badge ID passed. Parameters: Name Type Description Default badges List[roblox.bases.basebadge.BaseBadge] Badges you want the thumbnails of. required size str size of the image. '150x150' format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[roblox.thumbnails.Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_badge_icons ( self , badges : List [ BaseBadge ], size : str = \"150x150\" , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns badge icons for each badge ID passed. Arguments: badges: Badges you want the thumbnails of. size: size of the image. format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/badges/icons\" ), params = { \"badgeIds\" : list ( map ( int , badges )), \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_badge_icons()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_gamepass_icons","text":"Returns gamepass icons for each gamepass ID passed. Parameters: Name Type Description Default gamepasses List[roblox.bases.basegamepass.BaseGamePass] Gamepasses you want the thumbnails of. required size str size of the image. '150x150' format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[roblox.thumbnails.Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_gamepass_icons ( self , gamepasses : List [ BaseGamePass ], # TODO Make size enum size : str = \"150x150\" , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns gamepass icons for each gamepass ID passed. Arguments: gamepasses: Gamepasses you want the thumbnails of. size: size of the image. format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/game-passes\" ), params = { \"gamePassIds\" : list ( map ( int , gamepasses )), \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_gamepass_icons()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_group_icons","text":"Returns icons for each group ID passed. Parameters: Name Type Description Default groups List[roblox.bases.basegroup.BaseGroup] Groups you want the thumbnails of. required size str size of the image. '150x150' format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[roblox.thumbnails.Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_group_icons ( self , groups : List [ BaseGroup ], size : str = \"150x150\" , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns icons for each group ID passed. Arguments: groups: Groups you want the thumbnails of. size: size of the image. format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/groups/icons\" ), params = { \"groupIds\" : list ( map ( int , groups )), \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_group_icons()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_place_icons","text":"Returns icons for each place ID passed. Parameters: Name Type Description Default places List[roblox.bases.baseplace.BasePlace] Places you want the thumbnails of. required return_policy ThumbnailReturnPolicy How you want it returns look at enum. <ThumbnailReturnPolicy.place_holder: 'PlaceHolder'> size str size of the image. '50x50' format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[roblox.thumbnails.Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_place_icons ( self , places : List [ BasePlace ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : str = \"50x50\" , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns icons for each place ID passed. Arguments: places: Places you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/places/gameicons\" ), params = { \"placeIds\" : list ( map ( int , places )), \"returnPolicy\" : return_policy . value , \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_place_icons()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_universe_icons","text":"Returns universe icons for each universe ID passed. Parameters: Name Type Description Default universes List[roblox.bases.baseuniverse.BaseUniverse] Universes you want the thumbnails of. required return_policy ThumbnailReturnPolicy How you want it returns look at enum. <ThumbnailReturnPolicy.place_holder: 'PlaceHolder'> size str size of the image. '50x50' format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[roblox.thumbnails.Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_universe_icons ( self , universes : List [ BaseUniverse ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : str = \"50x50\" , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns universe icons for each universe ID passed. Arguments: universes: Universes you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/games/icons\" ), params = { \"universeIds\" : list ( map ( int , universes )), \"returnPolicy\" : return_policy . value , \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_universe_icons()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_universe_thumbnails","text":"Returns universe thumbnails for each universe ID passed. Parameters: Name Type Description Default universes List[roblox.bases.baseuniverse.BaseUniverse] Universes you want the thumbnails of. required size str size of the image. '768x432' format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> count_per_universe int Unknown. None is_circular bool if the image is a circle yes or no. False defaults bool Whether to return default thumbnails. None Returns: Type Description List[roblox.thumbnails.UniverseThumbnails] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_universe_thumbnails ( self , universes : List [ BaseUniverse ], size : str = \"768x432\" , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , count_per_universe : int = None , defaults : bool = None , ) -> List [ UniverseThumbnails ]: \"\"\" Returns universe thumbnails for each universe ID passed. Arguments: universes: Universes you want the thumbnails of. size: size of the image. format: Format of the image. count_per_universe: Unknown. is_circular: if the image is a circle yes or no. defaults: Whether to return default thumbnails. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/games/multiget/thumbnails\" ), params = { \"universeIds\" : list ( map ( int , universes )), \"countPerUniverse\" : count_per_universe , \"defaults\" : defaults , \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ UniverseThumbnails ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_universe_thumbnails()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_user_avatar_3d","text":"Returns the user's thumbnail in 3d. TODO: Add special 3d features Parameters: Name Type Description Default user BaseUser User you want the 3d thumbnail of. required Returns: Type Description Thumbnail A Thumbnail. Source code in roblox/thumbnails.py async def get_user_avatar_3d ( self , user : BaseUser ) -> Thumbnail : \"\"\" Returns the user's thumbnail in 3d. TODO: Add special 3d features Arguments: user: User you want the 3d thumbnail of. Returns: A Thumbnail. \"\"\" thumbnail_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , \"v1/users/avatar-3d\" ), params = { \"userId\" : int ( user )}, ) thumbnail_data = thumbnail_response . json () return Thumbnail ( shared = self . _shared , data = thumbnail_data )","title":"get_user_avatar_3d()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_user_avatars","text":"Returns avatars for each user ID passed. Parameters: Name Type Description Default users List[roblox.bases.baseuser.BaseUser] Id of the users you want the thumbnails of. required type AvatarThumbnailType Type of avatar thumbnail you want look at enum. <AvatarThumbnailType.full_body: 1> size str size of the image. None format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[roblox.thumbnails.Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_user_avatars ( self , users : List [ BaseUser ], type : AvatarThumbnailType = AvatarThumbnailType . full_body , size : str = None , format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns avatars for each user ID passed. Arguments: users: Id of the users you want the thumbnails of. type: Type of avatar thumbnail you want look at enum. size: size of the image. format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" uri : str if type == AvatarThumbnailType . full_body : uri = \"avatar\" size = size or \"30x30\" elif type == AvatarThumbnailType . bust : uri = \"avatar-bust\" size = size or \"48x48\" elif type == AvatarThumbnailType . headshot : uri = \"avatar-headshot\" size = size or \"48x48\" else : raise ValueError ( \"Avatar type is invalid.\" ) thumbnails_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"thumbnails\" , f \"v1/users/ { uri } \" ), params = { \"userIds\" : list ( map ( int , users )), \"size\" : size , \"format\" : format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_user_avatars()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailReturnPolicy","text":"The return policy for place/universe thumbnails.","title":"ThumbnailReturnPolicy"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailReturnPolicy.auto_generated","text":"","title":"auto_generated"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailReturnPolicy.force_auto_generated","text":"","title":"force_auto_generated"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailReturnPolicy.place_holder","text":"","title":"place_holder"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailState","text":"The current state of the thumbnail.","title":"ThumbnailState"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailState.blocked","text":"","title":"blocked"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailState.completed","text":"","title":"completed"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailState.error","text":"","title":"error"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailState.in_review","text":"","title":"in_review"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailState.moderated","text":"","title":"moderated"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailState.pending","text":"","title":"pending"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.UniverseThumbnails","text":"Represents a universe's thumbnails as returned by https://thumbnails.roblox.com/v1/games/multiget/thumbnails . Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. _data dict The data form the request. universe_id int The id of the target of the image. error Optional[str] The errors you got. thumbnails List[Thumbnail] List of thumbnails.","title":"UniverseThumbnails"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.UniverseThumbnails.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject Shared object. required data dict The data form the request. required Source code in roblox/thumbnails.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: Shared object. data: The data form the request. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data # todo add base universe maby self . universe_id : int = data [ \"universeId\" ] self . error : Optional [ str ] = data [ \"error\" ] self . thumbnails : List [ Thumbnail ] = [ Thumbnail ( shared = self . _shared , data = thumbnail_data ) for thumbnail_data in data [ \"thumbnails\" ] ]","title":"__init__()"},{"location":"reference/roblox/universes/","text":"roblox.universes \u00b6 This module contains classes intended to parse and deal with data from Roblox universe information endpoints. Universe ( BaseUniverse ) \u00b6 Represents the response data of https://games.roblox.com/v1/games . Attributes: Name Type Description _data dict The data we get back from the endpoint. _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int The ID of this specific universe root_place BaseUniverse The thumbnail provider object. name str The delivery provider object. description str The description of the game. creator_type Enum Is the creator a group or a user. creator Union[PartialUser, UniversePartialGroup] creator information. price Optional[int] how much you need to pay to play the game. allowed_gear_genres List[str] Unknown allowed_gear_categories List[str] Unknown is_genre_enforced bool Unknown copying_allowed bool are you allowed to copy the game. playing int amount of people currently playing the game. visits int amount of visits to the game. max_players int the maximum amount of players ber server. created datetime when the game was created. updated datetime when the game as been updated for the last time. studio_access_to_apis_allowed bool does studio have access to the apis. create_vip_servers_allowed bool can you create a vip server? universe_avatar_type UniverseAvatarType type of avatars in the game. genre UniverseGenre what genre the game is. is_all_genre bool if it is all genres? is_favorited_by_user bool if the authenticated user has it favorited. favorited_count int the total amount of people who favorited the game. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The universe data. required Source code in roblox/universes.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The universe data. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . id : int = data [ \"id\" ] super () . __init__ ( shared = shared , universe_id = self . id ) self . root_place : BaseUniverse = BaseUniverse ( shared = shared , universe_id = data [ \"rootPlaceId\" ]) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . creator_type : Enum = CreatorType ( data [ \"creator\" ][ \"type\" ]) # isRNVAccount is not part of PartialUser, UniversePartialGroup self . creator : Union [ PartialUser , UniversePartialGroup ] if self . creator_type == CreatorType . group : self . creator = UniversePartialGroup ( shared , data [ \"creator\" ]) elif self . creator_type == CreatorType . user : self . creator = PartialUser ( shared , data [ \"creator\" ]) self . price : Optional [ int ] = data [ \"price\" ] self . allowed_gear_genres : List [ str ] = data [ \"allowedGearGenres\" ] self . allowed_gear_categories : List [ str ] = data [ \"allowedGearCategories\" ] self . is_genre_enforced : bool = data [ \"isGenreEnforced\" ] self . copying_allowed : bool = data [ \"copyingAllowed\" ] self . playing : int = data [ \"playing\" ] self . visits : int = data [ \"visits\" ] self . max_players : int = data [ \"maxPlayers\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . studio_access_to_apis_allowed : bool = data [ \"studioAccessToApisAllowed\" ] self . create_vip_servers_allowed : bool = data [ \"createVipServersAllowed\" ] self . universe_avatar_type : UniverseAvatarType = UniverseAvatarType ( data [ \"universeAvatarType\" ]) self . genre : UniverseGenre = UniverseGenre ( data [ \"genre\" ]) self . is_all_genre : bool = data [ \"isAllGenre\" ] # gameRating seems to be null across all games, so I omitted it from this class. self . is_favorited_by_user : bool = data [ \"isFavoritedByUser\" ] self . favorited_count : int = data [ \"favoritedCount\" ] __repr__ ( self ) special \u00b6 Source code in roblox/universes.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} creator= { self . creator } >\" UniverseAvatarType ( Enum ) \u00b6 The current avatar type of the universe. R15 \u00b6 R6 \u00b6 player_choice \u00b6 UniverseGenre ( Enum ) \u00b6 The universe's genre. adventure \u00b6 all \u00b6 building \u00b6 comedy \u00b6 fighting \u00b6 fps \u00b6 horror \u00b6 medieval \u00b6 military \u00b6 naval \u00b6 rpg \u00b6 sci_fi \u00b6 sports \u00b6 town_and_city \u00b6 western \u00b6","title":"universes"},{"location":"reference/roblox/universes/#roblox.universes","text":"This module contains classes intended to parse and deal with data from Roblox universe information endpoints.","title":"universes"},{"location":"reference/roblox/universes/#roblox.universes.Universe","text":"Represents the response data of https://games.roblox.com/v1/games . Attributes: Name Type Description _data dict The data we get back from the endpoint. _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int The ID of this specific universe root_place BaseUniverse The thumbnail provider object. name str The delivery provider object. description str The description of the game. creator_type Enum Is the creator a group or a user. creator Union[PartialUser, UniversePartialGroup] creator information. price Optional[int] how much you need to pay to play the game. allowed_gear_genres List[str] Unknown allowed_gear_categories List[str] Unknown is_genre_enforced bool Unknown copying_allowed bool are you allowed to copy the game. playing int amount of people currently playing the game. visits int amount of visits to the game. max_players int the maximum amount of players ber server. created datetime when the game was created. updated datetime when the game as been updated for the last time. studio_access_to_apis_allowed bool does studio have access to the apis. create_vip_servers_allowed bool can you create a vip server? universe_avatar_type UniverseAvatarType type of avatars in the game. genre UniverseGenre what genre the game is. is_all_genre bool if it is all genres? is_favorited_by_user bool if the authenticated user has it favorited. favorited_count int the total amount of people who favorited the game.","title":"Universe"},{"location":"reference/roblox/universes/#roblox.universes.Universe.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The universe data. required Source code in roblox/universes.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The universe data. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . id : int = data [ \"id\" ] super () . __init__ ( shared = shared , universe_id = self . id ) self . root_place : BaseUniverse = BaseUniverse ( shared = shared , universe_id = data [ \"rootPlaceId\" ]) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . creator_type : Enum = CreatorType ( data [ \"creator\" ][ \"type\" ]) # isRNVAccount is not part of PartialUser, UniversePartialGroup self . creator : Union [ PartialUser , UniversePartialGroup ] if self . creator_type == CreatorType . group : self . creator = UniversePartialGroup ( shared , data [ \"creator\" ]) elif self . creator_type == CreatorType . user : self . creator = PartialUser ( shared , data [ \"creator\" ]) self . price : Optional [ int ] = data [ \"price\" ] self . allowed_gear_genres : List [ str ] = data [ \"allowedGearGenres\" ] self . allowed_gear_categories : List [ str ] = data [ \"allowedGearCategories\" ] self . is_genre_enforced : bool = data [ \"isGenreEnforced\" ] self . copying_allowed : bool = data [ \"copyingAllowed\" ] self . playing : int = data [ \"playing\" ] self . visits : int = data [ \"visits\" ] self . max_players : int = data [ \"maxPlayers\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . studio_access_to_apis_allowed : bool = data [ \"studioAccessToApisAllowed\" ] self . create_vip_servers_allowed : bool = data [ \"createVipServersAllowed\" ] self . universe_avatar_type : UniverseAvatarType = UniverseAvatarType ( data [ \"universeAvatarType\" ]) self . genre : UniverseGenre = UniverseGenre ( data [ \"genre\" ]) self . is_all_genre : bool = data [ \"isAllGenre\" ] # gameRating seems to be null across all games, so I omitted it from this class. self . is_favorited_by_user : bool = data [ \"isFavoritedByUser\" ] self . favorited_count : int = data [ \"favoritedCount\" ]","title":"__init__()"},{"location":"reference/roblox/universes/#roblox.universes.Universe.__repr__","text":"Source code in roblox/universes.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} creator= { self . creator } >\"","title":"__repr__()"},{"location":"reference/roblox/universes/#roblox.universes.UniverseAvatarType","text":"The current avatar type of the universe.","title":"UniverseAvatarType"},{"location":"reference/roblox/universes/#roblox.universes.UniverseAvatarType.R15","text":"","title":"R15"},{"location":"reference/roblox/universes/#roblox.universes.UniverseAvatarType.R6","text":"","title":"R6"},{"location":"reference/roblox/universes/#roblox.universes.UniverseAvatarType.player_choice","text":"","title":"player_choice"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre","text":"The universe's genre.","title":"UniverseGenre"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.adventure","text":"","title":"adventure"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.all","text":"","title":"all"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.building","text":"","title":"building"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.comedy","text":"","title":"comedy"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.fighting","text":"","title":"fighting"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.fps","text":"","title":"fps"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.horror","text":"","title":"horror"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.medieval","text":"","title":"medieval"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.military","text":"","title":"military"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.naval","text":"","title":"naval"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.rpg","text":"","title":"rpg"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.sci_fi","text":"","title":"sci_fi"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.sports","text":"","title":"sports"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.town_and_city","text":"","title":"town_and_city"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.western","text":"","title":"western"},{"location":"reference/roblox/users/","text":"roblox.users \u00b6 This module contains classes intended to parse and deal with data from Roblox user information endpoints. User ( BaseUser ) \u00b6 Represents a single conversation. Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int The id of the current user name str The name of the current user display_name str The display name of the current user external_app_display_name str The external app display name of the current user is_banned bool If the user is banned description str The description the current user wrote for himself created datetime When the user created his account __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject Shared object. required data dict The data form the request. required Source code in roblox/users.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: Shared object. data: The data form the request. \"\"\" super () . __init__ ( shared = shared , user_id = data [ \"id\" ]) self . _shared : ClientSharedObject = shared self . _data : dict = data self . name : str = data [ \"name\" ] self . display_name : str = data [ \"displayName\" ] self . external_app_display_name : str = data [ \"externalAppDisplayName\" ] self . id : int = data [ \"id\" ] self . is_banned : bool = data [ \"isBanned\" ] self . description : str = data [ \"description\" ] self . created : datetime = parse ( data [ \"created\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/users.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} display_name= { self . display_name !r} >\"","title":"users"},{"location":"reference/roblox/users/#roblox.users","text":"This module contains classes intended to parse and deal with data from Roblox user information endpoints.","title":"users"},{"location":"reference/roblox/users/#roblox.users.User","text":"Represents a single conversation. Attributes: Name Type Description _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int The id of the current user name str The name of the current user display_name str The display name of the current user external_app_display_name str The external app display name of the current user is_banned bool If the user is banned description str The description the current user wrote for himself created datetime When the user created his account","title":"User"},{"location":"reference/roblox/users/#roblox.users.User.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject Shared object. required data dict The data form the request. required Source code in roblox/users.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: Shared object. data: The data form the request. \"\"\" super () . __init__ ( shared = shared , user_id = data [ \"id\" ]) self . _shared : ClientSharedObject = shared self . _data : dict = data self . name : str = data [ \"name\" ] self . display_name : str = data [ \"displayName\" ] self . external_app_display_name : str = data [ \"externalAppDisplayName\" ] self . id : int = data [ \"id\" ] self . is_banned : bool = data [ \"isBanned\" ] self . description : str = data [ \"description\" ] self . created : datetime = parse ( data [ \"created\" ])","title":"__init__()"},{"location":"reference/roblox/users/#roblox.users.User.__repr__","text":"Source code in roblox/users.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} display_name= { self . display_name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/wall/","text":"roblox.wall \u00b6 Contains objects related to Roblox group walls. WallPost ( WallPostRelationship ) \u00b6 Represents a post on a Roblox group wall. __init__ ( self , shared : ClientSharedObject , data : dict , group : BaseGroup ) special \u00b6 Source code in roblox/wall.py def __init__ ( self , shared : ClientSharedObject , data : dict , group : BaseGroup ): self . _shared : ClientSharedObject = shared self . id : int = data [ \"id\" ] super () . __init__ ( shared = self . _shared , post_id = self . id , group = group ) self . poster : Optional [ Member ] = data [ \"poster\" ] and Member ( shared = self . _shared , data = data [ \"poster\" ], group = self . group ) or None self . body : str = data [ \"body\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/wall.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } body= { self . body !r} group= { self . group } >\" WallPostRelationship \u00b6 Represents a Roblox wall post ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The post ID. __init__ ( self , shared : ClientSharedObject , post_id : int , group : Union [ BaseGroup , int ]) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required post_id int The post ID. required Source code in roblox/wall.py def __init__ ( self , shared : ClientSharedObject , post_id : int , group : Union [ BaseGroup , int ]): \"\"\" Arguments: shared: The ClientSharedObject. post_id: The post ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = post_id self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( shared = self . _shared , group_id = group ) else : self . group = group __repr__ ( self ) special \u00b6 Source code in roblox/wall.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } group= { self . group } >\" delete ( self ) async \u00b6 Deletes this wall post. Source code in roblox/wall.py async def delete ( self ): \"\"\" Deletes this wall post. \"\"\" await self . _shared . requests . delete ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . group . id } /wall/posts/ { self . id } \" ) )","title":"wall"},{"location":"reference/roblox/wall/#roblox.wall","text":"Contains objects related to Roblox group walls.","title":"wall"},{"location":"reference/roblox/wall/#roblox.wall.WallPost","text":"Represents a post on a Roblox group wall.","title":"WallPost"},{"location":"reference/roblox/wall/#roblox.wall.WallPost.__init__","text":"Source code in roblox/wall.py def __init__ ( self , shared : ClientSharedObject , data : dict , group : BaseGroup ): self . _shared : ClientSharedObject = shared self . id : int = data [ \"id\" ] super () . __init__ ( shared = self . _shared , post_id = self . id , group = group ) self . poster : Optional [ Member ] = data [ \"poster\" ] and Member ( shared = self . _shared , data = data [ \"poster\" ], group = self . group ) or None self . body : str = data [ \"body\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ])","title":"__init__()"},{"location":"reference/roblox/wall/#roblox.wall.WallPost.__repr__","text":"Source code in roblox/wall.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } body= { self . body !r} group= { self . group } >\"","title":"__repr__()"},{"location":"reference/roblox/wall/#roblox.wall.WallPostRelationship","text":"Represents a Roblox wall post ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The post ID.","title":"WallPostRelationship"},{"location":"reference/roblox/wall/#roblox.wall.WallPostRelationship.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required post_id int The post ID. required Source code in roblox/wall.py def __init__ ( self , shared : ClientSharedObject , post_id : int , group : Union [ BaseGroup , int ]): \"\"\" Arguments: shared: The ClientSharedObject. post_id: The post ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = post_id self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( shared = self . _shared , group_id = group ) else : self . group = group","title":"__init__()"},{"location":"reference/roblox/wall/#roblox.wall.WallPostRelationship.__repr__","text":"Source code in roblox/wall.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } group= { self . group } >\"","title":"__repr__()"},{"location":"reference/roblox/wall/#roblox.wall.WallPostRelationship.delete","text":"Deletes this wall post. Source code in roblox/wall.py async def delete ( self ): \"\"\" Deletes this wall post. \"\"\" await self . _shared . requests . delete ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . group . id } /wall/posts/ { self . id } \" ) )","title":"delete()"},{"location":"reference/roblox/bases/__init__/","text":"roblox.bases.__init__ special \u00b6 Contains base objects representing IDs on Roblox. As IDs represent objects on Roblox, you only need the ID of something to send requests for them. These bases represent one of those IDs.","title":"__init__"},{"location":"reference/roblox/bases/__init__/#roblox.bases.__init__","text":"Contains base objects representing IDs on Roblox. As IDs represent objects on Roblox, you only need the ID of something to send requests for them. These bases represent one of those IDs.","title":"__init__"},{"location":"reference/roblox/bases/baseasset/","text":"roblox.bases.baseasset \u00b6 This file contains the BaseAsset object, which represents a Roblox asset ID. BaseAsset ( BaseItem ) \u00b6 Represents a Roblox asset ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The asset ID. __init__ ( self , shared : ClientSharedObject , asset_id : int ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required asset_id int The asset ID. required Source code in roblox/bases/baseasset.py def __init__ ( self , shared : ClientSharedObject , asset_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. asset_id: The asset ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = asset_id get_resale_data ( self ) -> AssetResaleData async \u00b6 Gets the asset's resale data. Returns: The asset's resale data. Source code in roblox/bases/baseasset.py async def get_resale_data ( self ) -> AssetResaleData : \"\"\" Gets the asset's resale data. Returns: The asset's resale data. \"\"\" resale_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"economy\" , f \"v1/assets/ { self . id } /resale-data\" ) ) resale_data = resale_response . json () return AssetResaleData ( data = resale_data ) to_asset ( self ) -> EconomyAsset async \u00b6 Returns the object converted to an EconomyAsset. Returns: Type Description EconomyAsset An EconomyAsset. Source code in roblox/bases/baseasset.py async def to_asset ( self ) -> EconomyAsset : \"\"\" Returns the object converted to an EconomyAsset. Returns: An EconomyAsset. \"\"\" return await self . _shared . client . get_asset ( self . id )","title":"baseasset"},{"location":"reference/roblox/bases/baseasset/#roblox.bases.baseasset","text":"This file contains the BaseAsset object, which represents a Roblox asset ID.","title":"baseasset"},{"location":"reference/roblox/bases/baseasset/#roblox.bases.baseasset.BaseAsset","text":"Represents a Roblox asset ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The asset ID.","title":"BaseAsset"},{"location":"reference/roblox/bases/baseasset/#roblox.bases.baseasset.BaseAsset.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required asset_id int The asset ID. required Source code in roblox/bases/baseasset.py def __init__ ( self , shared : ClientSharedObject , asset_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. asset_id: The asset ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = asset_id","title":"__init__()"},{"location":"reference/roblox/bases/baseasset/#roblox.bases.baseasset.BaseAsset.get_resale_data","text":"Gets the asset's resale data. Returns: The asset's resale data. Source code in roblox/bases/baseasset.py async def get_resale_data ( self ) -> AssetResaleData : \"\"\" Gets the asset's resale data. Returns: The asset's resale data. \"\"\" resale_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"economy\" , f \"v1/assets/ { self . id } /resale-data\" ) ) resale_data = resale_response . json () return AssetResaleData ( data = resale_data )","title":"get_resale_data()"},{"location":"reference/roblox/bases/baseasset/#roblox.bases.baseasset.BaseAsset.to_asset","text":"Returns the object converted to an EconomyAsset. Returns: Type Description EconomyAsset An EconomyAsset. Source code in roblox/bases/baseasset.py async def to_asset ( self ) -> EconomyAsset : \"\"\" Returns the object converted to an EconomyAsset. Returns: An EconomyAsset. \"\"\" return await self . _shared . client . get_asset ( self . id )","title":"to_asset()"},{"location":"reference/roblox/bases/basebadge/","text":"roblox.bases.basebadge \u00b6 This file contains the BaseBadge object, which represents a Roblox badge ID. BaseBadge ( BaseItem ) \u00b6 Represents a Roblox badge ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The badge ID. __init__ ( self , shared : ClientSharedObject , badge_id : int ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required badge_id int The badge ID. required Source code in roblox/bases/basebadge.py def __init__ ( self , shared : ClientSharedObject , badge_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. badge_id: The badge ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = badge_id","title":"basebadge"},{"location":"reference/roblox/bases/basebadge/#roblox.bases.basebadge","text":"This file contains the BaseBadge object, which represents a Roblox badge ID.","title":"basebadge"},{"location":"reference/roblox/bases/basebadge/#roblox.bases.basebadge.BaseBadge","text":"Represents a Roblox badge ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The badge ID.","title":"BaseBadge"},{"location":"reference/roblox/bases/basebadge/#roblox.bases.basebadge.BaseBadge.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required badge_id int The badge ID. required Source code in roblox/bases/basebadge.py def __init__ ( self , shared : ClientSharedObject , badge_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. badge_id: The badge ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = badge_id","title":"__init__()"},{"location":"reference/roblox/bases/baseconversation/","text":"roblox.bases.baseconversation \u00b6 This file contains the BaseConversation object, which represents a Roblox conversation ID. BaseConversation ( BaseItem ) \u00b6 Represents a Roblox Conversation ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The conversation ID. __init__ ( self , shared : ClientSharedObject , conversation_id : int ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required conversation_id int The Conversation ID. required Source code in roblox/bases/baseconversation.py def __init__ ( self , shared : ClientSharedObject , conversation_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. conversation_id: The Conversation ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = conversation_id","title":"baseconversation"},{"location":"reference/roblox/bases/baseconversation/#roblox.bases.baseconversation","text":"This file contains the BaseConversation object, which represents a Roblox conversation ID.","title":"baseconversation"},{"location":"reference/roblox/bases/baseconversation/#roblox.bases.baseconversation.BaseConversation","text":"Represents a Roblox Conversation ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The conversation ID.","title":"BaseConversation"},{"location":"reference/roblox/bases/baseconversation/#roblox.bases.baseconversation.BaseConversation.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required conversation_id int The Conversation ID. required Source code in roblox/bases/baseconversation.py def __init__ ( self , shared : ClientSharedObject , conversation_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. conversation_id: The Conversation ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = conversation_id","title":"__init__()"},{"location":"reference/roblox/bases/basegamepass/","text":"roblox.bases.basegamepass \u00b6 This file contains the BaseGamePass object, which represents a Roblox gamepass ID. BaseGamePass ( BaseItem ) \u00b6 Represents a Roblox gamepass ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The gamepass ID. __init__ ( self , shared : ClientSharedObject , gamepass_id : int ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required gamepass_id int The gamepass ID. required Source code in roblox/bases/basegamepass.py def __init__ ( self , shared : ClientSharedObject , gamepass_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. gamepass_id: The gamepass ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = gamepass_id","title":"basegamepass"},{"location":"reference/roblox/bases/basegamepass/#roblox.bases.basegamepass","text":"This file contains the BaseGamePass object, which represents a Roblox gamepass ID.","title":"basegamepass"},{"location":"reference/roblox/bases/basegamepass/#roblox.bases.basegamepass.BaseGamePass","text":"Represents a Roblox gamepass ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The gamepass ID.","title":"BaseGamePass"},{"location":"reference/roblox/bases/basegamepass/#roblox.bases.basegamepass.BaseGamePass.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required gamepass_id int The gamepass ID. required Source code in roblox/bases/basegamepass.py def __init__ ( self , shared : ClientSharedObject , gamepass_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. gamepass_id: The gamepass ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = gamepass_id","title":"__init__()"},{"location":"reference/roblox/bases/basegroup/","text":"roblox.bases.basegroup \u00b6 This file contains the BaseGroup object, which represents a Roblox group ID. It also contains the GroupSettings object, which represents a group's settings. BaseGroup ( BaseItem ) \u00b6 Represents a Roblox group ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. _requests The requests object. id int The group's ID. __init__ ( self , shared : ClientSharedObject , group_id : int ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required group_id int The group's ID. required Source code in roblox/bases/basegroup.py def __init__ ( self , shared : ClientSharedObject , group_id : int ): \"\"\" Parameters: shared: The ClientSharedObject. group_id: The group's ID. \"\"\" self . _shared : ClientSharedObject = shared self . _requests = shared . requests self . id : int = group_id accept_user ( self , user : Union [ int , BaseUser ]) async \u00b6 Accepts a user's request to join this group. Source code in roblox/bases/basegroup.py async def accept_user ( self , user : Union [ int , BaseUser ]): \"\"\" Accepts a user's request to join this group. \"\"\" await self . _shared . requests . post ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) ) decline_user ( self , user : Union [ int , BaseUser ]) async \u00b6 Declines a user's request to join this group. Source code in roblox/bases/basegroup.py async def decline_user ( self , user : Union [ int , BaseUser ]): \"\"\" Declines a user's request to join this group. \"\"\" await self . _shared . requests . delete ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) ) get_join_request ( self , user : Union [ int , BaseUser ]) -> Optional [ JoinRequest ] async \u00b6 Gets a specific user's join request to your group. Returns None if the user does not have an active join request. Source code in roblox/bases/basegroup.py async def get_join_request ( self , user : Union [ int , BaseUser ]) -> Optional [ JoinRequest ]: \"\"\" Gets a specific user's join request to your group. Returns None if the user does not have an active join request. \"\"\" join_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) ) join_data = join_response . json () return join_data and JoinRequest ( shared = self . _shared , data = join_data , group = self ) or None get_join_requests ( self , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > , limit : int = 10 ) -> PageIterator \u00b6 Gets all of this group's join requests. Source code in roblox/bases/basegroup.py def get_join_requests ( self , sort_order : SortOrder = SortOrder . Ascending , limit : int = 10 ) -> PageIterator : \"\"\" Gets all of this group's join requests. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests\" ), sort_order = sort_order , limit = limit , handler = lambda shared , data : JoinRequest ( shared = shared , data = data , group = self ) ) get_member ( self , user : Union [ int , BaseUser ]) -> MemberRelationship \u00b6 Gets a member of a group. Parameters: Name Type Description Default user Union[int, BaseUser] A BaseUser or a User ID. required Source code in roblox/bases/basegroup.py def get_member ( self , user : Union [ int , BaseUser ]) -> MemberRelationship : \"\"\" Gets a member of a group. Arguments: user: A BaseUser or a User ID. Returns: A member. \"\"\" return MemberRelationship ( shared = self . _shared , user = user , group = self ) get_member_by_username ( self , username : str , exclude_banned_users : bool = False ) -> MemberRelationship async \u00b6 Gets a member of a group by username. Parameters: Name Type Description Default username str A Roblox username. required exclude_banned_users bool Whether to exclude banned users from the data. False Source code in roblox/bases/basegroup.py async def get_member_by_username ( self , username : str , exclude_banned_users : bool = False ) -> MemberRelationship : \"\"\" Gets a member of a group by username. Arguments: username: A Roblox username. exclude_banned_users: Whether to exclude banned users from the data. Returns: A member. \"\"\" user : RequestedUsernamePartialUser = await self . _shared . client . get_user_by_username ( username = username , exclude_banned_users = exclude_banned_users , expand = False ) return MemberRelationship ( shared = self . _shared , user = user , group = self ) get_members ( self , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > , limit : int = 10 ) -> PageIterator \u00b6 Gets all members of a group. Parameters: Name Type Description Default sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> limit int Size of each page. 10 Source code in roblox/bases/basegroup.py def get_members ( self , sort_order : SortOrder = SortOrder . Ascending , limit : int = 10 ) -> PageIterator : \"\"\" Gets all members of a group. Arguments: sort_order: Order in which data should be grabbed. limit: Size of each page. Returns: A PageIterator. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users\" ), sort_order = sort_order , limit = limit , handler = lambda shared , data : Member ( shared = shared , data = data , group = self ) ) get_roles ( self ) -> List [ Role ] async \u00b6 Gets all roles of the group. Returns: List of roles. Source code in roblox/bases/basegroup.py async def get_roles ( self ) -> List [ Role ]: \"\"\" Gets all roles of the group. Returns: List of roles. \"\"\" roles_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /roles\" ) ) roles_data = roles_response . json () return [ Role ( shared = self . _shared , data = role_data , group = self ) for role_data in roles_data [ \"roles\" ]] get_settings ( self ) -> GroupSettings async \u00b6 Gets all the settings of the selected group Returns: Type Description GroupSettings GroupSettings. Source code in roblox/bases/basegroup.py async def get_settings ( self ) -> GroupSettings : \"\"\" Gets all the settings of the selected group Returns: GroupSettings. \"\"\" settings_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /settings\" ), ) settings_data = settings_response . json () return GroupSettings ( shared = self . _shared , data = settings_data ) get_wall_post ( self , post_id : int ) -> WallPostRelationship \u00b6 Gets a wall post from an ID. Parameters: Name Type Description Default post_id int A post ID. required Source code in roblox/bases/basegroup.py def get_wall_post ( self , post_id : int ) -> WallPostRelationship : \"\"\" Gets a wall post from an ID. Arguments: post_id: A post ID. Returns: A very basic wall post.. \"\"\" return WallPostRelationship ( shared = self . _shared , post_id = post_id , group = self ) get_wall_posts ( self , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > , limit : int = 10 ) -> PageIterator \u00b6 Gets all members of a group. Parameters: Name Type Description Default sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> limit int How many posts will be returned per page. 10 Source code in roblox/bases/basegroup.py def get_wall_posts ( self , sort_order : SortOrder = SortOrder . Ascending , limit : int = 10 ) -> PageIterator : \"\"\" Gets all members of a group. Arguments: sort_order: Order in which data should be grabbed. limit: How many posts will be returned per page. Returns: A PageIterator. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"groups\" , f \"v2/groups/ { self . id } /wall/posts\" ), sort_order = sort_order , limit = limit , handler = lambda shared , data : WallPost ( shared = shared , data = data , group = self ) ) kick_user ( self , user : BaseUser ) async \u00b6 Kicks a user from a group. Source code in roblox/bases/basegroup.py async def kick_user ( self , user : BaseUser ): \"\"\" Kicks a user from a group. \"\"\" await self . _shared . requests . delete ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users/ { user . id } \" ) ) set_rank ( self , user : BaseUser , rank : int ) -> None async \u00b6 Changes a member's role using a rank number. Parameters: Name Type Description Default user BaseUser The user who's rank will be changed. required rank int The rank number to change to. (1-255) required Source code in roblox/bases/basegroup.py async def set_rank ( self , user : BaseUser , rank : int ) -> None : \"\"\" Changes a member's role using a rank number. Arguments: user: The user who's rank will be changed. rank: The rank number to change to. (1-255) \"\"\" roles = await self . get_roles () role = next (( role for role in roles if role . rank == rank ), None ) if not role : raise InvalidRole ( f \"Role with rank number { rank } does not exist.\" ) await self . set_role ( user , role ) set_role ( self , user : BaseUser , role : BaseRole ) -> None async \u00b6 Sets a users role. Parameters: Name Type Description Default user BaseUser The user who's rank will be changed. required role BaseRole The new role. required Source code in roblox/bases/basegroup.py async def set_role ( self , user : BaseUser , role : BaseRole ) -> None : \"\"\" Sets a users role. Arguments: user: The user who's rank will be changed. role: The new role. \"\"\" await self . _shared . requests . patch ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users/ { user . id } \" ), json = { \"roleId\" : role . id } ) to_group ( self ) -> Group async \u00b6 Expands into a full Group object. Returns: Type Description Group A Group. Source code in roblox/bases/basegroup.py async def to_group ( self ) -> Group : \"\"\" Expands into a full Group object. Returns: A Group. \"\"\" return await self . _shared . client . get_group ( self . id ) update_settings ( self , is_approval_required : Optional [ bool ] = None , is_builders_club_required : Optional [ bool ] = None , are_enemies_allowed : Optional [ bool ] = None , are_group_funds_visible : Optional [ bool ] = None , are_group_games_visible : Optional [ bool ] = None ) -> None async \u00b6 Sets the group settings Parameters: Name Type Description Default is_approval_required Optional[bool] If someone needs to be approve before joining the group None is_builders_club_required Optional[bool] If bundlers club is required to join the group None are_enemies_allowed Optional[bool] Are other groups allowed to send enemy requests to your group? None are_group_funds_visible Optional[bool] Can everyone see your group funds? None are_group_games_visible Optional[bool] Are your group games visible? None Source code in roblox/bases/basegroup.py async def update_settings ( self , is_approval_required : Optional [ bool ] = None , is_builders_club_required : Optional [ bool ] = None , are_enemies_allowed : Optional [ bool ] = None , are_group_funds_visible : Optional [ bool ] = None , are_group_games_visible : Optional [ bool ] = None , ) -> None : \"\"\" Sets the group settings Arguments: is_approval_required: If someone needs to be approve before joining the group is_builders_club_required: If bundlers club is required to join the group are_enemies_allowed: Are other groups allowed to send enemy requests to your group? are_group_funds_visible: Can everyone see your group funds? are_group_games_visible: Are your group games visible? \"\"\" settings_data = { \"isApprovalRequired\" : is_approval_required , \"isBuildersClubRequired\" : is_builders_club_required , \"areEnemiesAllowed\" : are_enemies_allowed , \"areGroupFundsVisible\" : are_group_funds_visible , \"areGroupGamesVisible\" : are_group_games_visible , } await self . _requests . patch ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /settings\" ), json = settings_data ) update_shout ( self , message : str ) -> Optional [ Shout ] async \u00b6 Updates the shout. Parameters: Name Type Description Default message str The new shout message. required Source code in roblox/bases/basegroup.py async def update_shout ( self , message : str ) -> Optional [ Shout ]: \"\"\" Updates the shout. Arguments: message: The new shout message. \"\"\" shout_response = await self . _requests . patch ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /status\" ), json = { \"message\" : message } ) shout_data = shout_response . json () new_shout : Optional [ Shout ] = shout_data and Shout ( shared = self . _shared , data = shout_data ) or None return new_shout GroupSettings \u00b6 Represents a group's settings. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. is_approval_required bool Whether approval is required to join this group. is_builders_club_required bool Whether a membership is required to join this group. are_enemies_allowed bool Whether group enemies are allowed. are_group_funds_visible bool Whether group funds are visible. are_group_games_visible bool Whether group games are visible. is_group_name_change_enabled bool Whether group name changes are enabled. can_change_group_name bool Whether the name of this group can be changed. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The group settings data. required Source code in roblox/bases/basegroup.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The group settings data. \"\"\" self . _shared : ClientSharedObject = shared self . is_approval_required : bool = data [ \"isApprovalRequired\" ] self . is_builders_club_required : bool = data [ \"isBuildersClubRequired\" ] self . are_enemies_allowed : bool = data [ \"areEnemiesAllowed\" ] self . are_group_funds_visible : bool = data [ \"areGroupFundsVisible\" ] self . are_group_games_visible : bool = data [ \"areGroupGamesVisible\" ] self . is_group_name_change_enabled : bool = data [ \"isGroupNameChangeEnabled\" ] self . can_change_group_name : bool = data [ \"canChangeGroupName\" ] JoinRequest ( PartialUser ) \u00b6 Represents a group join request. __init__ ( self , shared : ClientSharedObject , data : dict , group : Union [ BaseGroup , int ]) special \u00b6 Source code in roblox/bases/basegroup.py def __init__ ( self , shared : ClientSharedObject , data : dict , group : Union [ BaseGroup , int ]): self . _shared : ClientSharedObject = shared super () . __init__ ( shared = self . _shared , data = data [ \"requester\" ]) self . created : datetime = parse ( data [ \"created\" ]) self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( shared = self . _shared , group_id = group ) else : self . group = group accept ( self ) async \u00b6 Accepts this join request. Source code in roblox/bases/basegroup.py async def accept ( self ): \"\"\" Accepts this join request. \"\"\" await self . group . accept_user ( self ) decline ( self ) async \u00b6 Declines this join request. Source code in roblox/bases/basegroup.py async def decline ( self ): \"\"\" Declines this join request. \"\"\" await self . group . decline_user ( self )","title":"basegroup"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup","text":"This file contains the BaseGroup object, which represents a Roblox group ID. It also contains the GroupSettings object, which represents a group's settings.","title":"basegroup"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup","text":"Represents a Roblox group ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. _requests The requests object. id int The group's ID.","title":"BaseGroup"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required group_id int The group's ID. required Source code in roblox/bases/basegroup.py def __init__ ( self , shared : ClientSharedObject , group_id : int ): \"\"\" Parameters: shared: The ClientSharedObject. group_id: The group's ID. \"\"\" self . _shared : ClientSharedObject = shared self . _requests = shared . requests self . id : int = group_id","title":"__init__()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.accept_user","text":"Accepts a user's request to join this group. Source code in roblox/bases/basegroup.py async def accept_user ( self , user : Union [ int , BaseUser ]): \"\"\" Accepts a user's request to join this group. \"\"\" await self . _shared . requests . post ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) )","title":"accept_user()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.decline_user","text":"Declines a user's request to join this group. Source code in roblox/bases/basegroup.py async def decline_user ( self , user : Union [ int , BaseUser ]): \"\"\" Declines a user's request to join this group. \"\"\" await self . _shared . requests . delete ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) )","title":"decline_user()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_join_request","text":"Gets a specific user's join request to your group. Returns None if the user does not have an active join request. Source code in roblox/bases/basegroup.py async def get_join_request ( self , user : Union [ int , BaseUser ]) -> Optional [ JoinRequest ]: \"\"\" Gets a specific user's join request to your group. Returns None if the user does not have an active join request. \"\"\" join_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) ) join_data = join_response . json () return join_data and JoinRequest ( shared = self . _shared , data = join_data , group = self ) or None","title":"get_join_request()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_join_requests","text":"Gets all of this group's join requests. Source code in roblox/bases/basegroup.py def get_join_requests ( self , sort_order : SortOrder = SortOrder . Ascending , limit : int = 10 ) -> PageIterator : \"\"\" Gets all of this group's join requests. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests\" ), sort_order = sort_order , limit = limit , handler = lambda shared , data : JoinRequest ( shared = shared , data = data , group = self ) )","title":"get_join_requests()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_member","text":"Gets a member of a group. Parameters: Name Type Description Default user Union[int, BaseUser] A BaseUser or a User ID. required Source code in roblox/bases/basegroup.py def get_member ( self , user : Union [ int , BaseUser ]) -> MemberRelationship : \"\"\" Gets a member of a group. Arguments: user: A BaseUser or a User ID. Returns: A member. \"\"\" return MemberRelationship ( shared = self . _shared , user = user , group = self )","title":"get_member()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_member_by_username","text":"Gets a member of a group by username. Parameters: Name Type Description Default username str A Roblox username. required exclude_banned_users bool Whether to exclude banned users from the data. False Source code in roblox/bases/basegroup.py async def get_member_by_username ( self , username : str , exclude_banned_users : bool = False ) -> MemberRelationship : \"\"\" Gets a member of a group by username. Arguments: username: A Roblox username. exclude_banned_users: Whether to exclude banned users from the data. Returns: A member. \"\"\" user : RequestedUsernamePartialUser = await self . _shared . client . get_user_by_username ( username = username , exclude_banned_users = exclude_banned_users , expand = False ) return MemberRelationship ( shared = self . _shared , user = user , group = self )","title":"get_member_by_username()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_members","text":"Gets all members of a group. Parameters: Name Type Description Default sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> limit int Size of each page. 10 Source code in roblox/bases/basegroup.py def get_members ( self , sort_order : SortOrder = SortOrder . Ascending , limit : int = 10 ) -> PageIterator : \"\"\" Gets all members of a group. Arguments: sort_order: Order in which data should be grabbed. limit: Size of each page. Returns: A PageIterator. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users\" ), sort_order = sort_order , limit = limit , handler = lambda shared , data : Member ( shared = shared , data = data , group = self ) )","title":"get_members()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_roles","text":"Gets all roles of the group. Returns: List of roles. Source code in roblox/bases/basegroup.py async def get_roles ( self ) -> List [ Role ]: \"\"\" Gets all roles of the group. Returns: List of roles. \"\"\" roles_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /roles\" ) ) roles_data = roles_response . json () return [ Role ( shared = self . _shared , data = role_data , group = self ) for role_data in roles_data [ \"roles\" ]]","title":"get_roles()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_settings","text":"Gets all the settings of the selected group Returns: Type Description GroupSettings GroupSettings. Source code in roblox/bases/basegroup.py async def get_settings ( self ) -> GroupSettings : \"\"\" Gets all the settings of the selected group Returns: GroupSettings. \"\"\" settings_response = await self . _requests . get ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /settings\" ), ) settings_data = settings_response . json () return GroupSettings ( shared = self . _shared , data = settings_data )","title":"get_settings()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_wall_post","text":"Gets a wall post from an ID. Parameters: Name Type Description Default post_id int A post ID. required Source code in roblox/bases/basegroup.py def get_wall_post ( self , post_id : int ) -> WallPostRelationship : \"\"\" Gets a wall post from an ID. Arguments: post_id: A post ID. Returns: A very basic wall post.. \"\"\" return WallPostRelationship ( shared = self . _shared , post_id = post_id , group = self )","title":"get_wall_post()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_wall_posts","text":"Gets all members of a group. Parameters: Name Type Description Default sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> limit int How many posts will be returned per page. 10 Source code in roblox/bases/basegroup.py def get_wall_posts ( self , sort_order : SortOrder = SortOrder . Ascending , limit : int = 10 ) -> PageIterator : \"\"\" Gets all members of a group. Arguments: sort_order: Order in which data should be grabbed. limit: How many posts will be returned per page. Returns: A PageIterator. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"groups\" , f \"v2/groups/ { self . id } /wall/posts\" ), sort_order = sort_order , limit = limit , handler = lambda shared , data : WallPost ( shared = shared , data = data , group = self ) )","title":"get_wall_posts()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.kick_user","text":"Kicks a user from a group. Source code in roblox/bases/basegroup.py async def kick_user ( self , user : BaseUser ): \"\"\" Kicks a user from a group. \"\"\" await self . _shared . requests . delete ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users/ { user . id } \" ) )","title":"kick_user()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.set_rank","text":"Changes a member's role using a rank number. Parameters: Name Type Description Default user BaseUser The user who's rank will be changed. required rank int The rank number to change to. (1-255) required Source code in roblox/bases/basegroup.py async def set_rank ( self , user : BaseUser , rank : int ) -> None : \"\"\" Changes a member's role using a rank number. Arguments: user: The user who's rank will be changed. rank: The rank number to change to. (1-255) \"\"\" roles = await self . get_roles () role = next (( role for role in roles if role . rank == rank ), None ) if not role : raise InvalidRole ( f \"Role with rank number { rank } does not exist.\" ) await self . set_role ( user , role )","title":"set_rank()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.set_role","text":"Sets a users role. Parameters: Name Type Description Default user BaseUser The user who's rank will be changed. required role BaseRole The new role. required Source code in roblox/bases/basegroup.py async def set_role ( self , user : BaseUser , role : BaseRole ) -> None : \"\"\" Sets a users role. Arguments: user: The user who's rank will be changed. role: The new role. \"\"\" await self . _shared . requests . patch ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users/ { user . id } \" ), json = { \"roleId\" : role . id } )","title":"set_role()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.to_group","text":"Expands into a full Group object. Returns: Type Description Group A Group. Source code in roblox/bases/basegroup.py async def to_group ( self ) -> Group : \"\"\" Expands into a full Group object. Returns: A Group. \"\"\" return await self . _shared . client . get_group ( self . id )","title":"to_group()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.update_settings","text":"Sets the group settings Parameters: Name Type Description Default is_approval_required Optional[bool] If someone needs to be approve before joining the group None is_builders_club_required Optional[bool] If bundlers club is required to join the group None are_enemies_allowed Optional[bool] Are other groups allowed to send enemy requests to your group? None are_group_funds_visible Optional[bool] Can everyone see your group funds? None are_group_games_visible Optional[bool] Are your group games visible? None Source code in roblox/bases/basegroup.py async def update_settings ( self , is_approval_required : Optional [ bool ] = None , is_builders_club_required : Optional [ bool ] = None , are_enemies_allowed : Optional [ bool ] = None , are_group_funds_visible : Optional [ bool ] = None , are_group_games_visible : Optional [ bool ] = None , ) -> None : \"\"\" Sets the group settings Arguments: is_approval_required: If someone needs to be approve before joining the group is_builders_club_required: If bundlers club is required to join the group are_enemies_allowed: Are other groups allowed to send enemy requests to your group? are_group_funds_visible: Can everyone see your group funds? are_group_games_visible: Are your group games visible? \"\"\" settings_data = { \"isApprovalRequired\" : is_approval_required , \"isBuildersClubRequired\" : is_builders_club_required , \"areEnemiesAllowed\" : are_enemies_allowed , \"areGroupFundsVisible\" : are_group_funds_visible , \"areGroupGamesVisible\" : are_group_games_visible , } await self . _requests . patch ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /settings\" ), json = settings_data )","title":"update_settings()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.update_shout","text":"Updates the shout. Parameters: Name Type Description Default message str The new shout message. required Source code in roblox/bases/basegroup.py async def update_shout ( self , message : str ) -> Optional [ Shout ]: \"\"\" Updates the shout. Arguments: message: The new shout message. \"\"\" shout_response = await self . _requests . patch ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /status\" ), json = { \"message\" : message } ) shout_data = shout_response . json () new_shout : Optional [ Shout ] = shout_data and Shout ( shared = self . _shared , data = shout_data ) or None return new_shout","title":"update_shout()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.GroupSettings","text":"Represents a group's settings. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. is_approval_required bool Whether approval is required to join this group. is_builders_club_required bool Whether a membership is required to join this group. are_enemies_allowed bool Whether group enemies are allowed. are_group_funds_visible bool Whether group funds are visible. are_group_games_visible bool Whether group games are visible. is_group_name_change_enabled bool Whether group name changes are enabled. can_change_group_name bool Whether the name of this group can be changed.","title":"GroupSettings"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.GroupSettings.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The group settings data. required Source code in roblox/bases/basegroup.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The group settings data. \"\"\" self . _shared : ClientSharedObject = shared self . is_approval_required : bool = data [ \"isApprovalRequired\" ] self . is_builders_club_required : bool = data [ \"isBuildersClubRequired\" ] self . are_enemies_allowed : bool = data [ \"areEnemiesAllowed\" ] self . are_group_funds_visible : bool = data [ \"areGroupFundsVisible\" ] self . are_group_games_visible : bool = data [ \"areGroupGamesVisible\" ] self . is_group_name_change_enabled : bool = data [ \"isGroupNameChangeEnabled\" ] self . can_change_group_name : bool = data [ \"canChangeGroupName\" ]","title":"__init__()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.JoinRequest","text":"Represents a group join request.","title":"JoinRequest"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.JoinRequest.__init__","text":"Source code in roblox/bases/basegroup.py def __init__ ( self , shared : ClientSharedObject , data : dict , group : Union [ BaseGroup , int ]): self . _shared : ClientSharedObject = shared super () . __init__ ( shared = self . _shared , data = data [ \"requester\" ]) self . created : datetime = parse ( data [ \"created\" ]) self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( shared = self . _shared , group_id = group ) else : self . group = group","title":"__init__()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.JoinRequest.accept","text":"Accepts this join request. Source code in roblox/bases/basegroup.py async def accept ( self ): \"\"\" Accepts this join request. \"\"\" await self . group . accept_user ( self )","title":"accept()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.JoinRequest.decline","text":"Declines this join request. Source code in roblox/bases/basegroup.py async def decline ( self ): \"\"\" Declines this join request. \"\"\" await self . group . decline_user ( self )","title":"decline()"},{"location":"reference/roblox/bases/baseinstance/","text":"roblox.bases.baseinstance \u00b6 This file contains the BaseInstance object, which represents a Roblox instance ID. BaseInstance ( BaseItem ) \u00b6 Represents an instance of a Roblox item. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The instance ID. __init__ ( self , shared : ClientSharedObject , instance_id : int ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required instance_id int The asset instance ID. required Source code in roblox/bases/baseinstance.py def __init__ ( self , shared : ClientSharedObject , instance_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. instance_id: The asset instance ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = instance_id","title":"baseinstance"},{"location":"reference/roblox/bases/baseinstance/#roblox.bases.baseinstance","text":"This file contains the BaseInstance object, which represents a Roblox instance ID.","title":"baseinstance"},{"location":"reference/roblox/bases/baseinstance/#roblox.bases.baseinstance.BaseInstance","text":"Represents an instance of a Roblox item. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The instance ID.","title":"BaseInstance"},{"location":"reference/roblox/bases/baseinstance/#roblox.bases.baseinstance.BaseInstance.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required instance_id int The asset instance ID. required Source code in roblox/bases/baseinstance.py def __init__ ( self , shared : ClientSharedObject , instance_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. instance_id: The asset instance ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = instance_id","title":"__init__()"},{"location":"reference/roblox/bases/baseitem/","text":"roblox.bases.baseitem \u00b6 This file contains the BaseItem class, which all bases inherit. BaseItem \u00b6 All bases inherit this class. id \u00b6 __eq__ ( self , other ) special \u00b6 Source code in roblox/bases/baseitem.py def __eq__ ( self , other ): return isinstance ( other , self . __class__ ) and other . id == self . id __int__ ( self ) special \u00b6 Source code in roblox/bases/baseitem.py def __int__ ( self ): return self . id __ne__ ( self , other ) special \u00b6 Source code in roblox/bases/baseitem.py def __ne__ ( self , other ): if isinstance ( other , self . __class__ ): return other . id != self . id return True __repr__ ( self ) special \u00b6 Source code in roblox/bases/baseitem.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } >\"","title":"baseitem"},{"location":"reference/roblox/bases/baseitem/#roblox.bases.baseitem","text":"This file contains the BaseItem class, which all bases inherit.","title":"baseitem"},{"location":"reference/roblox/bases/baseitem/#roblox.bases.baseitem.BaseItem","text":"All bases inherit this class.","title":"BaseItem"},{"location":"reference/roblox/bases/baseitem/#roblox.bases.baseitem.BaseItem.id","text":"","title":"id"},{"location":"reference/roblox/bases/baseitem/#roblox.bases.baseitem.BaseItem.__eq__","text":"Source code in roblox/bases/baseitem.py def __eq__ ( self , other ): return isinstance ( other , self . __class__ ) and other . id == self . id","title":"__eq__()"},{"location":"reference/roblox/bases/baseitem/#roblox.bases.baseitem.BaseItem.__int__","text":"Source code in roblox/bases/baseitem.py def __int__ ( self ): return self . id","title":"__int__()"},{"location":"reference/roblox/bases/baseitem/#roblox.bases.baseitem.BaseItem.__ne__","text":"Source code in roblox/bases/baseitem.py def __ne__ ( self , other ): if isinstance ( other , self . __class__ ): return other . id != self . id return True","title":"__ne__()"},{"location":"reference/roblox/bases/baseitem/#roblox.bases.baseitem.BaseItem.__repr__","text":"Source code in roblox/bases/baseitem.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } >\"","title":"__repr__()"},{"location":"reference/roblox/bases/basejob/","text":"roblox.bases.basejob \u00b6 This file contains the BaseJob object, which represents a Roblox job ID. BaseJob ( BaseItem ) \u00b6 Represents Roblox job ID. Job IDs are UUIDs that represent a single game server instance. Learn more on the Developer Hub here . Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id str The job ID. __init__ ( self , shared : ClientSharedObject , job_id : str ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required job_id str The job ID. required Source code in roblox/bases/basejob.py def __init__ ( self , shared : ClientSharedObject , job_id : str ): \"\"\" Arguments: shared: The ClientSharedObject. job_id: The job ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : str = job_id","title":"basejob"},{"location":"reference/roblox/bases/basejob/#roblox.bases.basejob","text":"This file contains the BaseJob object, which represents a Roblox job ID.","title":"basejob"},{"location":"reference/roblox/bases/basejob/#roblox.bases.basejob.BaseJob","text":"Represents Roblox job ID. Job IDs are UUIDs that represent a single game server instance. Learn more on the Developer Hub here . Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id str The job ID.","title":"BaseJob"},{"location":"reference/roblox/bases/basejob/#roblox.bases.basejob.BaseJob.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required job_id str The job ID. required Source code in roblox/bases/basejob.py def __init__ ( self , shared : ClientSharedObject , job_id : str ): \"\"\" Arguments: shared: The ClientSharedObject. job_id: The job ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : str = job_id","title":"__init__()"},{"location":"reference/roblox/bases/baseplace/","text":"roblox.bases.baseplace \u00b6 This file contains the BasePlace object, which represents a Roblox place ID. BasePlace ( BaseAsset ) \u00b6 Represents a Roblox place ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The place ID. __init__ ( self , shared : ClientSharedObject , place_id : int ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required place_id int The place ID. required Source code in roblox/bases/baseplace.py def __init__ ( self , shared : ClientSharedObject , place_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. place_id: The place ID. \"\"\" super () . __init__ ( shared , place_id ) self . _shared : ClientSharedObject = shared self . id : int = place_id get_instances ( self , start_index : int = 0 ) async \u00b6 Returns a list of this place's current instances (servers). This list always contains 10 items or fewer. For more items, add 10 to the start index and repeat until no more items are available. fixme please! at some point you should add an iterator for this. Parameters: Name Type Description Default start_index int Where to start in the server index. 0 Source code in roblox/bases/baseplace.py async def get_instances ( self , start_index : int = 0 ): \"\"\" Returns a list of this place's current instances (servers). This list always contains 10 items or fewer. For more items, add 10 to the start index and repeat until no more items are available. fixme please! at some point you should add an iterator for this. Arguments: start_index: Where to start in the server index. \"\"\" from ..jobs import GameInstances # FIXME instances_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"www\" , f \"games/getgameinstancesjson\" ), params = { \"placeId\" : self . id , \"startIndex\" : start_index } ) instances_data = instances_response . json () return GameInstances ( shared = self . _shared , data = instances_data )","title":"baseplace"},{"location":"reference/roblox/bases/baseplace/#roblox.bases.baseplace","text":"This file contains the BasePlace object, which represents a Roblox place ID.","title":"baseplace"},{"location":"reference/roblox/bases/baseplace/#roblox.bases.baseplace.BasePlace","text":"Represents a Roblox place ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The place ID.","title":"BasePlace"},{"location":"reference/roblox/bases/baseplace/#roblox.bases.baseplace.BasePlace.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required place_id int The place ID. required Source code in roblox/bases/baseplace.py def __init__ ( self , shared : ClientSharedObject , place_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. place_id: The place ID. \"\"\" super () . __init__ ( shared , place_id ) self . _shared : ClientSharedObject = shared self . id : int = place_id","title":"__init__()"},{"location":"reference/roblox/bases/baseplace/#roblox.bases.baseplace.BasePlace.get_instances","text":"Returns a list of this place's current instances (servers). This list always contains 10 items or fewer. For more items, add 10 to the start index and repeat until no more items are available. fixme please! at some point you should add an iterator for this. Parameters: Name Type Description Default start_index int Where to start in the server index. 0 Source code in roblox/bases/baseplace.py async def get_instances ( self , start_index : int = 0 ): \"\"\" Returns a list of this place's current instances (servers). This list always contains 10 items or fewer. For more items, add 10 to the start index and repeat until no more items are available. fixme please! at some point you should add an iterator for this. Arguments: start_index: Where to start in the server index. \"\"\" from ..jobs import GameInstances # FIXME instances_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"www\" , f \"games/getgameinstancesjson\" ), params = { \"placeId\" : self . id , \"startIndex\" : start_index } ) instances_data = instances_response . json () return GameInstances ( shared = self . _shared , data = instances_data )","title":"get_instances()"},{"location":"reference/roblox/bases/baseplugin/","text":"roblox.bases.baseplugin \u00b6 This file contains the BasePlugin object, which represents a Roblox plugin ID. BasePlugin ( BaseAsset ) \u00b6 Represents a Roblox plugin ID. Plugins are a form of Asset and as such this object derives from BaseAsset. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The plugin ID. __init__ ( self , shared : ClientSharedObject , plugin_id : int ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required plugin_id int The plugin ID. required Source code in roblox/bases/baseplugin.py def __init__ ( self , shared : ClientSharedObject , plugin_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. plugin_id: The plugin ID. \"\"\" super () . __init__ ( shared , plugin_id ) self . _shared : ClientSharedObject = shared self . id : int = plugin_id update ( self , name : str = None , description : str = None , comments_enabled : str = None ) async \u00b6 Updates the plugin's data. Parameters: Name Type Description Default name str The new group name. None description str The new group description. None comments_enabled str Whether to enable comments. None Source code in roblox/bases/baseplugin.py async def update ( self , name : str = None , description : str = None , comments_enabled : str = None ): \"\"\" Updates the plugin's data. Arguments: name: The new group name. description: The new group description. comments_enabled: Whether to enable comments. \"\"\" await self . _shared . requests . patch ( url = self . _shared . url_generator . get_url ( \"develop\" , f \"v1/plugins/ { self . id } \" ), json = { \"name\" : name , \"description\" : description , \"commentsEnabled\" : comments_enabled } )","title":"baseplugin"},{"location":"reference/roblox/bases/baseplugin/#roblox.bases.baseplugin","text":"This file contains the BasePlugin object, which represents a Roblox plugin ID.","title":"baseplugin"},{"location":"reference/roblox/bases/baseplugin/#roblox.bases.baseplugin.BasePlugin","text":"Represents a Roblox plugin ID. Plugins are a form of Asset and as such this object derives from BaseAsset. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The plugin ID.","title":"BasePlugin"},{"location":"reference/roblox/bases/baseplugin/#roblox.bases.baseplugin.BasePlugin.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required plugin_id int The plugin ID. required Source code in roblox/bases/baseplugin.py def __init__ ( self , shared : ClientSharedObject , plugin_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. plugin_id: The plugin ID. \"\"\" super () . __init__ ( shared , plugin_id ) self . _shared : ClientSharedObject = shared self . id : int = plugin_id","title":"__init__()"},{"location":"reference/roblox/bases/baseplugin/#roblox.bases.baseplugin.BasePlugin.update","text":"Updates the plugin's data. Parameters: Name Type Description Default name str The new group name. None description str The new group description. None comments_enabled str Whether to enable comments. None Source code in roblox/bases/baseplugin.py async def update ( self , name : str = None , description : str = None , comments_enabled : str = None ): \"\"\" Updates the plugin's data. Arguments: name: The new group name. description: The new group description. comments_enabled: Whether to enable comments. \"\"\" await self . _shared . requests . patch ( url = self . _shared . url_generator . get_url ( \"develop\" , f \"v1/plugins/ { self . id } \" ), json = { \"name\" : name , \"description\" : description , \"commentsEnabled\" : comments_enabled } )","title":"update()"},{"location":"reference/roblox/bases/baserobloxbadge/","text":"roblox.bases.baserobloxbadge \u00b6 This file contains the BaseRobloxBadge object, which represents a Roblox roblox badge ID. BaseRobloxBadge ( BaseItem ) \u00b6 Represents a Roblox Roblox badge ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The Roblox Badge ID. __init__ ( self , shared : ClientSharedObject , roblox_badge_id : int ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required roblox_badge_id int The RobloxBadge ID. required Source code in roblox/bases/baserobloxbadge.py def __init__ ( self , shared : ClientSharedObject , roblox_badge_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. roblox_badge_id: The RobloxBadge ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = roblox_badge_id","title":"baserobloxbadge"},{"location":"reference/roblox/bases/baserobloxbadge/#roblox.bases.baserobloxbadge","text":"This file contains the BaseRobloxBadge object, which represents a Roblox roblox badge ID.","title":"baserobloxbadge"},{"location":"reference/roblox/bases/baserobloxbadge/#roblox.bases.baserobloxbadge.BaseRobloxBadge","text":"Represents a Roblox Roblox badge ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The Roblox Badge ID.","title":"BaseRobloxBadge"},{"location":"reference/roblox/bases/baserobloxbadge/#roblox.bases.baserobloxbadge.BaseRobloxBadge.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required roblox_badge_id int The RobloxBadge ID. required Source code in roblox/bases/baserobloxbadge.py def __init__ ( self , shared : ClientSharedObject , roblox_badge_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. roblox_badge_id: The RobloxBadge ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = roblox_badge_id","title":"__init__()"},{"location":"reference/roblox/bases/baserole/","text":"roblox.bases.baserole \u00b6 This file contains the BaseRole object, which represents a Roblox role ID. BaseRole ( BaseItem ) \u00b6 Represents a Roblox role ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The role ID. __init__ ( self , shared : ClientSharedObject , role_id : int ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required role_id int The role ID. required Source code in roblox/bases/baserole.py def __init__ ( self , shared : ClientSharedObject , role_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. role_id: The role ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = role_id","title":"baserole"},{"location":"reference/roblox/bases/baserole/#roblox.bases.baserole","text":"This file contains the BaseRole object, which represents a Roblox role ID.","title":"baserole"},{"location":"reference/roblox/bases/baserole/#roblox.bases.baserole.BaseRole","text":"Represents a Roblox role ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The role ID.","title":"BaseRole"},{"location":"reference/roblox/bases/baserole/#roblox.bases.baserole.BaseRole.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required role_id int The role ID. required Source code in roblox/bases/baserole.py def __init__ ( self , shared : ClientSharedObject , role_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. role_id: The role ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = role_id","title":"__init__()"},{"location":"reference/roblox/bases/basesociallink/","text":"roblox.bases.basesociallink \u00b6 This file contains the BaseUniverseSocialLink object, which represents a Roblox social link ID. BaseUniverseSocialLink ( BaseItem ) \u00b6 Represents a Roblox roblox_badge ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The promotion channel ID. __init__ ( self , shared : ClientSharedObject , social_link_id : int ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required social_link_id int The UniversePromotionChannel ID. required Source code in roblox/bases/basesociallink.py def __init__ ( self , shared : ClientSharedObject , social_link_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. social_link_id: The UniversePromotionChannel ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = social_link_id","title":"basesociallink"},{"location":"reference/roblox/bases/basesociallink/#roblox.bases.basesociallink","text":"This file contains the BaseUniverseSocialLink object, which represents a Roblox social link ID.","title":"basesociallink"},{"location":"reference/roblox/bases/basesociallink/#roblox.bases.basesociallink.BaseUniverseSocialLink","text":"Represents a Roblox roblox_badge ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The promotion channel ID.","title":"BaseUniverseSocialLink"},{"location":"reference/roblox/bases/basesociallink/#roblox.bases.basesociallink.BaseUniverseSocialLink.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required social_link_id int The UniversePromotionChannel ID. required Source code in roblox/bases/basesociallink.py def __init__ ( self , shared : ClientSharedObject , social_link_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. social_link_id: The UniversePromotionChannel ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = social_link_id","title":"__init__()"},{"location":"reference/roblox/bases/baseuniverse/","text":"roblox.bases.baseuniverse \u00b6 This file contains the BaseUniverse object, which represents a Roblox universe ID. It also contains the UniverseLiveStats object, which represents a universe's live stats. BaseUniverse ( BaseItem ) \u00b6 Represents a Roblox universe ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The universe ID. __init__ ( self , shared : ClientSharedObject , universe_id : int ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required universe_id int The universe ID. required Source code in roblox/bases/baseuniverse.py def __init__ ( self , shared : ClientSharedObject , universe_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. universe_id: The universe ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = universe_id get_badges ( self , limit : int = 10 ) -> PageIterator \u00b6 Gets the universe's badges. Source code in roblox/bases/baseuniverse.py def get_badges ( self , limit : int = 10 ) -> PageIterator : \"\"\" Gets the universe's badges. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"badges\" , f \"v1/universes/ { self . id } /badges\" ), limit = limit , handler = _universe_badges_handler , ) get_favorite_count ( self ) -> int async \u00b6 Grabs the universe's favorite count. Returns: Type Description int The universe's favorite count. Source code in roblox/bases/baseuniverse.py async def get_favorite_count ( self ) -> int : \"\"\" Grabs the universe's favorite count. Returns: The universe's favorite count. \"\"\" favorite_count_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /favorites/count\" ) ) favorite_count_data = favorite_count_response . json () return favorite_count_data [ \"favoritesCount\" ] get_gamepasses ( self , limit : int = 10 ) -> PageIterator \u00b6 Gets the universe's gamepasses. Source code in roblox/bases/baseuniverse.py def get_gamepasses ( self , limit : int = 10 ) -> PageIterator : \"\"\" Gets the universe's gamepasses. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /game-passes\" ), limit = limit , handler = _gamepasses_handler , ) get_live_stats ( self ) -> UniverseLiveStats async \u00b6 Gets the universe's live stats. This data does not update live. These are just the stats that are shown on the website's live stats display. Source code in roblox/bases/baseuniverse.py async def get_live_stats ( self ) -> UniverseLiveStats : \"\"\" Gets the universe's live stats. This data does not update live. These are just the stats that are shown on the website's live stats display. \"\"\" stats_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"develop\" , f \"v1/universes/ { self . id } /live-stats\" ) ) stats_data = stats_response . json () return UniverseLiveStats ( data = stats_data ) get_social_links ( self ) -> List [ UniverseSocialLink ] async \u00b6 Gets a universe's social links; Returns: A list of the universe's social links. Source code in roblox/bases/baseuniverse.py async def get_social_links ( self ) -> List [ UniverseSocialLink ]: \"\"\" Gets a universe's social links; Returns: A list of the universe's social links. \"\"\" links_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /social-links/list\" ) ) links_data = links_response . json ()[ \"data\" ] return [ UniverseSocialLink ( shared = self . _shared , data = link_data ) for link_data in links_data ] is_favorited ( self ) -> bool async \u00b6 Grabs the authenticated user's favorite status for this game. Returns: Type Description bool Whether the authenticated user has favorited this game. Source code in roblox/bases/baseuniverse.py async def is_favorited ( self ) -> bool : \"\"\" Grabs the authenticated user's favorite status for this game. Returns: Whether the authenticated user has favorited this game. \"\"\" is_favorited_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /favorites\" ) ) is_favorited_data = is_favorited_response . json () return is_favorited_data [ \"isFavorited\" ] UniverseLiveStats \u00b6 Represents a universe's live stats. __init__ ( self , data : dict ) special \u00b6 Source code in roblox/bases/baseuniverse.py def __init__ ( self , data : dict ): self . total_player_count : int = data [ \"totalPlayerCount\" ] self . game_count : int = data [ \"gameCount\" ] self . player_counts_by_device_type : Dict [ str , int ] = data [ \"playerCountsByDeviceType\" ]","title":"baseuniverse"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse","text":"This file contains the BaseUniverse object, which represents a Roblox universe ID. It also contains the UniverseLiveStats object, which represents a universe's live stats.","title":"baseuniverse"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse","text":"Represents a Roblox universe ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The universe ID.","title":"BaseUniverse"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required universe_id int The universe ID. required Source code in roblox/bases/baseuniverse.py def __init__ ( self , shared : ClientSharedObject , universe_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. universe_id: The universe ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = universe_id","title":"__init__()"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_badges","text":"Gets the universe's badges. Source code in roblox/bases/baseuniverse.py def get_badges ( self , limit : int = 10 ) -> PageIterator : \"\"\" Gets the universe's badges. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"badges\" , f \"v1/universes/ { self . id } /badges\" ), limit = limit , handler = _universe_badges_handler , )","title":"get_badges()"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_favorite_count","text":"Grabs the universe's favorite count. Returns: Type Description int The universe's favorite count. Source code in roblox/bases/baseuniverse.py async def get_favorite_count ( self ) -> int : \"\"\" Grabs the universe's favorite count. Returns: The universe's favorite count. \"\"\" favorite_count_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /favorites/count\" ) ) favorite_count_data = favorite_count_response . json () return favorite_count_data [ \"favoritesCount\" ]","title":"get_favorite_count()"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_gamepasses","text":"Gets the universe's gamepasses. Source code in roblox/bases/baseuniverse.py def get_gamepasses ( self , limit : int = 10 ) -> PageIterator : \"\"\" Gets the universe's gamepasses. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /game-passes\" ), limit = limit , handler = _gamepasses_handler , )","title":"get_gamepasses()"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_live_stats","text":"Gets the universe's live stats. This data does not update live. These are just the stats that are shown on the website's live stats display. Source code in roblox/bases/baseuniverse.py async def get_live_stats ( self ) -> UniverseLiveStats : \"\"\" Gets the universe's live stats. This data does not update live. These are just the stats that are shown on the website's live stats display. \"\"\" stats_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"develop\" , f \"v1/universes/ { self . id } /live-stats\" ) ) stats_data = stats_response . json () return UniverseLiveStats ( data = stats_data )","title":"get_live_stats()"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_social_links","text":"Gets a universe's social links; Returns: A list of the universe's social links. Source code in roblox/bases/baseuniverse.py async def get_social_links ( self ) -> List [ UniverseSocialLink ]: \"\"\" Gets a universe's social links; Returns: A list of the universe's social links. \"\"\" links_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /social-links/list\" ) ) links_data = links_response . json ()[ \"data\" ] return [ UniverseSocialLink ( shared = self . _shared , data = link_data ) for link_data in links_data ]","title":"get_social_links()"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.is_favorited","text":"Grabs the authenticated user's favorite status for this game. Returns: Type Description bool Whether the authenticated user has favorited this game. Source code in roblox/bases/baseuniverse.py async def is_favorited ( self ) -> bool : \"\"\" Grabs the authenticated user's favorite status for this game. Returns: Whether the authenticated user has favorited this game. \"\"\" is_favorited_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /favorites\" ) ) is_favorited_data = is_favorited_response . json () return is_favorited_data [ \"isFavorited\" ]","title":"is_favorited()"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.UniverseLiveStats","text":"Represents a universe's live stats.","title":"UniverseLiveStats"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.UniverseLiveStats.__init__","text":"Source code in roblox/bases/baseuniverse.py def __init__ ( self , data : dict ): self . total_player_count : int = data [ \"totalPlayerCount\" ] self . game_count : int = data [ \"gameCount\" ] self . player_counts_by_device_type : Dict [ str , int ] = data [ \"playerCountsByDeviceType\" ]","title":"__init__()"},{"location":"reference/roblox/bases/baseuser/","text":"roblox.bases.baseuser \u00b6 This file contains the BaseUser object, which represents a Roblox user ID. BaseUser ( BaseItem ) \u00b6 Represents a Roblox user ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The user ID. __init__ ( self , shared : ClientSharedObject , user_id : int ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required user_id int The user ID. required Source code in roblox/bases/baseuser.py def __init__ ( self , shared : ClientSharedObject , user_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. user_id: The user ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = user_id get_asset_instance ( self , asset : BaseAsset ) -> Optional [ AssetInstance ] async \u00b6 Checks if a user owns the asset, and returns details about the asset if they do. Returns: An AssetInstance object containing some asset details or None. Source code in roblox/bases/baseuser.py async def get_asset_instance ( self , asset : BaseAsset ) -> Optional [ AssetInstance ]: \"\"\" Checks if a user owns the asset, and returns details about the asset if they do. Returns: An AssetInstance object containing some asset details or None. \"\"\" return await self . get_item_instance ( item_type = InstanceType . asset , item_id = asset . id ) get_badge_awarded_dates ( self , badges : list [ BaseBadge ]) -> List [ PartialBadge ] async \u00b6 Returns: Type Description List[PartialBadge] A list of Partial Badges containing badge awarded dates. Source code in roblox/bases/baseuser.py async def get_badge_awarded_dates ( self , badges : list [ BaseBadge ]) -> List [ PartialBadge ]: \"\"\" Returns: A list of Partial Badges containing badge awarded dates. \"\"\" awarded_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"badges\" , f \"v1/users/ { self . id } /badges/awarded-dates\" ), params = { \"badgeIds\" : [ badge . id for badge in badges ] } ) awarded_data : list = awarded_response . json ()[ \"data\" ] return [ PartialBadge ( shared = self . _shared , data = partial_data ) for partial_data in awarded_data ] get_currency ( self ) -> int async \u00b6 Grabs the user's current Robux amount. Only works on the authenticated user. \"but jmk,,, why is this method in the baseuser and not the client!?!?\" That's how the API is structured. That's why. Returns: Type Description int The user's Robux amount. Source code in roblox/bases/baseuser.py async def get_currency ( self ) -> int : \"\"\" Grabs the user's current Robux amount. Only works on the authenticated user. \"but jmk,,, why is this method in the baseuser and not the client!?!?\" That's how the API is structured. That's why. Returns: The user's Robux amount. \"\"\" currency_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"economy\" , f \"v1/users/ { self . id } /currency\" ) ) currency_data = currency_response . json () return currency_data [ \"robux\" ] get_follower_count ( self ) -> int async \u00b6 Gets the user's follower count. Returns: Type Description int The user's follower count. Source code in roblox/bases/baseuser.py async def get_follower_count ( self ) -> int : \"\"\" Gets the user's follower count. Returns: The user's follower count. \"\"\" return await self . _get_friend_channel_count ( \"followers\" ) get_followers ( self , limit : int = 10 , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > ) -> PageIterator \u00b6 Gets the user's followings. Returns: Type Description PageIterator A PageIterator containing the user's followers. Source code in roblox/bases/baseuser.py def get_followers ( self , limit : int = 10 , sort_order : SortOrder = SortOrder . Ascending ) -> PageIterator : \"\"\" Gets the user's followings. Returns: A PageIterator containing the user's followers. \"\"\" return self . _get_friend_channel_iterator ( channel = \"followers\" , limit = limit , sort_order = sort_order ) get_following_count ( self ) -> int async \u00b6 Gets the user's following count. Returns: Type Description int The user's following count. Source code in roblox/bases/baseuser.py async def get_following_count ( self ) -> int : \"\"\" Gets the user's following count. Returns: The user's following count. \"\"\" return await self . _get_friend_channel_count ( \"followings\" ) get_followings ( self , limit : int = 10 , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > ) -> PageIterator \u00b6 Gets the user's followings. Returns: Type Description PageIterator A PageIterator containing the user's followers. Source code in roblox/bases/baseuser.py def get_followings ( self , limit : int = 10 , sort_order : SortOrder = SortOrder . Ascending ) -> PageIterator : \"\"\" Gets the user's followings. Returns: A PageIterator containing the user's followers. \"\"\" return self . _get_friend_channel_iterator ( channel = \"followings\" , limit = limit , sort_order = sort_order ) get_friend_count ( self ) -> int async \u00b6 Gets the user's friend count. Returns: Type Description int The user's friend count. Source code in roblox/bases/baseuser.py async def get_friend_count ( self ) -> int : \"\"\" Gets the user's friend count. Returns: The user's friend count. \"\"\" return await self . _get_friend_channel_count ( \"friends\" ) get_friends ( self ) -> List [ Friend ] async \u00b6 Grabs the user's friends. Returns: Type Description List[Friend] A list of the user's friends. Source code in roblox/bases/baseuser.py async def get_friends ( self ) -> List [ Friend ]: \"\"\" Grabs the user's friends. Returns: A list of the user's friends. \"\"\" from ..friends import Friend friends_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"friends\" , f \"v1/users/ { self . id } /friends\" ) ) friends_data = friends_response . json ()[ \"data\" ] return [ Friend ( shared = self . _shared , data = friend_data ) for friend_data in friends_data ] get_gamepass_instance ( self , gamepass : BaseGamePass ) -> Optional [ GamePassInstance ] async \u00b6 Checks if a user owns the gamepass, and returns details about the asset if they do. Returns: A GamePassInstance object containing some details or None. Source code in roblox/bases/baseuser.py async def get_gamepass_instance ( self , gamepass : BaseGamePass ) -> Optional [ GamePassInstance ]: \"\"\" Checks if a user owns the gamepass, and returns details about the asset if they do. Returns: A GamePassInstance object containing some details or None. \"\"\" return await self . get_item_instance ( item_type = InstanceType . gamepass , item_id = gamepass . id ) get_group_roles ( self ) -> List [ Role ] async \u00b6 Gets the group's roles. Returns: A list of the group's roles. Source code in roblox/bases/baseuser.py async def get_group_roles ( self ) -> List [ Role ]: \"\"\" Gets the group's roles. Returns: A list of the group's roles. \"\"\" from ..roles import Role from ..groups import Group roles_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/users/ { self . id } /groups/roles\" ) ) roles_data = roles_response . json ()[ \"data\" ] return [ Role ( shared = self . _shared , data = role_data [ \"role\" ], group = Group ( shared = self . _shared , data = role_data [ \"group\" ] ) ) for role_data in roles_data ] get_item_instance ( self , item_type : InstanceType , item_id : int ) -> Optional [ ItemInstance ] async \u00b6 Gets an item instance for a specific user. Parameters: Name Type Description Default item_type InstanceType The type of item to get an instance for. required item_id int The item's ID. required Source code in roblox/bases/baseuser.py async def get_item_instance ( self , item_type : InstanceType , item_id : int ) -> Optional [ ItemInstance ]: \"\"\" Gets an item instance for a specific user. Arguments: item_type: The type of item to get an instance for. item_id: The item's ID. Returns: An ItemInstance, or None. \"\"\" item_type : str = item_type . value . lower () # this is so we can have special classes for other types item_class = instance_classes . get ( item_type ) or ItemInstance instance_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"inventory\" , f \"v1/users/ { self . id } /items/ { item_type } / { item_id } \" ) ) instance_data = instance_response . json ()[ \"data\" ] if len ( instance_data ) > 0 : return item_class ( shared = self . _shared , data = instance_data [ 0 ] ) else : return None get_presence ( self ) -> Optional [ Presence ] async \u00b6 Grabs the user's presence. Returns: Type Description Optional[Presence] The user's presence Source code in roblox/bases/baseuser.py async def get_presence ( self ) -> Optional [ Presence ]: \"\"\" Grabs the user's presence. Returns: The user's presence \"\"\" presences = await self . _shared . presence_provider . get_user_presences ([ self . id ]) try : return presences [ 0 ] except IndexError : return None get_promotion_channels ( self ) -> UserPromotionChannels async \u00b6 Gets the user's promotion channels. Returns: The user's promotion channels. Source code in roblox/bases/baseuser.py async def get_promotion_channels ( self ) -> UserPromotionChannels : \"\"\" Gets the user's promotion channels. Returns: The user's promotion channels. \"\"\" channels_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"accountinformation\" , f \"v1/users/ { self . id } /promotion-channels\" ) ) channels_data = channels_response . json () return UserPromotionChannels ( data = channels_data ) get_roblox_badges ( self ) -> List [ RobloxBadge ] async \u00b6 Gets the user's Roblox badges. Returns: A list of Roblox badges. Source code in roblox/bases/baseuser.py async def get_roblox_badges ( self ) -> List [ RobloxBadge ]: \"\"\" Gets the user's Roblox badges. Returns: A list of Roblox badges. \"\"\" badges_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"accountinformation\" , f \"v1/users/ { self . id } /roblox-badges\" ) ) badges_data = badges_response . json () return [ RobloxBadge ( shared = self . _shared , data = badge_data ) for badge_data in badges_data ] get_status ( self ) -> str async \u00b6 Grabs the user's status. Returns: Type Description str The user's status. Source code in roblox/bases/baseuser.py async def get_status ( self ) -> str : \"\"\" Grabs the user's status. Returns: The user's status. \"\"\" status_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"users\" , f \"/v1/users/ { self . id } /status\" ) ) status_data = status_response . json () return status_data [ \"status\" ] has_premium ( self ) -> bool async \u00b6 Checks if the user has a Roblox Premium membership. Returns: Type Description bool Whether the user has Premium or not. Source code in roblox/bases/baseuser.py async def has_premium ( self ) -> bool : \"\"\" Checks if the user has a Roblox Premium membership. Returns: Whether the user has Premium or not. \"\"\" premium_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"premiumfeatures\" , f \"v1/users/ { self . id } /validate-membership\" ) ) premium_data = premium_response . text return premium_data == \"true\" username_history ( self , limit : int = 10 , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > ) -> PageIterator \u00b6 Grabs the user's username history. Returns: Type Description PageIterator A PageIterator containing the user's username history. Source code in roblox/bases/baseuser.py def username_history ( self , limit : int = 10 , sort_order : SortOrder = SortOrder . Ascending ) -> PageIterator : \"\"\" Grabs the user's username history. Returns: A PageIterator containing the user's username history. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"users\" , f \"v1/users/ { self . id } /username-history\" ), limit = limit , sort_order = sort_order , handler = lambda shared , data : data [ \"name\" ], )","title":"baseuser"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser","text":"This file contains the BaseUser object, which represents a Roblox user ID.","title":"baseuser"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser","text":"Represents a Roblox user ID. Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. id int The user ID.","title":"BaseUser"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required user_id int The user ID. required Source code in roblox/bases/baseuser.py def __init__ ( self , shared : ClientSharedObject , user_id : int ): \"\"\" Arguments: shared: The ClientSharedObject. user_id: The user ID. \"\"\" self . _shared : ClientSharedObject = shared self . id : int = user_id","title":"__init__()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_asset_instance","text":"Checks if a user owns the asset, and returns details about the asset if they do. Returns: An AssetInstance object containing some asset details or None. Source code in roblox/bases/baseuser.py async def get_asset_instance ( self , asset : BaseAsset ) -> Optional [ AssetInstance ]: \"\"\" Checks if a user owns the asset, and returns details about the asset if they do. Returns: An AssetInstance object containing some asset details or None. \"\"\" return await self . get_item_instance ( item_type = InstanceType . asset , item_id = asset . id )","title":"get_asset_instance()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_badge_awarded_dates","text":"Returns: Type Description List[PartialBadge] A list of Partial Badges containing badge awarded dates. Source code in roblox/bases/baseuser.py async def get_badge_awarded_dates ( self , badges : list [ BaseBadge ]) -> List [ PartialBadge ]: \"\"\" Returns: A list of Partial Badges containing badge awarded dates. \"\"\" awarded_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"badges\" , f \"v1/users/ { self . id } /badges/awarded-dates\" ), params = { \"badgeIds\" : [ badge . id for badge in badges ] } ) awarded_data : list = awarded_response . json ()[ \"data\" ] return [ PartialBadge ( shared = self . _shared , data = partial_data ) for partial_data in awarded_data ]","title":"get_badge_awarded_dates()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_currency","text":"Grabs the user's current Robux amount. Only works on the authenticated user. \"but jmk,,, why is this method in the baseuser and not the client!?!?\" That's how the API is structured. That's why. Returns: Type Description int The user's Robux amount. Source code in roblox/bases/baseuser.py async def get_currency ( self ) -> int : \"\"\" Grabs the user's current Robux amount. Only works on the authenticated user. \"but jmk,,, why is this method in the baseuser and not the client!?!?\" That's how the API is structured. That's why. Returns: The user's Robux amount. \"\"\" currency_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"economy\" , f \"v1/users/ { self . id } /currency\" ) ) currency_data = currency_response . json () return currency_data [ \"robux\" ]","title":"get_currency()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_follower_count","text":"Gets the user's follower count. Returns: Type Description int The user's follower count. Source code in roblox/bases/baseuser.py async def get_follower_count ( self ) -> int : \"\"\" Gets the user's follower count. Returns: The user's follower count. \"\"\" return await self . _get_friend_channel_count ( \"followers\" )","title":"get_follower_count()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_followers","text":"Gets the user's followings. Returns: Type Description PageIterator A PageIterator containing the user's followers. Source code in roblox/bases/baseuser.py def get_followers ( self , limit : int = 10 , sort_order : SortOrder = SortOrder . Ascending ) -> PageIterator : \"\"\" Gets the user's followings. Returns: A PageIterator containing the user's followers. \"\"\" return self . _get_friend_channel_iterator ( channel = \"followers\" , limit = limit , sort_order = sort_order )","title":"get_followers()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_following_count","text":"Gets the user's following count. Returns: Type Description int The user's following count. Source code in roblox/bases/baseuser.py async def get_following_count ( self ) -> int : \"\"\" Gets the user's following count. Returns: The user's following count. \"\"\" return await self . _get_friend_channel_count ( \"followings\" )","title":"get_following_count()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_followings","text":"Gets the user's followings. Returns: Type Description PageIterator A PageIterator containing the user's followers. Source code in roblox/bases/baseuser.py def get_followings ( self , limit : int = 10 , sort_order : SortOrder = SortOrder . Ascending ) -> PageIterator : \"\"\" Gets the user's followings. Returns: A PageIterator containing the user's followers. \"\"\" return self . _get_friend_channel_iterator ( channel = \"followings\" , limit = limit , sort_order = sort_order )","title":"get_followings()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_friend_count","text":"Gets the user's friend count. Returns: Type Description int The user's friend count. Source code in roblox/bases/baseuser.py async def get_friend_count ( self ) -> int : \"\"\" Gets the user's friend count. Returns: The user's friend count. \"\"\" return await self . _get_friend_channel_count ( \"friends\" )","title":"get_friend_count()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_friends","text":"Grabs the user's friends. Returns: Type Description List[Friend] A list of the user's friends. Source code in roblox/bases/baseuser.py async def get_friends ( self ) -> List [ Friend ]: \"\"\" Grabs the user's friends. Returns: A list of the user's friends. \"\"\" from ..friends import Friend friends_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"friends\" , f \"v1/users/ { self . id } /friends\" ) ) friends_data = friends_response . json ()[ \"data\" ] return [ Friend ( shared = self . _shared , data = friend_data ) for friend_data in friends_data ]","title":"get_friends()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_gamepass_instance","text":"Checks if a user owns the gamepass, and returns details about the asset if they do. Returns: A GamePassInstance object containing some details or None. Source code in roblox/bases/baseuser.py async def get_gamepass_instance ( self , gamepass : BaseGamePass ) -> Optional [ GamePassInstance ]: \"\"\" Checks if a user owns the gamepass, and returns details about the asset if they do. Returns: A GamePassInstance object containing some details or None. \"\"\" return await self . get_item_instance ( item_type = InstanceType . gamepass , item_id = gamepass . id )","title":"get_gamepass_instance()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_group_roles","text":"Gets the group's roles. Returns: A list of the group's roles. Source code in roblox/bases/baseuser.py async def get_group_roles ( self ) -> List [ Role ]: \"\"\" Gets the group's roles. Returns: A list of the group's roles. \"\"\" from ..roles import Role from ..groups import Group roles_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"groups\" , f \"v1/users/ { self . id } /groups/roles\" ) ) roles_data = roles_response . json ()[ \"data\" ] return [ Role ( shared = self . _shared , data = role_data [ \"role\" ], group = Group ( shared = self . _shared , data = role_data [ \"group\" ] ) ) for role_data in roles_data ]","title":"get_group_roles()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_item_instance","text":"Gets an item instance for a specific user. Parameters: Name Type Description Default item_type InstanceType The type of item to get an instance for. required item_id int The item's ID. required Source code in roblox/bases/baseuser.py async def get_item_instance ( self , item_type : InstanceType , item_id : int ) -> Optional [ ItemInstance ]: \"\"\" Gets an item instance for a specific user. Arguments: item_type: The type of item to get an instance for. item_id: The item's ID. Returns: An ItemInstance, or None. \"\"\" item_type : str = item_type . value . lower () # this is so we can have special classes for other types item_class = instance_classes . get ( item_type ) or ItemInstance instance_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"inventory\" , f \"v1/users/ { self . id } /items/ { item_type } / { item_id } \" ) ) instance_data = instance_response . json ()[ \"data\" ] if len ( instance_data ) > 0 : return item_class ( shared = self . _shared , data = instance_data [ 0 ] ) else : return None","title":"get_item_instance()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_presence","text":"Grabs the user's presence. Returns: Type Description Optional[Presence] The user's presence Source code in roblox/bases/baseuser.py async def get_presence ( self ) -> Optional [ Presence ]: \"\"\" Grabs the user's presence. Returns: The user's presence \"\"\" presences = await self . _shared . presence_provider . get_user_presences ([ self . id ]) try : return presences [ 0 ] except IndexError : return None","title":"get_presence()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_promotion_channels","text":"Gets the user's promotion channels. Returns: The user's promotion channels. Source code in roblox/bases/baseuser.py async def get_promotion_channels ( self ) -> UserPromotionChannels : \"\"\" Gets the user's promotion channels. Returns: The user's promotion channels. \"\"\" channels_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"accountinformation\" , f \"v1/users/ { self . id } /promotion-channels\" ) ) channels_data = channels_response . json () return UserPromotionChannels ( data = channels_data )","title":"get_promotion_channels()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_roblox_badges","text":"Gets the user's Roblox badges. Returns: A list of Roblox badges. Source code in roblox/bases/baseuser.py async def get_roblox_badges ( self ) -> List [ RobloxBadge ]: \"\"\" Gets the user's Roblox badges. Returns: A list of Roblox badges. \"\"\" badges_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"accountinformation\" , f \"v1/users/ { self . id } /roblox-badges\" ) ) badges_data = badges_response . json () return [ RobloxBadge ( shared = self . _shared , data = badge_data ) for badge_data in badges_data ]","title":"get_roblox_badges()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_status","text":"Grabs the user's status. Returns: Type Description str The user's status. Source code in roblox/bases/baseuser.py async def get_status ( self ) -> str : \"\"\" Grabs the user's status. Returns: The user's status. \"\"\" status_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"users\" , f \"/v1/users/ { self . id } /status\" ) ) status_data = status_response . json () return status_data [ \"status\" ]","title":"get_status()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.has_premium","text":"Checks if the user has a Roblox Premium membership. Returns: Type Description bool Whether the user has Premium or not. Source code in roblox/bases/baseuser.py async def has_premium ( self ) -> bool : \"\"\" Checks if the user has a Roblox Premium membership. Returns: Whether the user has Premium or not. \"\"\" premium_response = await self . _shared . requests . get ( url = self . _shared . url_generator . get_url ( \"premiumfeatures\" , f \"v1/users/ { self . id } /validate-membership\" ) ) premium_data = premium_response . text return premium_data == \"true\"","title":"has_premium()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.username_history","text":"Grabs the user's username history. Returns: Type Description PageIterator A PageIterator containing the user's username history. Source code in roblox/bases/baseuser.py def username_history ( self , limit : int = 10 , sort_order : SortOrder = SortOrder . Ascending ) -> PageIterator : \"\"\" Grabs the user's username history. Returns: A PageIterator containing the user's username history. \"\"\" return PageIterator ( shared = self . _shared , url = self . _shared . url_generator . get_url ( \"users\" , f \"v1/users/ { self . id } /username-history\" ), limit = limit , sort_order = sort_order , handler = lambda shared , data : data [ \"name\" ], )","title":"username_history()"},{"location":"reference/roblox/partials/__init__/","text":"roblox.partials.__init__ special \u00b6 Contains partial objects representing objects on Roblox. Some endpoints return some, but not all, data for an object, and these partial objects represent that data.","title":"__init__"},{"location":"reference/roblox/partials/__init__/#roblox.partials.__init__","text":"Contains partial objects representing objects on Roblox. Some endpoints return some, but not all, data for an object, and these partial objects represent that data.","title":"__init__"},{"location":"reference/roblox/partials/partialbadge/","text":"roblox.partials.partialbadge \u00b6 This file contains partial objects related to Roblox badges. PartialBadge ( BaseBadge ) \u00b6 Attributes: Name Type Description _data dict The data we get back from the endpoint. _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int The universe ID. awarded datetime The date when the badge was awarded __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The raw data. required Source code in roblox/partials/partialbadge.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The raw data. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . id : int = data [ \"badgeId\" ] super () . __init__ ( shared = shared , badge_id = self . id ) self . awarded : datetime = parse ( data [ \"awardedDate\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/partials/partialbadge.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } awarded= { self . awarded } >\"","title":"partialbadge"},{"location":"reference/roblox/partials/partialbadge/#roblox.partials.partialbadge","text":"This file contains partial objects related to Roblox badges.","title":"partialbadge"},{"location":"reference/roblox/partials/partialbadge/#roblox.partials.partialbadge.PartialBadge","text":"Attributes: Name Type Description _data dict The data we get back from the endpoint. _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int The universe ID. awarded datetime The date when the badge was awarded","title":"PartialBadge"},{"location":"reference/roblox/partials/partialbadge/#roblox.partials.partialbadge.PartialBadge.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The raw data. required Source code in roblox/partials/partialbadge.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The raw data. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . id : int = data [ \"badgeId\" ] super () . __init__ ( shared = shared , badge_id = self . id ) self . awarded : datetime = parse ( data [ \"awardedDate\" ])","title":"__init__()"},{"location":"reference/roblox/partials/partialbadge/#roblox.partials.partialbadge.PartialBadge.__repr__","text":"Source code in roblox/partials/partialbadge.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } awarded= { self . awarded } >\"","title":"__repr__()"},{"location":"reference/roblox/partials/partialgroup/","text":"roblox.partials.partialgroup \u00b6 This file contains partial objects related to Roblox groups. AssetPartialGroup ( BaseGroup ) \u00b6 Represents the response data of https://games.roblox.com/v1/games . Attributes: Name Type Description _data dict The data we get back from the endpoint. _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int The group's name. creator BaseUser The group's owner. name str The group's name. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The data form the endpoint. required Source code in roblox/partials/partialgroup.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The data form the endpoint. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . creator : BaseUser = BaseUser ( shared = shared , user_id = data [ \"Id\" ]) self . id : int = data [ \"CreatorTargetId\" ] self . name : str = data [ \"Name\" ] super () . __init__ ( shared , self . id ) __repr__ ( self ) special \u00b6 Source code in roblox/partials/partialgroup.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" UniversePartialGroup ( BaseGroup ) \u00b6 Attributes: Name Type Description _data dict The data we get back from the endpoint. _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id Id of the group name str Name of the group __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The data form the endpoint. required Source code in roblox/partials/partialgroup.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The data form the endpoint. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . id = data [ \"id\" ] self . name : str = data [ \"name\" ] super () . __init__ ( shared , self . id ) __repr__ ( self ) special \u00b6 Source code in roblox/partials/partialgroup.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"partialgroup"},{"location":"reference/roblox/partials/partialgroup/#roblox.partials.partialgroup","text":"This file contains partial objects related to Roblox groups.","title":"partialgroup"},{"location":"reference/roblox/partials/partialgroup/#roblox.partials.partialgroup.AssetPartialGroup","text":"Represents the response data of https://games.roblox.com/v1/games . Attributes: Name Type Description _data dict The data we get back from the endpoint. _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int The group's name. creator BaseUser The group's owner. name str The group's name.","title":"AssetPartialGroup"},{"location":"reference/roblox/partials/partialgroup/#roblox.partials.partialgroup.AssetPartialGroup.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The data form the endpoint. required Source code in roblox/partials/partialgroup.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The data form the endpoint. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . creator : BaseUser = BaseUser ( shared = shared , user_id = data [ \"Id\" ]) self . id : int = data [ \"CreatorTargetId\" ] self . name : str = data [ \"Name\" ] super () . __init__ ( shared , self . id )","title":"__init__()"},{"location":"reference/roblox/partials/partialgroup/#roblox.partials.partialgroup.AssetPartialGroup.__repr__","text":"Source code in roblox/partials/partialgroup.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/partials/partialgroup/#roblox.partials.partialgroup.UniversePartialGroup","text":"Attributes: Name Type Description _data dict The data we get back from the endpoint. _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id Id of the group name str Name of the group","title":"UniversePartialGroup"},{"location":"reference/roblox/partials/partialgroup/#roblox.partials.partialgroup.UniversePartialGroup.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The data form the endpoint. required Source code in roblox/partials/partialgroup.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The data form the endpoint. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . id = data [ \"id\" ] self . name : str = data [ \"name\" ] super () . __init__ ( shared , self . id )","title":"__init__()"},{"location":"reference/roblox/partials/partialgroup/#roblox.partials.partialgroup.UniversePartialGroup.__repr__","text":"Source code in roblox/partials/partialgroup.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/partials/partialrole/","text":"roblox.partials.partialrole \u00b6 This file contains partial objects related to Roblox group roles. PartialRole ( BaseRole ) \u00b6 Represents partial role information. Attributes: Name Type Description _shared ClientSharedObject The shared object. id int The role's ID. name str The role's name. rank int The role's rank ID. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Source code in roblox/partials/partialrole.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . id : int = data [ \"id\" ] super () . __init__ ( shared = self . _shared , role_id = self . id ) self . name : str = data [ \"name\" ] self . rank : int = data [ \"rank\" ] __repr__ ( self ) special \u00b6 Source code in roblox/partials/partialrole.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} rank= { self . rank } >\"","title":"partialrole"},{"location":"reference/roblox/partials/partialrole/#roblox.partials.partialrole","text":"This file contains partial objects related to Roblox group roles.","title":"partialrole"},{"location":"reference/roblox/partials/partialrole/#roblox.partials.partialrole.PartialRole","text":"Represents partial role information. Attributes: Name Type Description _shared ClientSharedObject The shared object. id int The role's ID. name str The role's name. rank int The role's rank ID.","title":"PartialRole"},{"location":"reference/roblox/partials/partialrole/#roblox.partials.partialrole.PartialRole.__init__","text":"Source code in roblox/partials/partialrole.py def __init__ ( self , shared : ClientSharedObject , data : dict ): self . _shared : ClientSharedObject = shared self . id : int = data [ \"id\" ] super () . __init__ ( shared = self . _shared , role_id = self . id ) self . name : str = data [ \"name\" ] self . rank : int = data [ \"rank\" ]","title":"__init__()"},{"location":"reference/roblox/partials/partialrole/#roblox.partials.partialrole.PartialRole.__repr__","text":"Source code in roblox/partials/partialrole.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} rank= { self . rank } >\"","title":"__repr__()"},{"location":"reference/roblox/partials/partialuniverse/","text":"roblox.partials.partialuniverse \u00b6 This file contains partial objects related to Roblox universes. ChatPartialUniverse ( BaseUniverse ) \u00b6 Attributes: Name Type Description _data dict The data we get back from the endpoint. _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int The universe ID. root_place BasePlace The universe's root place. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The raw data. required Source code in roblox/partials/partialuniverse.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The raw data. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . id : int = data [ \"universeId\" ] super () . __init__ ( shared = shared , universe_id = self . id ) self . root_place : BasePlace = BasePlace ( shared = shared , place_id = data [ \"rootPlaceId\" ]) PartialUniverse ( BaseUniverse ) \u00b6 Attributes: Name Type Description _data dict The data we get back from the endpoint. _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int The universe ID. name str The name of the universe. root_place BasePlace The universe's root place. __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The raw data. required Source code in roblox/partials/partialuniverse.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The raw data. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . id : int = data [ \"id\" ] super () . __init__ ( shared = shared , universe_id = self . id ) self . name : str = data [ \"name\" ] self . root_place : BasePlace = BasePlace ( shared = shared , place_id = data [ \"rootPlaceId\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/partials/partialuniverse.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"partialuniverse"},{"location":"reference/roblox/partials/partialuniverse/#roblox.partials.partialuniverse","text":"This file contains partial objects related to Roblox universes.","title":"partialuniverse"},{"location":"reference/roblox/partials/partialuniverse/#roblox.partials.partialuniverse.ChatPartialUniverse","text":"Attributes: Name Type Description _data dict The data we get back from the endpoint. _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int The universe ID. root_place BasePlace The universe's root place.","title":"ChatPartialUniverse"},{"location":"reference/roblox/partials/partialuniverse/#roblox.partials.partialuniverse.ChatPartialUniverse.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The raw data. required Source code in roblox/partials/partialuniverse.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The raw data. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . id : int = data [ \"universeId\" ] super () . __init__ ( shared = shared , universe_id = self . id ) self . root_place : BasePlace = BasePlace ( shared = shared , place_id = data [ \"rootPlaceId\" ])","title":"__init__()"},{"location":"reference/roblox/partials/partialuniverse/#roblox.partials.partialuniverse.PartialUniverse","text":"Attributes: Name Type Description _data dict The data we get back from the endpoint. _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int The universe ID. name str The name of the universe. root_place BasePlace The universe's root place.","title":"PartialUniverse"},{"location":"reference/roblox/partials/partialuniverse/#roblox.partials.partialuniverse.PartialUniverse.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The raw data. required Source code in roblox/partials/partialuniverse.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The raw data. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . id : int = data [ \"id\" ] super () . __init__ ( shared = shared , universe_id = self . id ) self . name : str = data [ \"name\" ] self . root_place : BasePlace = BasePlace ( shared = shared , place_id = data [ \"rootPlaceId\" ])","title":"__init__()"},{"location":"reference/roblox/partials/partialuniverse/#roblox.partials.partialuniverse.PartialUniverse.__repr__","text":"Source code in roblox/partials/partialuniverse.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/partials/partialuser/","text":"roblox.partials.partialuser \u00b6 This file contains partial objects related to Roblox users. PartialUser ( BaseUser ) \u00b6 Attributes: Name Type Description _data dict The data we get back from the endpoint. _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int Id of the user name str Name of the user display_name str display name of the user __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The data form the endpoint. required Source code in roblox/partials/partialuser.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The data form the endpoint. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . id : int = data . get ( \"id\" ) or data . get ( \"userId\" ) or data . get ( \"Id\" ) super () . __init__ ( shared = shared , user_id = self . id ) self . name : str = data . get ( \"name\" ) or data . get ( \"Name\" ) or data . get ( \"username\" ) or data . get ( \"Username\" ) self . display_name : str = data . get ( \"displayName\" ) __repr__ ( self ) special \u00b6 Source code in roblox/partials/partialuser.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} display_name= { self . display_name !r} >\" RequestedUsernamePartialUser ( PartialUser ) \u00b6 Attributes: Name Type Description requested_username Username they requested __init__ ( self , shared : ClientSharedObject , data : dict ) special \u00b6 Source code in roblox/partials/partialuser.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The data form the endpoint. \"\"\" super () . __init__ ( shared = shared , data = data ) self . requested_username = data . get ( \"requestedUsername\" )","title":"partialuser"},{"location":"reference/roblox/partials/partialuser/#roblox.partials.partialuser","text":"This file contains partial objects related to Roblox users.","title":"partialuser"},{"location":"reference/roblox/partials/partialuser/#roblox.partials.partialuser.PartialUser","text":"Attributes: Name Type Description _data dict The data we get back from the endpoint. _shared ClientSharedObject The shared object, which is passed to all objects this client generates. id int Id of the user name str Name of the user display_name str display name of the user","title":"PartialUser"},{"location":"reference/roblox/partials/partialuser/#roblox.partials.partialuser.PartialUser.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required data dict The data form the endpoint. required Source code in roblox/partials/partialuser.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The data form the endpoint. \"\"\" self . _shared : ClientSharedObject = shared self . _data : dict = data self . id : int = data . get ( \"id\" ) or data . get ( \"userId\" ) or data . get ( \"Id\" ) super () . __init__ ( shared = shared , user_id = self . id ) self . name : str = data . get ( \"name\" ) or data . get ( \"Name\" ) or data . get ( \"username\" ) or data . get ( \"Username\" ) self . display_name : str = data . get ( \"displayName\" )","title":"__init__()"},{"location":"reference/roblox/partials/partialuser/#roblox.partials.partialuser.PartialUser.__repr__","text":"Source code in roblox/partials/partialuser.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} display_name= { self . display_name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/partials/partialuser/#roblox.partials.partialuser.RequestedUsernamePartialUser","text":"Attributes: Name Type Description requested_username Username they requested","title":"RequestedUsernamePartialUser"},{"location":"reference/roblox/partials/partialuser/#roblox.partials.partialuser.RequestedUsernamePartialUser.__init__","text":"Source code in roblox/partials/partialuser.py def __init__ ( self , shared : ClientSharedObject , data : dict ): \"\"\" Arguments: shared: The ClientSharedObject. data: The data form the endpoint. \"\"\" super () . __init__ ( shared = shared , data = data ) self . requested_username = data . get ( \"requestedUsername\" )","title":"__init__()"},{"location":"reference/roblox/utilities/__init__/","text":"roblox.utilities.__init__ special \u00b6 Contains utilities used internally for ro.py.","title":"__init__"},{"location":"reference/roblox/utilities/__init__/#roblox.utilities.__init__","text":"Contains utilities used internally for ro.py.","title":"__init__"},{"location":"reference/roblox/utilities/exceptions/","text":"roblox.utilities.exceptions \u00b6 Contains exceptions used by ro.py. BadRequest ( HTTPException ) \u00b6 HTTP exception raised for status code 400. Forbidden ( HTTPException ) \u00b6 HTTP exception raised for status code 403. This usually means the X-CSRF-Token was not properly provided. HTTPException ( RobloxException ) \u00b6 Exception that's raised when an HTTP request fails. __init__ ( self , response : Response , errors : Optional [ list ] = None ) special \u00b6 Parameters: Name Type Description Default response Response The raw response object. required errors Optional[list] A list of errors. None Source code in roblox/utilities/exceptions.py def __init__ ( self , response : Response , errors : Optional [ list ] = None ): \"\"\" Arguments: response: The raw response object. errors: A list of errors. \"\"\" self . response : Response = response self . status : int = response . status_code self . errors : List [ ResponseError ] if errors : self . errors : List [ ResponseError ] = [ ResponseError ( data = error_data ) for error_data in errors ] else : self . errors = [] if self . errors : error_string = self . _generate_string () super () . __init__ ( f \" { response . status_code } { response . reason_phrase } : { response . url } . \\n\\n Errors: \\n { error_string } \" ) else : super () . __init__ ( f \" { response . status_code } { response . reason_phrase } : { response . url } \" ) InternalServerError ( HTTPException ) \u00b6 HTTP exception raised for status code 500. This usually means that there was an issue on Roblox's end, but due to faulty coding on Roblox's part this can sometimes mean that an endpoint used internally was disabled or that invalid parameters were passed. InvalidRole ( RobloxException ) \u00b6 Raised when a role doesn't exist. NoMoreItems ( Exception ) \u00b6 Raised when there are no more items left to iterate through. NotFound ( HTTPException ) \u00b6 HTTP exception raised for status code 404. This usually means we have an internal URL issue - please make a GitHub issue about this! ResponseError \u00b6 Represents an error returned by a Roblox game server. __init__ ( self , data : dict ) special \u00b6 Source code in roblox/utilities/exceptions.py def __init__ ( self , data : dict ): self . code : int = data [ \"code\" ] self . message : Optional [ str ] = data . get ( \"message\" ) self . user_facing_message : Optional [ str ] = data . get ( \"userFacingMessage\" ) self . field : Optional [ str ] = data . get ( \"field\" ) self . retryable : Optional [ str ] = data . get ( \"retryable\" ) RobloxException ( Exception ) \u00b6 Base exception for all of ro.py. TooManyRequests ( HTTPException ) \u00b6 HTTP exception raised for status code 429. This means that Roblox has ratelimited you. Unauthorized ( HTTPException ) \u00b6 HTTP exception raised for status code 401. This usually means you aren't properly authenticated. get_exception_from_status_code ( code : int ) -> Type [ roblox . utilities . exceptions . HTTPException ] \u00b6 Gets an exception that should be raised instead of the generic HTTPException for this status code. Source code in roblox/utilities/exceptions.py def get_exception_from_status_code ( code : int ) -> Type [ HTTPException ]: \"\"\" Gets an exception that should be raised instead of the generic HTTPException for this status code. \"\"\" return _codes_exceptions . get ( code ) or HTTPException","title":"exceptions"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions","text":"Contains exceptions used by ro.py.","title":"exceptions"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.BadRequest","text":"HTTP exception raised for status code 400.","title":"BadRequest"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.Forbidden","text":"HTTP exception raised for status code 403. This usually means the X-CSRF-Token was not properly provided.","title":"Forbidden"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.HTTPException","text":"Exception that's raised when an HTTP request fails.","title":"HTTPException"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.HTTPException.__init__","text":"Parameters: Name Type Description Default response Response The raw response object. required errors Optional[list] A list of errors. None Source code in roblox/utilities/exceptions.py def __init__ ( self , response : Response , errors : Optional [ list ] = None ): \"\"\" Arguments: response: The raw response object. errors: A list of errors. \"\"\" self . response : Response = response self . status : int = response . status_code self . errors : List [ ResponseError ] if errors : self . errors : List [ ResponseError ] = [ ResponseError ( data = error_data ) for error_data in errors ] else : self . errors = [] if self . errors : error_string = self . _generate_string () super () . __init__ ( f \" { response . status_code } { response . reason_phrase } : { response . url } . \\n\\n Errors: \\n { error_string } \" ) else : super () . __init__ ( f \" { response . status_code } { response . reason_phrase } : { response . url } \" )","title":"__init__()"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.InternalServerError","text":"HTTP exception raised for status code 500. This usually means that there was an issue on Roblox's end, but due to faulty coding on Roblox's part this can sometimes mean that an endpoint used internally was disabled or that invalid parameters were passed.","title":"InternalServerError"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.InvalidRole","text":"Raised when a role doesn't exist.","title":"InvalidRole"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.NoMoreItems","text":"Raised when there are no more items left to iterate through.","title":"NoMoreItems"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.NotFound","text":"HTTP exception raised for status code 404. This usually means we have an internal URL issue - please make a GitHub issue about this!","title":"NotFound"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.ResponseError","text":"Represents an error returned by a Roblox game server.","title":"ResponseError"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.ResponseError.__init__","text":"Source code in roblox/utilities/exceptions.py def __init__ ( self , data : dict ): self . code : int = data [ \"code\" ] self . message : Optional [ str ] = data . get ( \"message\" ) self . user_facing_message : Optional [ str ] = data . get ( \"userFacingMessage\" ) self . field : Optional [ str ] = data . get ( \"field\" ) self . retryable : Optional [ str ] = data . get ( \"retryable\" )","title":"__init__()"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.RobloxException","text":"Base exception for all of ro.py.","title":"RobloxException"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.TooManyRequests","text":"HTTP exception raised for status code 429. This means that Roblox has ratelimited you.","title":"TooManyRequests"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.Unauthorized","text":"HTTP exception raised for status code 401. This usually means you aren't properly authenticated.","title":"Unauthorized"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.get_exception_from_status_code","text":"Gets an exception that should be raised instead of the generic HTTPException for this status code. Source code in roblox/utilities/exceptions.py def get_exception_from_status_code ( code : int ) -> Type [ HTTPException ]: \"\"\" Gets an exception that should be raised instead of the generic HTTPException for this status code. \"\"\" return _codes_exceptions . get ( code ) or HTTPException","title":"get_exception_from_status_code()"},{"location":"reference/roblox/utilities/iterators/","text":"roblox.utilities.iterators \u00b6 This module contains iterators used internally by ro.py to provide paginated information. Iterator \u00b6 Represents a basic iterator which all iterators should implement. __aiter__ ( self ) special \u00b6 Source code in roblox/utilities/iterators.py def __aiter__ ( self ): return self . _items __init__ ( self ) special \u00b6 Source code in roblox/utilities/iterators.py def __init__ ( self ): self . _items = IteratorItems ( self ) self . _pages = IteratorPages ( self ) flatten ( self ) -> list async \u00b6 Flattens the data into a list. Source code in roblox/utilities/iterators.py async def flatten ( self ) -> list : \"\"\" Flattens the data into a list. \"\"\" items : list = [] while True : try : new_items = await self . next () items += new_items except NoMoreItems : break return items items ( self ) -> IteratorItems \u00b6 Returns an AsyncIterable containing each iterator item. Source code in roblox/utilities/iterators.py def items ( self ) -> IteratorItems : \"\"\" Returns an AsyncIterable containing each iterator item. \"\"\" return self . _items next ( self ) async \u00b6 Moves to the next page and returns that page's data. Source code in roblox/utilities/iterators.py async def next ( self ): \"\"\" Moves to the next page and returns that page's data. \"\"\" raise NotImplementedError pages ( self ) -> IteratorPages \u00b6 Returns an AsyncIterable containing each iterator page. Each page is a list of items. Source code in roblox/utilities/iterators.py def pages ( self ) -> IteratorPages : \"\"\" Returns an AsyncIterable containing each iterator page. Each page is a list of items. \"\"\" return self . _pages IteratorItems ( AsyncIterator , Generic ) \u00b6 Represents the items inside of an iterator. __aiter__ ( self ) special \u00b6 Source code in roblox/utilities/iterators.py def __aiter__ ( self ): self . _position = 0 self . _items = [] return self __anext__ ( self ) async special \u00b6 Source code in roblox/utilities/iterators.py async def __anext__ ( self ): if self . _position == len ( self . _items ): # we are at the end of our current page of items. start again with a new page self . _position = 0 try : # get new items self . _items = await self . _iterator . next () except NoMoreItems : # if there aren't any more items, reset and break the loop self . _position = 0 self . _items = [] raise StopAsyncIteration # if we got here we know there are more items try : item = self . _items [ self . _position ] except IndexError : # edge case for group roles raise StopAsyncIteration # we advance the iterator by one for the next iteration self . _position += 1 return item __init__ ( self , iterator : Iterator ) special \u00b6 Source code in roblox/utilities/iterators.py def __init__ ( self , iterator : Iterator ): self . _iterator = iterator self . _position : int = 0 self . _items : list = [] IteratorPages ( AsyncIterator , Generic ) \u00b6 Represents the pages inside of an iterator. __aiter__ ( self ) special \u00b6 Source code in roblox/utilities/iterators.py def __aiter__ ( self ): return self __anext__ ( self ) async special \u00b6 Source code in roblox/utilities/iterators.py async def __anext__ ( self ): try : page = await self . _iterator . next () return page except NoMoreItems : raise StopAsyncIteration __init__ ( self , iterator : Iterator ) special \u00b6 Source code in roblox/utilities/iterators.py def __init__ ( self , iterator : Iterator ): self . _iterator = iterator PageIterator ( Iterator ) \u00b6 Represents a cursor-based, paginated Roblox object. For more information about how cursor-based pagination works, see https://robloxapi.wiki/wiki/Pagination . To use, iterate over the object with async for : async for item in iterator : print ( item ) Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. url str The endpoint to hit for new page data. sort_order SortOrder The sort order to use for returned data. limit int How much data should be returned per-page. extra_parameters dict Extra parameters to pass to the endpoint. handler Callable A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs dict Extra keyword arguments to pass to the handler. next_cursor str Cursor to use to advance to the next page. previous_cursor str Cursor to use to advance to the previous page. iterator_position int What position in the iterator_items the iterator is currently at. iterator_items list List of current items the iterator is working on. __init__ ( self , shared : ClientSharedObject , url : str , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > , limit : int = 10 , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ) special \u00b6 Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required url str The endpoint to hit for new page data. required sort_order SortOrder The sort order to use for returned data. <SortOrder.Ascending: 'Asc'> limit int How much data should be returned per-page. 10 extra_parameters Optional[dict] Extra parameters to pass to the endpoint. None handler Optional[Callable] A callable object to use to convert raw endpoint data to parsed objects. None handler_kwargs Optional[dict] Extra keyword arguments to pass to the handler. None Source code in roblox/utilities/iterators.py def __init__ ( self , shared : ClientSharedObject , url : str , sort_order : SortOrder = SortOrder . Ascending , limit : int = 10 , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ): \"\"\" Parameters: shared: The ClientSharedObject. url: The endpoint to hit for new page data. sort_order: The sort order to use for returned data. limit: How much data should be returned per-page. extra_parameters: Extra parameters to pass to the endpoint. handler: A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs: Extra keyword arguments to pass to the handler. \"\"\" super () . __init__ () self . _shared : ClientSharedObject = shared # store some basic arguments in the object self . url : str = url self . sort_order : SortOrder = sort_order self . limit : int = limit self . extra_parameters : dict = extra_parameters or {} self . handler : Callable = handler self . handler_kwargs : dict = handler_kwargs or {} # cursors to use for next, previous self . next_cursor : str = \"\" self . previous_cursor : str = \"\" # iter values self . iterator_position : int = 0 self . iterator_items : list = [] self . next_started : bool = False next ( self ) async \u00b6 Advances the iterator to the next page. Source code in roblox/utilities/iterators.py async def next ( self ): \"\"\" Advances the iterator to the next page. \"\"\" if self . next_started and not self . next_cursor : # if we just started and there is no cursor # this is the last page, because we can go back but not forward # so raise the exception raise NoMoreItems ( \"No more items.\" ) if not self . next_started : self . next_started = True page_response = await self . _shared . requests . get ( url = self . url , params = { \"cursor\" : self . next_cursor , \"limit\" : self . limit , \"sortOrder\" : self . sort_order . value , ** self . extra_parameters } ) page_data = page_response . json () # fill in cursors self . next_cursor = page_data [ \"nextPageCursor\" ] self . previous_cursor = page_data [ \"previousPageCursor\" ] data = page_data [ \"data\" ] if self . handler : data = [ self . handler ( shared = self . _shared , data = item_data , ** self . handler_kwargs ) for item_data in data ] return data PageNumberIterator ( Iterator ) \u00b6 Represents an iterator that is advanced with page numbers and sizes, like those seen on chat.roblox.com. __init__ ( self , shared : ClientSharedObject , url : str , page_size : int = 10 , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ) special \u00b6 Source code in roblox/utilities/iterators.py def __init__ ( self , shared : ClientSharedObject , url : str , page_size : int = 10 , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ): super () . __init__ () self . _shared : ClientSharedObject = shared self . url : str = url self . page_number : int = 1 self . page_size : int = page_size self . extra_parameters : dict = extra_parameters or {} self . handler : Callable = handler self . handler_kwargs : dict = handler_kwargs or {} self . iterator_position = 0 self . iterator_items = [] next ( self ) async \u00b6 Advances the iterator to the next page. Source code in roblox/utilities/iterators.py async def next ( self ): \"\"\" Advances the iterator to the next page. \"\"\" page_response = await self . _shared . requests . get ( url = self . url , params = { \"pageNumber\" : self . page_number , \"pageSize\" : self . page_size , ** self . extra_parameters } ) data = page_response . json () if len ( data ) == 0 : raise NoMoreItems ( \"No more items.\" ) self . page_number += 1 if self . handler : data = [ self . handler ( shared = self . _shared , data = item_data , ** self . handler_kwargs ) for item_data in data ] return data SortOrder ( Enum ) \u00b6 Order in which page data should load in. Ascending \u00b6 Descending \u00b6","title":"iterators"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators","text":"This module contains iterators used internally by ro.py to provide paginated information.","title":"iterators"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.Iterator","text":"Represents a basic iterator which all iterators should implement.","title":"Iterator"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.Iterator.__aiter__","text":"Source code in roblox/utilities/iterators.py def __aiter__ ( self ): return self . _items","title":"__aiter__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.Iterator.__init__","text":"Source code in roblox/utilities/iterators.py def __init__ ( self ): self . _items = IteratorItems ( self ) self . _pages = IteratorPages ( self )","title":"__init__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.Iterator.flatten","text":"Flattens the data into a list. Source code in roblox/utilities/iterators.py async def flatten ( self ) -> list : \"\"\" Flattens the data into a list. \"\"\" items : list = [] while True : try : new_items = await self . next () items += new_items except NoMoreItems : break return items","title":"flatten()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.Iterator.items","text":"Returns an AsyncIterable containing each iterator item. Source code in roblox/utilities/iterators.py def items ( self ) -> IteratorItems : \"\"\" Returns an AsyncIterable containing each iterator item. \"\"\" return self . _items","title":"items()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.Iterator.next","text":"Moves to the next page and returns that page's data. Source code in roblox/utilities/iterators.py async def next ( self ): \"\"\" Moves to the next page and returns that page's data. \"\"\" raise NotImplementedError","title":"next()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.Iterator.pages","text":"Returns an AsyncIterable containing each iterator page. Each page is a list of items. Source code in roblox/utilities/iterators.py def pages ( self ) -> IteratorPages : \"\"\" Returns an AsyncIterable containing each iterator page. Each page is a list of items. \"\"\" return self . _pages","title":"pages()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorItems","text":"Represents the items inside of an iterator.","title":"IteratorItems"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorItems.__aiter__","text":"Source code in roblox/utilities/iterators.py def __aiter__ ( self ): self . _position = 0 self . _items = [] return self","title":"__aiter__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorItems.__anext__","text":"Source code in roblox/utilities/iterators.py async def __anext__ ( self ): if self . _position == len ( self . _items ): # we are at the end of our current page of items. start again with a new page self . _position = 0 try : # get new items self . _items = await self . _iterator . next () except NoMoreItems : # if there aren't any more items, reset and break the loop self . _position = 0 self . _items = [] raise StopAsyncIteration # if we got here we know there are more items try : item = self . _items [ self . _position ] except IndexError : # edge case for group roles raise StopAsyncIteration # we advance the iterator by one for the next iteration self . _position += 1 return item","title":"__anext__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorItems.__init__","text":"Source code in roblox/utilities/iterators.py def __init__ ( self , iterator : Iterator ): self . _iterator = iterator self . _position : int = 0 self . _items : list = []","title":"__init__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorPages","text":"Represents the pages inside of an iterator.","title":"IteratorPages"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorPages.__aiter__","text":"Source code in roblox/utilities/iterators.py def __aiter__ ( self ): return self","title":"__aiter__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorPages.__anext__","text":"Source code in roblox/utilities/iterators.py async def __anext__ ( self ): try : page = await self . _iterator . next () return page except NoMoreItems : raise StopAsyncIteration","title":"__anext__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorPages.__init__","text":"Source code in roblox/utilities/iterators.py def __init__ ( self , iterator : Iterator ): self . _iterator = iterator","title":"__init__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.PageIterator","text":"Represents a cursor-based, paginated Roblox object. For more information about how cursor-based pagination works, see https://robloxapi.wiki/wiki/Pagination . To use, iterate over the object with async for : async for item in iterator : print ( item ) Attributes: Name Type Description _shared ClientSharedObject The ClientSharedObject. url str The endpoint to hit for new page data. sort_order SortOrder The sort order to use for returned data. limit int How much data should be returned per-page. extra_parameters dict Extra parameters to pass to the endpoint. handler Callable A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs dict Extra keyword arguments to pass to the handler. next_cursor str Cursor to use to advance to the next page. previous_cursor str Cursor to use to advance to the previous page. iterator_position int What position in the iterator_items the iterator is currently at. iterator_items list List of current items the iterator is working on.","title":"PageIterator"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.PageIterator.__init__","text":"Parameters: Name Type Description Default shared ClientSharedObject The ClientSharedObject. required url str The endpoint to hit for new page data. required sort_order SortOrder The sort order to use for returned data. <SortOrder.Ascending: 'Asc'> limit int How much data should be returned per-page. 10 extra_parameters Optional[dict] Extra parameters to pass to the endpoint. None handler Optional[Callable] A callable object to use to convert raw endpoint data to parsed objects. None handler_kwargs Optional[dict] Extra keyword arguments to pass to the handler. None Source code in roblox/utilities/iterators.py def __init__ ( self , shared : ClientSharedObject , url : str , sort_order : SortOrder = SortOrder . Ascending , limit : int = 10 , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ): \"\"\" Parameters: shared: The ClientSharedObject. url: The endpoint to hit for new page data. sort_order: The sort order to use for returned data. limit: How much data should be returned per-page. extra_parameters: Extra parameters to pass to the endpoint. handler: A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs: Extra keyword arguments to pass to the handler. \"\"\" super () . __init__ () self . _shared : ClientSharedObject = shared # store some basic arguments in the object self . url : str = url self . sort_order : SortOrder = sort_order self . limit : int = limit self . extra_parameters : dict = extra_parameters or {} self . handler : Callable = handler self . handler_kwargs : dict = handler_kwargs or {} # cursors to use for next, previous self . next_cursor : str = \"\" self . previous_cursor : str = \"\" # iter values self . iterator_position : int = 0 self . iterator_items : list = [] self . next_started : bool = False","title":"__init__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.PageIterator.next","text":"Advances the iterator to the next page. Source code in roblox/utilities/iterators.py async def next ( self ): \"\"\" Advances the iterator to the next page. \"\"\" if self . next_started and not self . next_cursor : # if we just started and there is no cursor # this is the last page, because we can go back but not forward # so raise the exception raise NoMoreItems ( \"No more items.\" ) if not self . next_started : self . next_started = True page_response = await self . _shared . requests . get ( url = self . url , params = { \"cursor\" : self . next_cursor , \"limit\" : self . limit , \"sortOrder\" : self . sort_order . value , ** self . extra_parameters } ) page_data = page_response . json () # fill in cursors self . next_cursor = page_data [ \"nextPageCursor\" ] self . previous_cursor = page_data [ \"previousPageCursor\" ] data = page_data [ \"data\" ] if self . handler : data = [ self . handler ( shared = self . _shared , data = item_data , ** self . handler_kwargs ) for item_data in data ] return data","title":"next()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.PageNumberIterator","text":"Represents an iterator that is advanced with page numbers and sizes, like those seen on chat.roblox.com.","title":"PageNumberIterator"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.PageNumberIterator.__init__","text":"Source code in roblox/utilities/iterators.py def __init__ ( self , shared : ClientSharedObject , url : str , page_size : int = 10 , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ): super () . __init__ () self . _shared : ClientSharedObject = shared self . url : str = url self . page_number : int = 1 self . page_size : int = page_size self . extra_parameters : dict = extra_parameters or {} self . handler : Callable = handler self . handler_kwargs : dict = handler_kwargs or {} self . iterator_position = 0 self . iterator_items = []","title":"__init__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.PageNumberIterator.next","text":"Advances the iterator to the next page. Source code in roblox/utilities/iterators.py async def next ( self ): \"\"\" Advances the iterator to the next page. \"\"\" page_response = await self . _shared . requests . get ( url = self . url , params = { \"pageNumber\" : self . page_number , \"pageSize\" : self . page_size , ** self . extra_parameters } ) data = page_response . json () if len ( data ) == 0 : raise NoMoreItems ( \"No more items.\" ) self . page_number += 1 if self . handler : data = [ self . handler ( shared = self . _shared , data = item_data , ** self . handler_kwargs ) for item_data in data ] return data","title":"next()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.SortOrder","text":"Order in which page data should load in.","title":"SortOrder"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.SortOrder.Ascending","text":"","title":"Ascending"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.SortOrder.Descending","text":"","title":"Descending"},{"location":"reference/roblox/utilities/requests/","text":"roblox.utilities.requests \u00b6 This module contains classes used internally by ro.py for sending requests to Roblox endpoints. CleanAsyncClient ( AsyncClient ) \u00b6 This is a clean-on-delete version of httpx.AsyncClient. __del__ ( self ) special \u00b6 Source code in roblox/utilities/requests.py def __del__ ( self ): try : asyncio . get_event_loop () . create_task ( self . aclose ()) except RuntimeError : pass __init__ ( self ) special \u00b6 Source code in roblox/utilities/requests.py def __init__ ( self ): super () . __init__ () Requests \u00b6 A special request object that implements special functionality required to connect to some Roblox endpoints. Attributes: Name Type Description session CleanAsyncClient Base session object to use when sending requests. xcsrf_token_name str The header that will contain the Cross-Site Request Forgery token xcsrf_allowed_methods dict[str, bool] The methods allowed for url_generator URL generator for ban parsing. __init__ ( self , url_generator : URLGenerator = None , session : CleanAsyncClient = None , xcsrf_token_name : str = 'X-CSRF-Token' ) special \u00b6 Parameters: Name Type Description Default session CleanAsyncClient A custom session object to use for sending requests, compatible with httpx.AsyncClient. None xcsrf_token_name str The header to place X-CSRF-Token data into. 'X-CSRF-Token' url_generator URLGenerator URL generator for ban parsing. None Source code in roblox/utilities/requests.py def __init__ ( self , url_generator : URLGenerator = None , session : CleanAsyncClient = None , xcsrf_token_name : str = \"X-CSRF-Token\" ): \"\"\" Arguments: session: A custom session object to use for sending requests, compatible with httpx.AsyncClient. xcsrf_token_name: The header to place X-CSRF-Token data into. url_generator: URL generator for ban parsing. \"\"\" self . _url_generator : Optional [ URLGenerator ] = url_generator self . session : CleanAsyncClient if session is None : self . session = CleanAsyncClient () else : self . session = session self . xcsrf_token_name : str = xcsrf_token_name self . xcsrf_allowed_methods : dict [ str , bool ] = { \"post\" : True , \"put\" : True , \"patch\" : True , \"delete\" : True } self . session . headers [ \"User-Agent\" ] = \"Roblox/WinInet\" self . session . headers [ \"Referer\" ] = \"www.roblox.com\" delete ( self , * args , ** kwargs ) -> Response async \u00b6 Sends a DELETE request. Returns: Type Description Response Response Source code in roblox/utilities/requests.py async def delete ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a DELETE request. Returns: Response \"\"\" return await self . request ( \"DELETE\" , * args , ** kwargs ) get ( self , * args , ** kwargs ) -> Response async \u00b6 Sends a GET request. Returns: Type Description Response Response Source code in roblox/utilities/requests.py async def get ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a GET request. Returns: Response \"\"\" return await self . request ( \"GET\" , * args , ** kwargs ) patch ( self , * args , ** kwargs ) -> Response async \u00b6 Sends a PATCH request. Returns: Type Description Response Response Source code in roblox/utilities/requests.py async def patch ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a PATCH request. Returns: Response \"\"\" return await self . request ( \"PATCH\" , * args , ** kwargs ) post ( self , * args , ** kwargs ) -> Response async \u00b6 Sends a POST request. Returns: Type Description Response Response Source code in roblox/utilities/requests.py async def post ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a POST request. Returns: Response \"\"\" return await self . request ( \"POST\" , * args , ** kwargs ) put ( self , * args , ** kwargs ) -> Response async \u00b6 Sends a PATCH request. Returns: Type Description Response Response Source code in roblox/utilities/requests.py async def put ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a PATCH request. Returns: Response \"\"\" return await self . request ( \"PUT\" , * args , ** kwargs ) request ( self , method : str , * args , ** kwargs ) -> Response async \u00b6 Parameters: Name Type Description Default method str method used for the request required Returns: Type Description Response Response Source code in roblox/utilities/requests.py async def request ( self , method : str , * args , ** kwargs ) -> Response : \"\"\" Arguments: method: method used for the request Returns: Response \"\"\" handle_xcsrf_token = kwargs . pop ( \"handle_xcsrf_token\" , True ) skip_roblox = kwargs . pop ( \"skip_roblox\" , False ) response = await self . session . request ( method , * args , ** kwargs ) if skip_roblox : return response method = method . lower () if handle_xcsrf_token and self . xcsrf_token_name in response . headers and self . xcsrf_allowed_methods . get ( method ): self . session . headers [ self . xcsrf_token_name ] = response . headers [ self . xcsrf_token_name ] if response . status_code == 403 : # Request failed, send it again response = await self . session . request ( method , * args , ** kwargs ) if kwargs . get ( \"stream\" ): # Streamed responses should not be decoded, so we immediately return the response. return response if response . is_error : # Something went wrong, parse an error content_type = response . headers . get ( \"Content-Type\" ) errors = None if content_type and content_type . startswith ( \"application/json\" ): data = None try : data = response . json () except JSONDecodeError : pass errors = data and data . get ( \"errors\" ) exception = get_exception_from_status_code ( response . status_code )( response = response , errors = errors ) raise exception else : return response","title":"requests"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests","text":"This module contains classes used internally by ro.py for sending requests to Roblox endpoints.","title":"requests"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.CleanAsyncClient","text":"This is a clean-on-delete version of httpx.AsyncClient.","title":"CleanAsyncClient"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.CleanAsyncClient.__del__","text":"Source code in roblox/utilities/requests.py def __del__ ( self ): try : asyncio . get_event_loop () . create_task ( self . aclose ()) except RuntimeError : pass","title":"__del__()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.CleanAsyncClient.__init__","text":"Source code in roblox/utilities/requests.py def __init__ ( self ): super () . __init__ ()","title":"__init__()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests","text":"A special request object that implements special functionality required to connect to some Roblox endpoints. Attributes: Name Type Description session CleanAsyncClient Base session object to use when sending requests. xcsrf_token_name str The header that will contain the Cross-Site Request Forgery token xcsrf_allowed_methods dict[str, bool] The methods allowed for url_generator URL generator for ban parsing.","title":"Requests"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests.__init__","text":"Parameters: Name Type Description Default session CleanAsyncClient A custom session object to use for sending requests, compatible with httpx.AsyncClient. None xcsrf_token_name str The header to place X-CSRF-Token data into. 'X-CSRF-Token' url_generator URLGenerator URL generator for ban parsing. None Source code in roblox/utilities/requests.py def __init__ ( self , url_generator : URLGenerator = None , session : CleanAsyncClient = None , xcsrf_token_name : str = \"X-CSRF-Token\" ): \"\"\" Arguments: session: A custom session object to use for sending requests, compatible with httpx.AsyncClient. xcsrf_token_name: The header to place X-CSRF-Token data into. url_generator: URL generator for ban parsing. \"\"\" self . _url_generator : Optional [ URLGenerator ] = url_generator self . session : CleanAsyncClient if session is None : self . session = CleanAsyncClient () else : self . session = session self . xcsrf_token_name : str = xcsrf_token_name self . xcsrf_allowed_methods : dict [ str , bool ] = { \"post\" : True , \"put\" : True , \"patch\" : True , \"delete\" : True } self . session . headers [ \"User-Agent\" ] = \"Roblox/WinInet\" self . session . headers [ \"Referer\" ] = \"www.roblox.com\"","title":"__init__()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests.delete","text":"Sends a DELETE request. Returns: Type Description Response Response Source code in roblox/utilities/requests.py async def delete ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a DELETE request. Returns: Response \"\"\" return await self . request ( \"DELETE\" , * args , ** kwargs )","title":"delete()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests.get","text":"Sends a GET request. Returns: Type Description Response Response Source code in roblox/utilities/requests.py async def get ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a GET request. Returns: Response \"\"\" return await self . request ( \"GET\" , * args , ** kwargs )","title":"get()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests.patch","text":"Sends a PATCH request. Returns: Type Description Response Response Source code in roblox/utilities/requests.py async def patch ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a PATCH request. Returns: Response \"\"\" return await self . request ( \"PATCH\" , * args , ** kwargs )","title":"patch()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests.post","text":"Sends a POST request. Returns: Type Description Response Response Source code in roblox/utilities/requests.py async def post ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a POST request. Returns: Response \"\"\" return await self . request ( \"POST\" , * args , ** kwargs )","title":"post()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests.put","text":"Sends a PATCH request. Returns: Type Description Response Response Source code in roblox/utilities/requests.py async def put ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a PATCH request. Returns: Response \"\"\" return await self . request ( \"PUT\" , * args , ** kwargs )","title":"put()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests.request","text":"Parameters: Name Type Description Default method str method used for the request required Returns: Type Description Response Response Source code in roblox/utilities/requests.py async def request ( self , method : str , * args , ** kwargs ) -> Response : \"\"\" Arguments: method: method used for the request Returns: Response \"\"\" handle_xcsrf_token = kwargs . pop ( \"handle_xcsrf_token\" , True ) skip_roblox = kwargs . pop ( \"skip_roblox\" , False ) response = await self . session . request ( method , * args , ** kwargs ) if skip_roblox : return response method = method . lower () if handle_xcsrf_token and self . xcsrf_token_name in response . headers and self . xcsrf_allowed_methods . get ( method ): self . session . headers [ self . xcsrf_token_name ] = response . headers [ self . xcsrf_token_name ] if response . status_code == 403 : # Request failed, send it again response = await self . session . request ( method , * args , ** kwargs ) if kwargs . get ( \"stream\" ): # Streamed responses should not be decoded, so we immediately return the response. return response if response . is_error : # Something went wrong, parse an error content_type = response . headers . get ( \"Content-Type\" ) errors = None if content_type and content_type . startswith ( \"application/json\" ): data = None try : data = response . json () except JSONDecodeError : pass errors = data and data . get ( \"errors\" ) exception = get_exception_from_status_code ( response . status_code )( response = response , errors = errors ) raise exception else : return response","title":"request()"},{"location":"reference/roblox/utilities/shared/","text":"roblox.utilities.shared \u00b6 This module contains the ClientSharedObject, which is shared between the client and all objects it generates. ClientSharedObject \u00b6 This object is shared between the client and all objects it generates. Attributes: Name Type Description client Client method used for the request requests Requests Everything and noting. url_generator URLGenerator Everything and noting. presence_provider Optional[PresenceProvider] provider for all presence stuff thumbnail_provider Optional[ThumbnailProvider] provider for all thumbnail stuff delivery_provider Optional[DeliveryProvider] provider for all delivery stuff chat_provider Optional[ChatProvider] provider for chat account_provider Optional[AccountProvider] provider for account __init__ ( self , client : Client , requests : Requests , url_generator : URLGenerator ) special \u00b6 Parameters: Name Type Description Default client Client method used for the request required requests Requests Everything and noting. required url_generator URLGenerator Everything and noting. required Source code in roblox/utilities/shared.py def __init__ ( self , client : Client , requests : Requests , url_generator : URLGenerator ): \"\"\" Arguments: client: method used for the request requests: Everything and noting. url_generator: Everything and noting. \"\"\" self . client : Client = client self . requests : Requests = requests self . url_generator : URLGenerator = url_generator self . presence_provider : Optional [ PresenceProvider ] = None self . thumbnail_provider : Optional [ ThumbnailProvider ] = None self . delivery_provider : Optional [ DeliveryProvider ] = None self . chat_provider : Optional [ ChatProvider ] = None self . account_provider : Optional [ AccountProvider ] = None","title":"shared"},{"location":"reference/roblox/utilities/shared/#roblox.utilities.shared","text":"This module contains the ClientSharedObject, which is shared between the client and all objects it generates.","title":"shared"},{"location":"reference/roblox/utilities/shared/#roblox.utilities.shared.ClientSharedObject","text":"This object is shared between the client and all objects it generates. Attributes: Name Type Description client Client method used for the request requests Requests Everything and noting. url_generator URLGenerator Everything and noting. presence_provider Optional[PresenceProvider] provider for all presence stuff thumbnail_provider Optional[ThumbnailProvider] provider for all thumbnail stuff delivery_provider Optional[DeliveryProvider] provider for all delivery stuff chat_provider Optional[ChatProvider] provider for chat account_provider Optional[AccountProvider] provider for account","title":"ClientSharedObject"},{"location":"reference/roblox/utilities/shared/#roblox.utilities.shared.ClientSharedObject.__init__","text":"Parameters: Name Type Description Default client Client method used for the request required requests Requests Everything and noting. required url_generator URLGenerator Everything and noting. required Source code in roblox/utilities/shared.py def __init__ ( self , client : Client , requests : Requests , url_generator : URLGenerator ): \"\"\" Arguments: client: method used for the request requests: Everything and noting. url_generator: Everything and noting. \"\"\" self . client : Client = client self . requests : Requests = requests self . url_generator : URLGenerator = url_generator self . presence_provider : Optional [ PresenceProvider ] = None self . thumbnail_provider : Optional [ ThumbnailProvider ] = None self . delivery_provider : Optional [ DeliveryProvider ] = None self . chat_provider : Optional [ ChatProvider ] = None self . account_provider : Optional [ AccountProvider ] = None","title":"__init__()"},{"location":"reference/roblox/utilities/url/","text":"roblox.utilities.url \u00b6 This module contains functions and objects used internally by ro.py to generate URLs. cdn_site \u00b6 root_site \u00b6 URLGenerator \u00b6 Generates URLs based on a chosen base URL. Attributes: Name Type Description base_url The base URL __init__ ( self , base_url : str ) special \u00b6 Source code in roblox/utilities/url.py def __init__ ( self , base_url : str ): self . base_url = base_url get_subdomain ( self , subdomain : str , protocol : str = 'https' ) -> str \u00b6 Returns the full URL of a subdomain, given the base subdomain name. Parameters: Name Type Description Default subdomain str subdomain for the website required protocol str protocol used 'https' Source code in roblox/utilities/url.py def get_subdomain ( self , subdomain : str , protocol : str = \"https\" ) -> str : \"\"\" Returns the full URL of a subdomain, given the base subdomain name. Arguments: subdomain: subdomain for the website protocol: protocol used \"\"\" return f \" { protocol } :// { subdomain } . { self . base_url } \" get_url ( self , subdomain : str , path : str = '' , base_url : str = None , protocol : str = 'https' ) -> str \u00b6 Returns a full URl, given a subdomain name, protocol, and each. Parameters: Name Type Description Default subdomain str subdomain for the website required protocol str protocol used 'https' path str path to the data '' base_url str base url None Source code in roblox/utilities/url.py def get_url ( self , subdomain : str , path : str = \"\" , base_url : str = None , protocol : str = \"https\" , ) -> str : \"\"\" Returns a full URl, given a subdomain name, protocol, and each. Arguments: subdomain: subdomain for the website protocol: protocol used path: path to the data base_url: base url \"\"\" if base_url is None : base_url = self . base_url return f \" { protocol } :// { subdomain } . { base_url } / { path } \"","title":"url"},{"location":"reference/roblox/utilities/url/#roblox.utilities.url","text":"This module contains functions and objects used internally by ro.py to generate URLs.","title":"url"},{"location":"reference/roblox/utilities/url/#roblox.utilities.url.cdn_site","text":"","title":"cdn_site"},{"location":"reference/roblox/utilities/url/#roblox.utilities.url.root_site","text":"","title":"root_site"},{"location":"reference/roblox/utilities/url/#roblox.utilities.url.URLGenerator","text":"Generates URLs based on a chosen base URL. Attributes: Name Type Description base_url The base URL","title":"URLGenerator"},{"location":"reference/roblox/utilities/url/#roblox.utilities.url.URLGenerator.__init__","text":"Source code in roblox/utilities/url.py def __init__ ( self , base_url : str ): self . base_url = base_url","title":"__init__()"},{"location":"reference/roblox/utilities/url/#roblox.utilities.url.URLGenerator.get_subdomain","text":"Returns the full URL of a subdomain, given the base subdomain name. Parameters: Name Type Description Default subdomain str subdomain for the website required protocol str protocol used 'https' Source code in roblox/utilities/url.py def get_subdomain ( self , subdomain : str , protocol : str = \"https\" ) -> str : \"\"\" Returns the full URL of a subdomain, given the base subdomain name. Arguments: subdomain: subdomain for the website protocol: protocol used \"\"\" return f \" { protocol } :// { subdomain } . { self . base_url } \"","title":"get_subdomain()"},{"location":"reference/roblox/utilities/url/#roblox.utilities.url.URLGenerator.get_url","text":"Returns a full URl, given a subdomain name, protocol, and each. Parameters: Name Type Description Default subdomain str subdomain for the website required protocol str protocol used 'https' path str path to the data '' base_url str base url None Source code in roblox/utilities/url.py def get_url ( self , subdomain : str , path : str = \"\" , base_url : str = None , protocol : str = \"https\" , ) -> str : \"\"\" Returns a full URl, given a subdomain name, protocol, and each. Arguments: subdomain: subdomain for the website protocol: protocol used path: path to the data base_url: base url \"\"\" if base_url is None : base_url = self . base_url return f \" { protocol } :// { subdomain } . { base_url } / { path } \"","title":"get_url()"},{"location":"tutorial/","text":"This tutorial is intended for people building standalone applications. It expects basic Python knowledge but will explain almost everything you need. Make sure to read through the entire page instead of skimming it to ensure you don't miss anything important!","title":"Index"},{"location":"tutorial/authentication/","text":"Authentication \u00b6 To authenticate our client, we need our .ROBLOSECURITY token. To learn about why we need this and how to get it, please see ROBLOSECURITY . Once we have our token, we can add it to our client by passing it as the first parameter. Use this code, where TOKEN is the .ROBLOSECURITY token grabbed earlier, to authenticate your client. from roblox import Client client = Client ( \"TOKEN\" ) To test your token, run the following code: user = await client . get_authenticated_user () print ( \"ID:\" , user . id ) print ( \"Name:\" , user . name ) If this raises an error, or the name and ID differ from what is expected, follow the instructions and try again. The issue with this structure is that it is not secure. It's easy to slip up and copy your code and accidentally send someone your token, and it makes it harder to collaborate on code with others. Using a .env file \u00b6 To solve this problem, we'll create a separate file called .env which will contain our token. Your file should look like this, where TOKEN is the .ROBLOSECURITY token you grabbed earlier. ROBLOXTOKEN=TOKEN Place it in the same folder as your application's main file. Your file structure should look like this: . \u251c\u2500 .env \u2514\u2500 main.py Next, install the python-dotenv library with the following command: $ pip install python-dotenv Then, add these lines to the top of your code: import os from dotenv import load_dotenv After that, replace the code where you generate your client with this: load_dotenv () client = Client ( os . getenv ( \"ROBLOXTOKEN\" )) Test it with get_authenticated_user and you should be all set! Finished code import asyncio import os from dotenv import load_dotenv from roblox import Client client = Client ( os . getenv ( \"ROBLOXTOKEN\" )) async def main (): user = await client . get_authenticated_user () print ( \"ID:\" , user . id ) print ( \"Name:\" , user . name ) asyncio . get_event_loop () . run_until_complete ( main ())","title":"Authentication"},{"location":"tutorial/authentication/#authentication","text":"To authenticate our client, we need our .ROBLOSECURITY token. To learn about why we need this and how to get it, please see ROBLOSECURITY . Once we have our token, we can add it to our client by passing it as the first parameter. Use this code, where TOKEN is the .ROBLOSECURITY token grabbed earlier, to authenticate your client. from roblox import Client client = Client ( \"TOKEN\" ) To test your token, run the following code: user = await client . get_authenticated_user () print ( \"ID:\" , user . id ) print ( \"Name:\" , user . name ) If this raises an error, or the name and ID differ from what is expected, follow the instructions and try again. The issue with this structure is that it is not secure. It's easy to slip up and copy your code and accidentally send someone your token, and it makes it harder to collaborate on code with others.","title":"Authentication"},{"location":"tutorial/authentication/#using-a-env-file","text":"To solve this problem, we'll create a separate file called .env which will contain our token. Your file should look like this, where TOKEN is the .ROBLOSECURITY token you grabbed earlier. ROBLOXTOKEN=TOKEN Place it in the same folder as your application's main file. Your file structure should look like this: . \u251c\u2500 .env \u2514\u2500 main.py Next, install the python-dotenv library with the following command: $ pip install python-dotenv Then, add these lines to the top of your code: import os from dotenv import load_dotenv After that, replace the code where you generate your client with this: load_dotenv () client = Client ( os . getenv ( \"ROBLOXTOKEN\" )) Test it with get_authenticated_user and you should be all set! Finished code import asyncio import os from dotenv import load_dotenv from roblox import Client client = Client ( os . getenv ( \"ROBLOXTOKEN\" )) async def main (): user = await client . get_authenticated_user () print ( \"ID:\" , user . id ) print ( \"Name:\" , user . name ) asyncio . get_event_loop () . run_until_complete ( main ())","title":"Using a .env file"},{"location":"tutorial/get-started/","text":"Get started \u00b6 At the beginning of every ro.py application is the client. The client represents a user's session on Roblox. To initialize a client, import it from the roblox module: from roblox import Client client = Client () Great, we've got a client! But how can we use it? We start by calling await client.get_OBJECT() where OBJECT is a Roblox datatype, like a User, Group or Universe. But wait - if you tried to run code like this: from roblox import Client client = Client () await client . get_user ( 1 ) You would get an error like this: File \"<input>\" , line 1 SyntaxError : 'await' outside function This may seem confusing - but this is intended design. To fix this, we need to wrap our code in an asynchronous function, and then run it with get_event_loop().run_until_complete , like so: import asyncio from roblox import Client client = Client () async def main (): await client . get_user ( 1 ) asyncio . get_event_loop () . run_until_complete ( main ()) Great, our code works - but it's not doing anything yet. Let's print out some information about this user by replacing the code in main() with this: user = await client . get_user ( 1 ) print ( \"Name:\" , user . name ) print ( \"Display Name:\" , user . display_name ) print ( \"Description:\" , user . description ) Great! We now have a program that prints out a user's name, display name, and description. This same basic concept works for other kinds of objects on Roblox, like groups: group = await client . get_group ( 1 ) print ( \"Name:\" , group . name ) print ( \"Description:\" , group . description ) But what if we want to send requests as if we are an actual, logged-in user browsing the site? For example, what if I wanted to change the group's shout? Because only users with permission to change the group shout can actually change it, we need to tell Roblox that we can change that shout by \"authenticating\".","title":"Get Started"},{"location":"tutorial/get-started/#get-started","text":"At the beginning of every ro.py application is the client. The client represents a user's session on Roblox. To initialize a client, import it from the roblox module: from roblox import Client client = Client () Great, we've got a client! But how can we use it? We start by calling await client.get_OBJECT() where OBJECT is a Roblox datatype, like a User, Group or Universe. But wait - if you tried to run code like this: from roblox import Client client = Client () await client . get_user ( 1 ) You would get an error like this: File \"<input>\" , line 1 SyntaxError : 'await' outside function This may seem confusing - but this is intended design. To fix this, we need to wrap our code in an asynchronous function, and then run it with get_event_loop().run_until_complete , like so: import asyncio from roblox import Client client = Client () async def main (): await client . get_user ( 1 ) asyncio . get_event_loop () . run_until_complete ( main ()) Great, our code works - but it's not doing anything yet. Let's print out some information about this user by replacing the code in main() with this: user = await client . get_user ( 1 ) print ( \"Name:\" , user . name ) print ( \"Display Name:\" , user . display_name ) print ( \"Description:\" , user . description ) Great! We now have a program that prints out a user's name, display name, and description. This same basic concept works for other kinds of objects on Roblox, like groups: group = await client . get_group ( 1 ) print ( \"Name:\" , group . name ) print ( \"Description:\" , group . description ) But what if we want to send requests as if we are an actual, logged-in user browsing the site? For example, what if I wanted to change the group's shout? Because only users with permission to change the group shout can actually change it, we need to tell Roblox that we can change that shout by \"authenticating\".","title":"Get started"}]}